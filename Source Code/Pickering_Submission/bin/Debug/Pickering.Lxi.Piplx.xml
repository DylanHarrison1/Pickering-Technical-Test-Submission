<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Pickering.Lxi.Piplx</name>
    </assembly>
    <members>
        <member name="T:Pickering.Lxi.Piplx.AttributeCode">
            <summary>
            AttributeCode values for G(S)etAttribute method.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.Type">
            <summary>
            Type attribute of the Card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.Mode">
            <summary>
            Mode attribute of the Card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ConfigRegister">
            <summary>
            Gets/Sets WORD value of current monitor config register.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ShuntvoltageRegister">
            <summary>
            Gets WORD value of current monitor shuntvoltage register.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.CurrentValue">
            <summary>
            Gets double current value in Amps.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.InterlockStatus">
            <summary>
            Gets BOOL value of interlock status.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MainOvercurrentStatus">
            <summary>
            Gets BOOL value of main overcurrent status.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ChannelOvercurrentStatus">
            <summary>
            Gets BOOL value of overcurrent status on specific channel.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MainOutputEnable">
            <summary>
            Gets/Sets BOOL value. Enables/Disables main.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ChannelOutputEnable">
            <summary>
            Gets/Sets BOOL value. Enables/Disables specific channel.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.SetRange">
            <summary>
            Gets/Sets Auto range which toggles between ranges based on the value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.LowRangeMinimum">
            <summary>
            Gets low range minimum value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.LowRangeMedium">
            <summary>
            Gets low range medium value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.LowRangeMaximum">
            <summary>
            Gets low range maximum value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.LowRangeMaximumDeviation">
            <summary>
            Gets low range maximum deviation value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.LowRangePrecisionPercentage">
            <summary>
            Gets low range precision percentage value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.LowRangePrecisionDelta">
            <summary>
            Gets low range precision delta value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MediumRangeMinimum">
            <summary>
            Gets medium range minimum value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MediumRangeMedium">
            <summary>
            Gets medium range medium value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MediumRangeMaximum">
            <summary>
            Gets medium range maximum value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MediumRangeMaximumDeviation">
            <summary>
            Gets medium range maximum deviation value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MediumRangePrecisionPercentage">
            <summary>
            Gets medium range precision percentage value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MediumRangePrecisionDelta">
            <summary>
            Gets medium range precision delta value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.HighRangeMinimum">
            <summary>
            Gets high range minimum value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.HighRangeMedium">
            <summary>
            Gets high range medium value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.HighRangeMaximum">
            <summary>
            Gets high range maximum value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.HighRangeMaximumDeviation">
            <summary>
            Gets high range maximum deviation value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.HighRangePrecisionPercentage">
            <summary>
            Gets high range precision percentage value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.HighRangePrecisionDelta">
            <summary>
            Gets high range precision delta value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.GetPot">
            <summary>
            Read Pot Value from user store.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.SetPot">
            <summary>
            Save Pot value to non-volatile memory.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.SavePot">
            <summary>
            Save Pot value to volatile memory.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DataDump">
            <summary>
            Obtains a description of a Thermocouple Simulator sub-unit, as a text string.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MuxmMakeBeforeBreak">
            <summary>
            Makes the card make before break.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VoltageRange">
            <summary>
            Gets/Sets attribute value of Voltage Range of the Card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.CurrentRange">
            <summary>
            Gets/Sets attribute value of Current Range of the Card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ChannelEnable">
            <summary>
            Gets/Sets DWORD attribute to enable or disable the channel.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.TsTemperaturesCelsius">
            <summary>
            Reads 7 sensors on 1192r0 41-760 I2C Compensation Block.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.TsTemperaturesFahrenheit">
            <summary>
            Reads 7 sensors on 1192r0 41-760 I2C Compensation Block.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.TsEeprom">
            <summary>
            Reads/writes form/to 34LC02 EEPROM.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.TsEepromOffset">
            <summary>
            Sets or gets EEPROM address offset for read and write operations.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.TsEepromBufferSize">
            <summary>
            Sets the EEPROM buffer size for write operation.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.CardPcbNumber">
            <summary>
            Gets card PCB Number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.CardPcbRevision">
            <summary>
            Gets card PCB Revision number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.CardFirmwareRevision">
            <summary>
            Gets card FPGA Firmware Revision number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.CurrentInMilliamps">
            <summary>
            Sets/Gets DOUBLE value of Current in mA.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VoltageInVolts">
            <summary>
            Sets/Gets DOUBLE value of Voltage in V.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.SlewRate">
            <summary>
            Gets or sets (byte) value Upper nibble &lt;StepSize&gt; Lower nibble &lt;Clock-Rate&gt;.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.IsSlew">
            <summary>
            Gets BOOL to check if Slew Mode functionality if ON or OFF.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VoltageValue">
            <summary>
            Gets DOUBLE value of Voltage in Volts.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTAutoInputAtten">
            <summary>
            Sets/Gets DWORD (0-100) for input gain (Default = 100).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelPosition">
            <summary>
            Sets/Gets DWORD (0-32767) for Both Outputs on LVDT_5_6 WIRE &amp; OutputA on LVDT_4_WIRE.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelPositionB">
            <summary>
            Sets/Gets DWORD (0-32767) for OutputB on LVDT_4_WIRE.
            </summary>		
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelPercentPosition">
            <summary>
            Sets/Gets DOUBLE (-100.00% to 100.00%) for Both Out on LVDT_5_6 WIRE &amp; OutA on LVDT_4_WIRE.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelPercentPositionB">
            <summary>
            Sets/Gets DOUBLE (-100.00% to 100.00%) for OutB on LVDT_4_WIRE.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelVoltageSum">
            <summary>
            Sets/Gets DOUBLE in Volts  for VSUM value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelVoltageDiff">
            <summary>
            Sets/Gets DOUBLE in Volts  for VDIFF value (the limit is +/- VSUM).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelOutGain">
            <summary>
            Sets/Gets DWORD (1 or 2) for 1x or 2x output multiplier.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTManualInputAtten">
            <summary>
            Sets/Gets DWORD (0-255) Pot Value on LVDT.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelMode">
            <summary>
            Sets/Gets DWORD to set mode 1 = LVDT_5_6_WIRE, mode 2=  LVDT_4_WIRE.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelDelayA">
            <summary>
            Sets/Gets DWORD (0-6499) delay for OutputA.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelDelayB">
            <summary>
            Sets/Gets DWORD (0-6499) delay for OutputB.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelInputLevel">
            <summary>
            Sets/Gets DWORD (0-65520) for Input Value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelInputFreq">
            <summary>
            Sets/Gets DWORD (300-20000 Hz) for Input Frequency.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelOutLevel">
            <summary>
            Sets/Gets DWORD (0-4096)  output level.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTdsPicVersion">
            <summary>
            Gets DWORD value of for dsPIC firmware version 104 = v0.01.04.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelInvertA">
            <summary>
            Sets/Gets DWORD (0 or 1)  for OutA.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelInvertB">
            <summary>
            Sets/Gets DWORD (0 or 1)  for OutB.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTPhaseTracking">
            <summary>
            Phase tracking mode on or off  -CALIBRATION ONLY.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTSampleLoad">
            <summary>
            Sets DWORD comprises of Top 16 bits is GAIN (0-100) and lower 16 frequency (300-20000 Hz).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelInputFreqHiRes">
            <summary>
             Gets DWORD value of frequency in Hz.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTLosThreshold">
            <summary>
            Sets/Gets DWORD (0 to 32768) for LOS Threshold (Default = 32768).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTSmplBufferSize">
            <summary>
            Sets/Gets DWORD (1 to 500) for Sample buffer size (Default = 500).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelNullOffset">
            <summary>
            Sets/Gets WORD (0 to 100) for null offset (Default = 0).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTChannelLOSStatus">
            <summary>
            Gets BYTE value (0x00 or 0x01) checking LOS status.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTMaxOutVoltage">
            <summary>
            Gets DOUBLE value for maximum output voltage.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTMinOutVoltage">
            <summary>
            Gets DOUBLE value for minimum output voltage.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTMaxInVoltage">
            <summary>
            Gets DOUBLE value for maximum input voltage.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTMinInVoltage">
            <summary>
            Gets DOUBLE value for minimum input voltage.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTPhaseDelayA">
            <summary>
            Sets/Gets DOUBLE value for DOUBLE in degrees for OutA.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTPhaseDelayB">
            <summary>
            Sets/Gets DOUBLE value for DOUBLE in degrees for OutB.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ResolverStartStopRotate">
            <summary>
            Sets/Gets BOOL TRUE for Start, FALSE of Stop.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ResolverNumOfTurns">
            <summary>
            Sets/ Gets WORD Number of turns (1-65535).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ResolverRotateSpeed">
            <summary>
            Sets/Gets DOUBLE rotating speed (RPM speed upto 655.35 RPM).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ResolverPosition">
            <summary>
            Sets/Gets DOUBLE rotation between -180.00 to 180.00 Degrees.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ResolverPosition0to360">
            <summary>
            Sets/Gets DOUBLE rotation between 0.00 to 360.00 Degrees.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VDTNoWait">
            <summary>
            Sets/Gets DWORD ... applicable to 4 wire mode, Sets OutA and OutB instantaneously.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.RampResponse">
            <summary>
            Sets/Gets DOUBLE response delay in seconds up to 1677 seconds.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.SettleDelayZero">
            <summary>
            Sets/Gets BOOL, settling time set to zero for the ouput subunits.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MeasureConfig">
            <summary>
            Set measurement configuration.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.Load">
            <summary>
            Set/Get DWORD load 0-300 (0-300mA).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ProgThreshold">
            <summary>
            Sets/Gets DOUBLE value for programmable threshold voltage
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.SubCapabilities">
            <summary>
            Sets/Gets DWORD value for subunit capabilities
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ProgTresholds">
            <summary>
            Sets/Gets array of DOUBLE value for programmable threshold voltages.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ProgTresholdsCount">
            <summary>
            Gets count of values for programmable threshold voltages.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.MultiY">
            <summary>
            For internal use. Sets DWORD value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioPatternMode">
            <summary>
            Sets/Gets Pattern Mode (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioExtClockMode">
            <summary>
            Sets/Gets External Clock Mode (DWORD).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioPattern">
            <summary>
            Sets/Gets each pattern for individual ports (BYTE).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioPatternOffset">
            <summary>
            Sets/Gets offset of the pattern to be read from individual ports (DWORD).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioPatternTotalCount">
            <summary>
            Gets pattern count for individual ports (DWORD).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioExtClockIoState">
            <summary>
            Sets/Gets port clk pin state when IO Mode is set (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioExtClockIoDir">
            <summary>
            Sets/Gets port clk pin direction when IO Mode is set (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioIntClock">
            <summary>
            Sets/Gets Internal Clock Enable/Disable (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioIntClockFreq">
            <summary>
            Sets/Gets Internal Clock Frequency (DOUBLE).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioStartPosition">
            <summary>
            Sets/Gets Start position of pattern capture engine (DWORD).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioEndPosition">
            <summary>
            Sets/Gets End position of pattern capture engine (DWORD).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioDynamicContinuous">
            <summary>
            Sets/Gets continuous run status of pattern capture engine (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioDynamicOneLoop">
            <summary>
            Sets/Gets one loop execution status of pattern generation/acquisition engine (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioLoadPatternFile">
            <summary>
            Loads pattern file to the PSRAM (CHAR*).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioSoftwareTrigger">
            <summary>
            Send Software trigger for pattern mode operation (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioDynamicBusy">
            <summary>
            Check the status of the capture engine (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioAllPortData">
            <summary>
            Load/retrieve patterns for all ports for an address offset (BYTE*).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioAllPortDataOffset">
            <summary>
            Used to get/set the offset to/from which data should be loaded/retrieved (DWORD).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioFifoPosition">
            <summary>
            Gets FIFO position or number of dynamic operations for the card (DWORD).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioAbort">
            <summary>
            Aborts any existing trigger.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioPatternFileErr">
            <summary>
            Get the errors found in the Pattern File.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioSavePatternFile">
            <summary>
            Saves pattern file from the PSRAM (CHAR*).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioValidatePatternFile">
            <summary>
            Verify the pattern file to be loaded to DIO card memory (CHAR*).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioGoToStart">
            <summary>
            Clears any pending transactions and prepares the card to start DIO operation. (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.DioClockDelay">
            <summary>
            Sets/Gets the output clock delay in microseconds (min = 0.08 us, max = 163 us) (DOUBLE).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.VoltAmpOffset">
            <summary>
            Sets/Gets offset value for specific channel of voltage amplifier card (DWORD)
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ThermoSetTemperature">
            <summary>
            Sets temperature value (DOUBLE).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ThermoType">
            <summary>
            Gets or sets thermocouple type (BYTE).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ThermoTemperatureScale">
            <summary>
            Gets or sets thermocouple scale (BYTE).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ThermoGetVoltage">
            <summary>
            Gets voltage value (DOUBLE).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ThermoCalcVoltage">
            <summary>
            Sets temperature value (DOUBLE).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ThermoCalcTemperature">
            <summary>
            Gets temperature value (DOUBLE).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.CardCapabilities">
            <summary>
            Retrieve capabilities of the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.BattSetMeasureSet">
            <summary>
            Set voltage/current, measure, set again.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.TemperatureSensorCount">
            <summary>
            Get the number of Temperature sensors on-board (DWORD).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.GlobalAddressSlotNumber">
            <summary>
            Retrieve Global address slot address of a PXIe card (DWORD).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.FlushRcDataSyncOption">
            <summary>
            FLAG = 1 -> Generates db file for a card if on board memory is present (DWORD)<br />
            FLAG = 2 -> Updates the db file as well as memory with current relay count values (DWORD)
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.CardAliasMode">
            <summary>
            Get the status of aliasMode flag for the selected cardNum (BOOL).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.CardAliasRealId">
            <summary>
            Get the Real Card ID for the selected card (StringBuilder).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorPolarity">
            <summary>
            Set/Get DWORD as Polarity (0 - Bipolar, 1 - Unipolar).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorPhysicalTriggerMode">
            <summary>
            Set/Get DWORD as Physical Trigger Mode (0 - None, 1 - Rising edge, 2 - Falling edge, 3 - Both).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorVirtualTriggerMode">
            <summary>
            Set/Get DWORD as Virtual Trigger Mode (0 - None, 1 - Rising edge, 2 - Falling edge, 3 - Both).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorLogicalOperation">
            <summary>
            Set/Get DWORD as Logical operation of the Virtual Channel (0 - OR, 1 - AND).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorRange">
            <summary>
            Set/Get DWORD as Operation Range 0x0-open 0x1-100V 0x2-50V 0x3-40V 0x4-33V 0x5-28V 0x6-22V 0x7-18V.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorThreshold">
            <summary>
            Set/Get Double as Voltage Threshold.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorDebounceTime">
            <summary>
            Set/Get Double as Debounce Time.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorPhysicalMask">
            <summary>
            Set/Get DWORD as Physical Mask of the Virtual Channel - 16 bits.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorVirtualMask">
            <summary>
            Set/Get DWORD as Virtual Mask of the Virtual Channel - 16 bits.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorCaptureEnable">
            <summary>
            Set DWORD as the Signal to Enable the Capture Engine 0 – disabled, 1 - enabled.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorCaptureAppend">
            <summary>
            Set DWORD as the Signal to Enable Appending Events 0 – disabled, 1 - enabled.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorCaptureIndex">
            <summary>
            Get DWORD as the current capture index.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorReadOffset">
            <summary>
            Set/Get DWORD as the Read Address from DDR3 Memory.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorReadDDR3">
            <summary>
            Get 4 DWORDs as Event Data from DDR3 Memory (an array of 4 DWORDs – 128 bits in total).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorPhysicalState">
            <summary>
            Get DWORD as Raw Physical State Data – 16 bits.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorVirtualState">
            <summary>
            Get DWORD as Raw Virtual State Data – 16 bits.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorPhysicalFptMask">
            <summary>
            Set/Get DWORD as mask of physical channels generating Front Panel Interrupts – 16 bits.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorVirtualFptMask">
            <summary>
            Set/Get DWORD as mask of virtual channels generating Front Panel Interrupts – 16 bits.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorFptReset">
            <summary>
            Set - Reset Front Panel Interrupt Pins - Data Type Irrelevant (Not Used).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorResetDDR3Memory">
            <summary>
            Set - Reset DDR3 Memory - Data Type Irrelevant (Not Used).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorGetTimeStamp">
            <summary>
            Get 2 DWORDs as Time Stamp.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorGetTimeStampReference">
            <summary>
            Get 2 DWORDs as Time Stamp Reference.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.AttributeCode.ComparatorResetTimeStamp">
            <summary>
            Set - Reset Time Stamp - Data Type Irrelevant (Not Used).
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.BatterySimulatorExtension">
            <summary>
            Class represents Battery Simulator card
            and allows controlling it globally
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorExtension.IsInterlockUp">
            <summary>
            Obtains the present state of a hardware interlock associated 
            with battery simulator sub-units.
            </summary>
            <remarks>
            <para><b>Notes:</b></para>
            The function gets the summary state of all BATT sub-unit interlocks:
            <list type="bullet">
            <item>0 = one or more interlocks is "down"</item>
            <item>1 = all interlocks are "up"</item>
            </list>
            <para>
            Model 41-752-001 has a single global interlock affecting all 
            channels, and both modes above yield the same result.
            Interlock "up" state is hardware-latched from the physical wired 
            interlock by the action of PIL_BattSetEnable, when that function 
            succeeds. Hence: If the "up" state is indicated, the physical 
            interlock has remained intact and outputs are enabled as 
            previously set by PIL_BattSetEnable. If the "down" state is 
            indicated, the physical interlock has been broken and all outputs 
            will have been disabled automatically through hardware.</para>
            </remarks>
            <returns>The interlock state.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorExtension.IsSetMeasureSetEnabled">
            <summary>
            Enables or disables set\measure\set functionality.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorExtension.SetValue(Pickering.Lxi.Piplx.ValueType,System.Double)">
            <summary>
            Sets the output voltage or current of battery simulator 
            sub-units. All of the card's sub-units are set to the 
            given value.
            </summary>
            <remarks>The voltage or current value specified is rounded 
            to the precision of the sub-unit's DAC. The actual voltage 
            or current setting can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.GetValue(Pickering.Lxi.Piplx.ValueType)"/>.
            </remarks>
            <param name="valueType">The type of value to set.</param>
            <param name="value">The output value to set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorExtension.SetEnable(System.Boolean[])">
            <summary>
            Sets the output enable pattern of battery simulator (BATT type) sub-units.
            </summary>
            <remarks>
            <para><b>Notes</b></para>
            <para>Enable states of all the card's sub-units are set; bits in the supplied pattern 
            are utilised in ascending order of sub-unit, i.e.
            Pattern bit 0 = enable state of lowest numbered sub-unit (0 = OFF, 1 = ON)
            Pattern bit 1 = enable state of next numbered sub-unit (0 = OFF, 1 = ON)
            etc.</para>
            <para>Note that the operation can fail if a necessary hardware interlock is disconnected.
            The present enable pattern can be obtained using
            <see cref="M:Pickering.Lxi.Piplx.BatterySimulatorExtension.GetEnable"/>.</para>
            </remarks>
            <param name="pattern">The pattern of output enables to set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorExtension.GetEnable">
            <summary>
            Obtains the output enable pattern of battery simulator sub-units.
            </summary>
            <remarks><para><b>Notes</b></para>
            <para>Enable states of all the card's sub-units are obtained; bits in 
            Pattern are assigned in ascending order of sub-unit, i.e.
            Pattern bit 0 = enable state of lowest numbered sub-unit (0 = OFF, 1 = ON)
            Pattern bit 1 = enable state of next numbered sub-unit (0 = OFF, 1 = ON)
            etc.</para>
            </remarks>
            <returns>Output enable pattern.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorExtension.#ctor(Pickering.Lxi.Piplx.PiplxCard)">
            <summary>
            Creates BatterySimulatorExtension class, which represents
            physical Battery Simulator card, and allows to control all 
            sub-unit's settings of voltage, current, enable globally.
            </summary>
            <param name="card">Piplx card.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.BatterySimulatorSubunit">
            <summary>
            Class represents Battery Simulator sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.BitsCount">
            <summary>
            Number of bits.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.Current">
            <summary>
            Gets or sets current value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.Voltage">
            <summary>
            Gets or sets voltage value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.MeasureConfiguration">
            <summary>
            Gets or sets measure configuration.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.MeasureCurrent">
            <summary>
            Gets measured current value from onboard chip.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.MeasureVoltage">
            <summary>
            Gets measured voltage value from onboard chip.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.Load">
            <summary>
            Gets or sets load value 0-300 (0-300mA).
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the BatterySimulatorSubunit class, which represents the 
            physical subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.ReadCalibration(System.Int32)">
            <summary>
            Reads an integer calibration value from on-card EEPROM.
            </summary>
            <remarks>Stored values are utilised by specific Pilpxi 
            driver functions, and they should only be overwritten by 
            an appropriate calibration utility.
            </remarks>
            <param name="index">Calibration value index number (see below)</param>
            <returns>The result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.WriteCalibration(System.Int32,System.Int32)">
            <summary>
            Writes an integer calibration value to on-card EEPROM.
            </summary>
            <remarks>
            <para>Stored values are utilised by specific Pilpxi driver 
            functions, and they should only be overwritten by an 
            appropriate calibration utility.</para>
            <para>The number of bits actually stored is specific to 
            the target sub-unit - any redundant high-order bits of the 
            supplied Data value are ignored.</para>
            <para>The storage capacity supporting this feature is determined 
            by their functionality.</para>
            </remarks>
            <param name="index">Calibration value index number.</param>
            <param name="data">The value to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.Enabled">
            <summary>
            Obtains the output enable of battery simulator sub-unit.
            </summary>
            <returns>Enable state; false = OFF, true = ON.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.IsInterlockUp">
            <summary>
            Obtains the present state of a hardware interlock.
            </summary>
            <remarks>
            Interlock "up" state is hardware-latched from the physical 
            wired interlock by the action of 
            <see cref="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.Enabled"/>, 
            when that function succeeds. Hence:
            <list type="bullet">
            <item>If the "up" state is indicated, the physical interlock 
            has remained intact and outputs are enabled as previously 
            set by 
            <see cref="P:Pickering.Lxi.Piplx.BatterySimulatorSubunit.Enabled"/>.</item>
            <item>If the "down" state is indicated, the physical interlock 
            has been broken and all outputs will have been disabled 
            automatically through hardware.</item>
            </list>
            </remarks>
            <returns>Interlock state; false = interlock is "down", 
            true = interlock is "up".</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.SetValue(Pickering.Lxi.Piplx.ValueType,System.Double)">
            <summary>
            Sets the output voltage or current of battery simulator 
            sub-unit.
            </summary>
            <remarks>The voltage or current value specified is rounded 
            to the precision of the sub-unit's DAC. The actual voltage 
            or current setting can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.GetValue(Pickering.Lxi.Piplx.ValueType)"/>.
            </remarks>
            <param name="valueType">The type of value to set.</param>
            <param name="value">The output value to set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.GetValue(Pickering.Lxi.Piplx.ValueType)">
            <summary>
            Obtains the voltage or current setting of a battery 
            simulator sub-unit.
            </summary>
            <remarks>
            <para><b>Notes:</b></para>
            <para>The voltage result is the nominal value to which the 
            output has been set, not necessarily the actual voltage 
            being output (which could be affected by conditions such 
            as current-limiting).</para>
            </remarks>
            <param name="valueType">The type of value to obtain.</param>
            <returns>The output setting.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.ViewSubunit">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            	<para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            	<para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <returns>One-dimensional array (vector) containing 
            the result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.WriteSubunit(System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            	<para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            	<para><b>Warning:</b></para>
            	<para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            	<para><b>Example Code</b></para>
            For clarity, this example omits initialising the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 ints
            supports sub-units having upto 64 switches) */
            int[] data = new int[2]; /* Value specifies the number 
            of array elements */
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            /* Setup array data to turn on switches 3, 33 and output 
            to the card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... now have switches 3, 4, 33 energised */
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&amp;#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... leaving switches 3 and 4 energised */
            </code>
            </remarks>
            <param name="data">One-dimensional array (vector) 
            containing the bit-pattern to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of
            a sub-unit.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.MeasureFromOnBoardChip(Pickering.Lxi.Piplx.ValueType)">
            <summary>
            Measure value from onboard chip.
            </summary>
            <param name="valueType">Type of measured value <see cref="T:Pickering.Lxi.Piplx.ValueType"/>.</param>
            <returns>Measured value according to <see cref="T:Pickering.Lxi.Piplx.ValueType">valueType</see>.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstAttributes">
            <summary>
            The available BIRST attributes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.CardTopology">
            <summary>
            Gets topology code.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.CardRefRes1">
            <summary>
            Gets reference resistance #1 value, milliohms (e.g. 1000 = 1R0).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.CardRefRes2">
            <summary>
            Gets reference resistance #2 value, milliohms (e.g. 100 = 0R1).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.CardCapabilitiesReg1">
            <summary>
            Gets bit flags indicating BIRST control register #1 capabilities.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.CardCapabilitiesReg2">
            <summary>
            Gets bit flags indicating BIRST control register #2 capabilities.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.CardCalibrationValues">
            <summary>
            Gets the number of card-level calibration values.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubUnitPoles">
            <summary>
            Gets the number of testable poles.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubunitSegments">
            <summary>
            Gets the number of BIRST segments in the sub-unit.<br/><br/>
            It is assumed that, for example in 60-600-022 (32 x 8), if configured for segmented BIRST:<br/>
            BIRST logical segment 1 = (Y-seg1, X-seg1) = Y1 - Y4, X1 - X16;  BIRST connection = Y3, Y4<br/>
            BIRST logical segment 2 = (Y-seg1, X-seg2) = Y1 - Y4, X17 - X32; BIRST connection = Y3, Y4<br/>
            BIRST logical segment 3 = (Y-seg2, X-seg1) = Y5 - Y8, X1 - X16;  BIRST connection = Y7, Y8<br/>
            BIRST logical segment 4 = (Y-seg2, X-seg2) = Y5 - Y8, X17 - X32; BIRST connection = Y7, Y8<br/>
            BIRST logical segment 5 = unused<br/>
            BIRST logical segment 6 = unused<br/>
            </summary>        
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubunitCalibrationValues">
            <summary>
            Gets the number of sub-unit-level calibration values.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.PoleCalibrationValues">
            <summary>
            Gets the number of sub-unit-level calibration values.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubunitDefaultCurrent">
            <summary>
            Gets the default test current (BIRST Mk2).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubunitDefaultGain">
            <summary>
            Gets the default test gain (BIRST Mk2) 
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1XSize">
            <summary>
            Gets segment X-size (columns).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1YSize">
            <summary>
            Gets segment Y-size (rows).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1XMin">
            <summary>
            Gets segment minimum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1XMax">
            <summary>
            Gets segment maximum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1YMin">
            <summary>
            Gets segment minimum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1YMax">
            <summary>
            Gets segment maximum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1BlockNum">
            <summary>
            Gets BIRST physical block number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1Axis1">
            <summary>
            Gets axis (alpha) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1Line1">
            <summary>
            Gets line (numeric) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1Axis2">
            <summary>
            Gets axis (alpha) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg1Line2">
            <summary>
            Gets line (numeric) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2XSize">
            <summary>
            Gets segment X-size (columns).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2YSize">
            <summary>
            Gets segment Y-size (rows).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2XMin">
            <summary>
            Gets segment minimum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2XMax">
            <summary>
            Gets segment maximum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2YMin">
            <summary>
            Gets segment minimum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2YMax">
            <summary>
            Gets segment maximum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2BlockNum">
            <summary>
            Gets BIRST physical block number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2Axis1">
            <summary>
            Gets axis (alpha) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2Line1">
            <summary>
            Gets line (numeric) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2Axis2">
            <summary>
            Gets axis (alpha) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg2Line2">
            <summary>
            Gets line (numeric) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3XSize">
            <summary>
            Gets segment X-size (columns).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3YSize">
            <summary>
            Gets segment Y-size (rows).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3XMin">
            <summary>
            Gets segment minimum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3XMax">
            <summary>
            Gets segment maximum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3YMin">
            <summary>
            Gets segment minimum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3YMax">
            <summary>
            Gets segment maximum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3BlockNum">
            <summary>
            Gets BIRST physical block number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3Axis1">
            <summary>
            Gets axis (alpha) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3Line1">
            <summary>
            Gets line (numeric) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3Axis2">
            <summary>
            Gets axis (alpha) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg3Line2">
            <summary>
            Gets line (numeric) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4XSize">
            <summary>
            Gets segment X-size (columns).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4YSize">
            <summary>
            Gets segment Y-size (rows).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4XMin">
            <summary>
            Gets segment minimum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4XMax">
            <summary>
            Gets segment maximum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4YMin">
            <summary>
            Gets segment minimum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4YMax">
            <summary>
            Gets segment maximum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4BlockNum">
            <summary>
            Gets BIRST physical block number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4Axis1">
            <summary>
            Gets axis (alpha) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4Line1">
            <summary>
            Gets line (numeric) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4Axis2">
            <summary>
            Gets axis (alpha) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg4Line2">
            <summary>
            Gets line (numeric) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5XSize">
            <summary>
            Gets segment X-size (columns).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5YSize">
            <summary>
            Gets segment Y-size (rows).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5XMin">
            <summary>
            Gets segment minimum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5XMax">
            <summary>
            Gets segment maximum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5YMin">
            <summary>
            Gets segment minimum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5YMax">
            <summary>
            Gets segment maximum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5BlockNum">
            <summary>
            Gets BIRST physical block number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5Axis1">
            <summary>
            Gets axis (alpha) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5Line1">
            <summary>
            Gets line (numeric) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5Axis2">
            <summary>
            Gets axis (alpha) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg5Line2">
            <summary>
            Gets line (numeric) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6XSize">
            <summary>
            Gets segment X-size (columns).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6YSize">
            <summary>
            Gets segment Y-size (rows).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6XMin">
            <summary>
            Gets segment minimum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6XMax">
            <summary>
            Gets segment maximum X-line (column).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6YMin">
            <summary>
            Gets segment minimum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6YMax">
            <summary>
            Gets segment maximum Y-line (row).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6BlockNum">
            <summary>
            Gets BIRST physical block number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6Axis1">
            <summary>
            Gets axis (alpha) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6Line1">
            <summary>
            Gets line (numeric) reference of BIRST connection 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6Axis2">
            <summary>
            Gets axis (alpha) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAttributes.SubSeg6Line2">
            <summary>
            Gets line (numeric) reference of BIRST connection 2.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstAxis">
            <summary>
            BIRST Axes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAxis.X">
            <summary>
            'X' axis.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAxis.Y">
            <summary>
            'Y' axis.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstAxis.None">
            <summary>
            Invalid axis.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstControlRegister">
            <summary>
            BIRST Control register flags.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControlRegister.Register1">
            <summary>
            Control register #1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControlRegister.Register2">
            <summary>
            Control register #2.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstControls1">
            <summary>
            BIRST capabilities flags.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.PolarityReverser">
            <summary>
            Logical bit controlling current source polarity reverser.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Connect">
            <summary>
            Logical bit controlling BIRST circuit "RL1".
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Pole2">
            <summary>
            Logical bit controlling BIRST circuit "RL2".
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Pole1Sub2">
            <summary>
            Logical bit controlling BIRST circuit "RL3".
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Pole2Sub2">
            <summary>
            Logical bit controlling BIRST circuit "RL4".
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block1Pri1">
            <summary>
            Logical bit controlling physical block 1 primary connection relay 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block1Pri2">
            <summary>
            Logical bit controlling physical block 1 primary connection relay 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block2Pri1">
            <summary>
            Logical bit controlling physical block 2 primary connection relay 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block2Pri2">
            <summary>
            Logical bit controlling physical block 2 primary connection relay 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block3Pri1">
            <summary>
            Logical bit controlling physical block 3 primary connection relay 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block3Pri2">
            <summary>
            Logical bit controlling physical block 3 primary connection relay 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block4Pri1">
            <summary>
            Logical bit controlling physical block 4 primary connection relay 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block4Pri2">
            <summary>
            Logical bit controlling physical block 4 primary connection relay 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block5Pri1">
            <summary>
            Logical bit controlling physical block 5 primary connection relay 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block5Pri2">
            <summary>
            Logical bit controlling physical block 5 primary connection relay 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block6Pri1">
            <summary>
            Logical bit controlling physical block 6 primary connection relay 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.Block6Pri2">
            <summary>
            Logical bit controlling physical block 6 primary connection relay 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.SubunitSelector">
            <summary>
            
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls1.ConnectRelayTest">
            <summary>
            Logical bit controlling BIRST circuit RL09 on PCB1558".
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstControls2">
            <summary>
            BIRST control register for MK2
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.None">
            <summary>
            No controls.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.HiCurrentPos">
            <summary>
            Logical bit controlling "RL5", 100mA+.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.HiCurrentNeg">
            <summary>
            Logical bit controlling "RL6", 100mA-.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.HiResRef">
            <summary>
            Logical bit controlling "RL7", 1R0 ref.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.LoResRef">
            <summary>
            Logical bit controlling "RL8", 0R1 ref.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.AnalogSw1">
            <summary>
            Logical bit controlling SW1, Matrix Access Point 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.AnalogSw2">
            <summary>
            Logical bit controlling SW2, Matrix Access Point 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.AnalogSw3">
            <summary>
            Logical bit controlling SW3, Matrix Access Point 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.AnalogSw4">
            <summary>
            Logical bit controlling SW4, Matrix Access Point 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.AnalogSw5">
            <summary>
            Logical bit controlling SW5, Diff. Amp. Gain Selection.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.AnalogSw6">
            <summary>
            Logical bit controlling SW6, Diff. Amp. Gain Selection.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.AnalogSw7">
            <summary>
            Logical bit controlling SW7, 100mA Calibration.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstControls2.AnalogSw8">
            <summary>
            Logical bit controlling SW8, 100mA Calibration.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstFeature">
            <summary>
            Support for Mk1 and Mk2 BIRST topologies.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.Axis1">
            <summary>
            The first BIRST connection axis identifier ('X' or 'Y').
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.Axis2">
            <summary>
            The second BIRST connection axis identifier ('X' or 'Y').
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.Card">
            <summary>
            Pickering card reference of target.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.Capabilities">
            <summary>
            BIRST capabilities flags.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.ControlRegister1">
            <summary>
            BIRST control register for MK2. Same as BIRST capabilities flags.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.ControlRegister2">
            <summary>
            BIRST control register for MK2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.DefaultCurrent">
            <summary>
            BIRST Mk2 default current. For Mk1 is set to BirstSubunitCurrent.None.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.DefaultGain">
            <summary>
            /// BIRST Mk2 default gain. For Mk1 is set to BirstSubunitGain.None.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.IsConnected">
            <summary>
            Gets or sets BIRST unit connection mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.IsPolarityReversed">
            <summary>
            Gets or sets BIRST unit measure mode (polarity).
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.IsTopologyMk2">
            <summary>
            Determines if BIRST topology is Mk1 or Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.Line1">
            <summary>
            The first line of the above axis being utilised by BIRST.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.Line2">
            <summary>
            The second line of the above axis being utilised by BIRST.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.MeasurementMode">
            <summary>
            Determines if BIRST unit is connected to reference resistior or on way to matrix.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.PolarityMode">
            <summary>
            Determines BIRST unit measure mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.Poles">
            <summary>
            The number of poles.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.ReferenceResistance">
            <summary>
            Reference resistance value (in ohms).
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.MeasuredReferenceResistances">
            <summary>
            Measured reference resistances values (in ohms) for each current and gain.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.SubunitNumber">
            <summary>
            Sub-unit of target to access (unity-based).
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Birst.BirstFeature.Topology">
            <summary>
            BIRST topology.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.BipolarMeasure">
            <summary>
            Make BIRST bipolar measurement.
            </summary>
            <returns>The measurements results.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.GetAtribute(Pickering.Lxi.Piplx.Birst.BirstAttributes)">
            <summary>
            Gets the value of a BIRST attribute.
            </summary>
            <param name="attr">Attribute to be obtained.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.GetAtribute``1(Pickering.Lxi.Piplx.Birst.BirstAttributes)">
            <summary>
            Gets the value of a BIRST attribute.
            </summary>
            <param name="attr">Attribute to be obtained.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.GetMeasuredReferenceResistance(Pickering.Lxi.Piplx.Birst.BirstSubunitCurrent,Pickering.Lxi.Piplx.Birst.BirstSubunitGain)">
            <summary>
            Gets measured reference resistance value for specific current and gain.
            </summary>
            <param name="current">Sub-unit current.</param>
            <param name="gain">Sub-unit gain.</param>
            <returns>Measured reference resistance value for specific current and gain.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.Initialize">
            <summary>
            Initialize instance data. Can be overriden :).
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.Measure(Pickering.Lxi.Piplx.Birst.BirstFeature.BirstConnectType,System.Int32)">
            <summary>
            Returns measured resistance value.
            </summary>
            <param name="connectType">BIRST connection type (matrix or reference resistance).</param>
            <param name="refRes">Reference resistance index for KM2. Possible values 0 or 1. Default 0 pro MK1.</param>
            <returns>Measured resistance value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.MeasureReferenceResistance(System.Int32)">
            <summary>
            Returns measured reference resistance value.
            </summary>
            <param name="refRes">Reference resistance index for KM2. Possible values 0 or 1. Default 0 pro MK1.</param>
            <returns>Measured reference resistance value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.MeasureReferenceResistance(Pickering.Lxi.Piplx.Birst.BirstSubunitCurrent,Pickering.Lxi.Piplx.Birst.BirstSubunitGain)">
            <summary>
            Returns measured reference resistance value.
            </summary>
            <param name="current">Current use for measurement.</param>
            <param name="gain">OpAmp gain for MK2.</param>
            <returns>Measured reference resistance value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.SetupControlRegister2(System.Boolean)">
            <summary>
            Gets value for ControlRegister2 depends on measurement mode (normal/reverse).
            </summary>
            <param name="reverseMeasurement">Specifying measurement mode. True for normal. False for reverse.</param>
            <returns>ControlRegister2 flags.</returns>
            <remarks>Useful only for Mk2 topology. Otherwise returns zero.</remarks>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.UnipolarMeasure">
            <summary>
            Make BIRST measurement.
            </summary>
            <returns>The measurement result.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Birst.BirstFeature.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            
            </summary>
            <param name="card"></param>
            <param name="subunitNumber"></param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstConnectType">
            <summary>
            BIRST connection type.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstConnectType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstConnectType.Leave">
            <summary>
            Single mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstConnectType.Toggle">
            <summary>
            Toggle mode.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstConnectionMode">
            <summary>
            BIRST connection mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstConnectionMode.Matrix">
            <summary>
            Connection to matrix.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstConnectionMode.ReferenceResistance">
            <summary>
            Connection to reference resistor (default).
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstPolarityMode">
            <summary>
            BIRST polarity mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstPolarityMode.Normal">
            <summary>
            Normal polarity.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstFeature.BirstPolarityMode.Reverse">
            <summary>
            Reverse polarity.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstM1T">
            <summary>
            BIRST Mk1 topologies support.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstM2T">
            <summary>
            BIRST Mk2 topologies support.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstSubunitCurrent">
            <summary>
            BIRST current for Mk2
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstSubunitCurrent.None">
            <summary>
            No current.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstSubunitCurrent.Low">
            <summary>
            Low current (usually 10mA).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstSubunitCurrent.High">
            <summary>
            High current (usually 100mA).
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstSubunitGain">
            <summary>
            BIRST gains for Mk2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstSubunitGain.None">
            <summary>
            Gain not specified.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstSubunitGain.Gain1">
            <summary>
            Gain 1 (usually x10).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstSubunitGain.Gain2">
            <summary>
            Gain 2 (usually x30).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstSubunitGain.Gain3">
            <summary>
            Gain 3 (usually x100).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstSubunitGain.Gain4">
            <summary>
            Gain 4 (usually x120).
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Birst.BirstTopology">
            <summary>
            BIRST topology codes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.None">
            <summary>
            No BIRST capability.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology001">
            <summary>
            BIRST Mk1 original topology. Example: 40-584-001 (v2.00, with BIRST).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology002">
            <summary>
            BIRST Mk1: dual Y-buses, independent isolation; BIRST connects to first daughtercard
            INBOARD of isolation switches. Example: 60-555 (using PC634r0, PC635r0). Now obsoleted!
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology003">
            <summary>
            BIRST Mk1: topology as potentially available in 60-600, BIRST connections segmented on both axes
            (though 60-600 itself would use BIRST Mk2).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology004">
            <summary>
            BIRST Mk1: BRIC-M (and similar configurations) with BIRST "sub-unit" connections to its two Y-buses.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology005">
            <summary>
            BIRST Mk1: single Y-bus, automated isolation; BIRST connects to first daughtercard
            INBOARD of isolation switches. Example: 60-554 (using PC628r0, PC629r0). Now obsoleted!
            </summary> 
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology006">
            <summary>
            BIRST Mk1 - 60-590-001.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology007">
            <summary>
            BIRST Mk1 - 60-590-002.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology008">
            <summary>
            BIRST Mk1 - model 40-566A: dual Y-buses with independent isolation, requiring
            an external adapter to test the second Y-bus
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology009">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology010">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology011">
            <summary>
            BIRST Mk1 65-290-002.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology012">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology013">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology014">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology015">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology016">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology017">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology018">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology019">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology020">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology201">
            <summary>
            BIRST Mk2, otherwise similar to Topology001.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology202">
            <summary>
            BIRST Mk2, otherwise similar to Topology002.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology203">
            <summary>
            BIRST Mk2, otherwise similar to Topology003.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology204">
            <summary>
            BIRST Mk2, otherwise similar to Topology004.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology205">
            <summary>
            BIRST Mk2, otherwise similar to Topology_005.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology206">
            <summary>
            BIRST Mk2 - otherwise similar to Topology_006.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology207">
            <summary>
            BIRST Mk2 - otherwise similar to Topology_007.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology208">
            <summary>
            BIRST Mk2 - otherwise similar to Topology_008.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology209">
            <summary>
            BIRST Mk2 - otherwise similar to Topology_008.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology210">
            <summary>
            BIRST Mk2 - otherwise similar to Topology_010.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology211">
            <summary>
            BIRST Mk2 - otherwise similar to Topology_011.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology212">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology213">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology214">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology215">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology216">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology217">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology218">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology219">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Birst.BirstTopology.Topology220">
            <summary>
            BIRST Mk1 - as yet undefined.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.CalibrationDate">
            <summary>
            Calibration Date of Precision resistor subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.CalibrationDate.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="year">Year of the calibration.</param>
            <param name="day">Day in year of the calibration.</param>
            <param name="interval">Calibration interval (in days).</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.CalibrationDate.Year">
            <summary>
            Year of the calibration.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.CalibrationDate.Day">
            <summary>
            Day in year of the calibration.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.CalibrationDate.Interval">
            <summary>
            Calibration interval (in days).
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.CalibrationStore">
            <summary>
            The type of calibration store.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CalibrationStore.User">
            <summary>
            User calibration store.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CalibrationStore.Factory">
            <summary>
            Factory calibration store.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.CardCapabilities">
            <summary>
            Card extended capabilities.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardCapabilities.None">
            <summary>
            The card, doesn't have any added capabilities.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardCapabilities.HardwareInterlock">
            <summary>
            The card supports hardware interlock.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardCapabilities.Measurement">
            <summary>
            The card supports measurement capabilities.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardCapabilities.RelayCountingMemory">
            <summary>
            Card supports Relay counting capabilities.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.CardStatuses">
            <summary>
            Bit status of the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.NoCard">
            <summary>
            No card with specified number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.WrongDriver">
            <summary>
            Card requires newer driver.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.EepromError">
            <summary>
            Card EEPROM fault.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.Disabled">
            <summary>
            Card disabled.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.NoSubunit">
            <summary>
            No sub-unit with specified number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.Busy">
            <summary>
            Sub-unit operations not completed.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.HardwareFault">
            <summary>
            Card hardware defect.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.ParityError">
            <summary>
            PCIbus parity error.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.PowerSupplyInhibited">
            <summary>
            Power supply output is disabled - by software.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.PowerSupplyShutdown">
            <summary>
            Power supply output is shutdown - due to overload.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.PowerSupplyCurrentLimit">
            <summary>
            Power supply is operating in current-limited mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.Corrupted">
            <summary>
            Sub-unit logical state is corrupted.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.CardInaccessible">
            <summary>
            Card cannot be accessed - failed/removed/unpowered.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.Uncalibrated">
            <summary>
            Sub-unit is uncalibrated.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.CalibrationDue">
            <summary>
            Sub-unit is due for calibration.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.Ok">
            <summary>
            Sub-unit is functional and stable.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CardStatuses.BirstEnabled">
            <summary>
            BIRST is active (card or sub-unit).
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.CJCBTemperatures">
            <summary>
            Cold Junction Compensation Block temperature sensors.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CJCBTemperatures.T1">
            <summary>
            Temperature sensor #1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CJCBTemperatures.T2">
            <summary>
            Temperature sensor #2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CJCBTemperatures.T3">
            <summary>
            Temperature sensor #3.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CJCBTemperatures.T4">
            <summary>
            Temperature sensor #4.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.CJCBTemperatures.SensorsCount">
            <summary>
            Total count of the temperature sensors.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ClockPinMode">
            <summary>
            The pattern acquisition/generation uses the clock pins for initiating the different mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ClockPinMode.Gpio">
            <summary>
            The clock pins of the port will be a GPIO.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ClockPinMode.InputChangePulse100ns">
            <summary>
            A 100ns pulse will be generated when input on port changes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ClockPinMode.InputChangePulse1us">
            <summary>
            A 1 us pulse will be generated when input on port changes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ClockPinMode.OutputChangePulse100ns">
            <summary>
            A 100ns pulse will be generated when output on port changes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ClockPinMode.OutputChangePulse1us">
            <summary>
            A 1 us pulse will be generated when output on port changes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ClockPinMode.PatternOnRisingEdge">
            <summary>
            Pattern acquisition/generation during, rising edge of clock input.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ClockPinMode.PatternOnFallingEdge">
            <summary>
            Pattern acquisition/generation during, falling edge of clock input.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ClockPinMode.PatternOnBothEdges">
            <summary>
            Pattern acquisition/generation during, both edges of clock input.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock">
            <summary>
            Cold Junction Compensation Block class.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.EepromSize">
            <summary>
            Cold Junction Compensation Block EEPROM size in bytes.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.CelsiusTemperatures">
            <summary>
            Returns temperature sensors values in Celsius temperature scale.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.FahrenheitTemperatures">
            <summary>
            Returns temperature sensors values in Fahrenheit temperature scale.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.IsPresent">
            <summary>
            Gets if Cold Junction Compensation Block is connected to the card or not.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.ProgrammableVoltageSource">
            <summary>
            Subunit number.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.T1C">
            <summary>
            Temperature sensor #1 in Celsius degrees.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.T1F">
            <summary>
            Temperature sensor #1 in Fahrenheit degrees.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.T2C">
            <summary>
            Temperature sensor #2 in Celsius degrees.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.T2F">
            <summary>
            Temperature sensor #2 in Fahrenheit degrees.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.T3C">
            <summary>
            Temperature sensor #3 in Celsius degrees.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.T3F">
            <summary>
            Temperature sensor #3 in Fahrenheit degrees.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.T4C">
            <summary>
            Temperature sensor #4 in Celsius degrees.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.T4F">
            <summary>
            Temperature sensor #4 in Fahrenheit degrees.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.ReadEeprom(System.Int16)">
            <summary>
            Reads specified amount of data from EEPROM memory.
            </summary>
            <param name="size">Amount of the data to read.</param>
            <returns>Data from EEPROM memory.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.ReadEeprom(System.Int16,System.Int16)">
            <summary>
            Reads specified amount of data from EEPROM memory from specified offset.
            </summary>
            <param name="offset">EEPROM memory offset.</param>
            <param name="size">Amount of the data to read.</param>
            <returns>Data from EEPROM memory.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.WriteEeprom(System.Byte[],System.Int16)">
            <summary>
            Writes specified amount of data to EEPROM memory.
            </summary>
            <param name="buffer">Data to write to EEPROM memory.</param>
            <param name="size">Amount of the data to write.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.WriteEeprom(System.Byte[],System.Int16,System.Int16)">
            <summary>
            Writes specified amount of data to EEPROM memory from specified offset.
            </summary>
            <param name="buffer">Data to write to EEPROM memory.</param>
            <param name="offset">EEPROM memory offset.</param>
            <param name="size">Amount of the data to write.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.Item(System.Int16)">
            <summary>
            Gets or sets byte in EEPROM at specified address.
            </summary>
            <param name="address">EEPROM address location.</param>
            <returns>Byte from EEPROM at specified address</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.Item(System.String)">
            <summary>
            Returns temperature sensors values in specified temperature scale.
            </summary>
            <param name="temperatureScale">Temperature scale.
            C, Celsius - Celsius temperature scale.
            F, Fahrenheit - Fahrenheit temperature scale.
            </param>
            <returns>Temperature sensors values in specified temperature scale.</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ColdJunctionCompensationBlock.Item(System.String,Pickering.Lxi.Piplx.CJCBTemperatures)">
            <summary>
            Returns specified temperature sensor values in specified temperature scale.
            </summary>
            <param name="temperatureScale">Temperature scale.
            C, Celsius - Celsius temperature scale.
            F, Fahrenheit - Fahrenheit temperature scale.
            </param>
            <param name="temperatureSensor">Temperature sensor.</param>
            <returns>Temperature sensor values in specified temperature scale.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ComparatorLogicalOperations">
            <summary>Comparator logical operation of virtual channel.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorLogicalOperations.Or">
            <summary>Logical OR.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorLogicalOperations.And">
            <summary>Logical AND.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ComparatorPolarities">
            <summary>Comparator polarities.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorPolarities.Bipolar">
            <summary>Bipolar polarity.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorPolarities.Unipolar">
            <summary>Unipolar polarity.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ComparatorRanges">
            <summary>Comparator ranges.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorRanges.Open">
            <summary>Open channel.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorRanges.V1to100">
            <summary>1V to 100V.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorRanges.V2to50">
            <summary>2V to 50V.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorRanges.V3to40">
            <summary>3V to 40V.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorRanges.V4to33">
            <summary>4V to 33V.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorRanges.V5to28">
            <summary>5V to 28V.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorRanges.V6to22">
            <summary>6V to 22V.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorRanges.V7to18">
            <summary>7V to 18V.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ComparatorTriggerModes">
            <summary>Comparator trigger mode.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorTriggerModes.None">
            <summary>No mode.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorTriggerModes.RisingEdge">
            <summary>Rising edge mode.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorTriggerModes.FallingEdge">
            <summary>Falling edge mode.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ComparatorTriggerModes.Both">
            <summary>Both falling and rising edge mode.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ComparatorEvent">
            <summary>Class representing Comparator event.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorEvent.PhysicalData">
            <summary>Physical Comparator event data (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorEvent.RawPhysicalData">
            <summary>RAW physical Comparator data (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorEvent.RawVirtualData">
            <summary>RAW virtual Comparator data (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorEvent.Reserved">
            <summary>For future purposes (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorEvent.TimeStamp">
            <summary>Comparator event time stamp (48bits). Number of ticks 2.3121 MHz.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorEvent.VirtualData">
            <summary>Virtual Comparator event data (16bits).</summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorEvent.Equals(Pickering.Lxi.Piplx.ComparatorEvent)">
            <summary>
            Indicates whether the current Comparator event data is equal to another Comparator event data.
            </summary>
            <param name="other">An Comparator event to compare with this Comparator event.</param>
            <returns>true if the current Comparator event is equal to the other parameter; otherwise, false.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorEvent.GetHashCode">
            <summary>Serves as the default hash function.</summary>
            <returns>A hash code for the current Comparator event.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorEvent.#ctor(System.Int32[])">
            <summary>Constructor creates a Comparator event.</summary>
            <param name="data">RAW Comparator event data.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IComparatorSubunit">
            <summary>Comparator subunit interface.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.CurrentCaptureIndex">
            <summary>Gets current write index. E.g. current count of the events.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.DebounceTime">
            <summary>Gets or sets comparator debounce time in milliseconds.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.Events">
            <summary>All available Comparator events. Can not be obtained if <see cref="P:Pickering.Lxi.Piplx.IComparatorSubunit.IsCaptureEventEnabled"/> is true (e.g. Comparator engine is running).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.IsAppendEventEnabled">
            <summary>
            Gets or sets state for appending events.
            Get: false - disabled, true - enabled.
            Set: false - disable, true - enable.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.IsCaptureEventEnabled">
            <summary>
            Gets or sets capture engine state.
            Get: false - disabled, true - enabled.
            Set: false - disable, true - enable.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.LogicalOperation">
            <summary>Gets or sets logical operation of the virtual channel. <see cref="T:Pickering.Lxi.Piplx.ComparatorLogicalOperations"/></summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.PhysicalFptMask">
            <summary>Gets or sets mask of physical channels generating Front Panel Interrupts (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.PhysicalMask">
            <summary>Gets or sets physical mask of the virtual channel (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.PhysicalState">
            <summary>Gets RAW physical state data (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.PhysicalTriggerMode">
            <summary>Gets or set comparator physical trigger mode. <see cref="T:Pickering.Lxi.Piplx.ComparatorTriggerModes"/></summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.Polarity">
            <summary>Gets or sets comparator polarity. <see cref="T:Pickering.Lxi.Piplx.ComparatorPolarities"/></summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.Range">
            <summary>Gets or set operation range. <see cref="T:Pickering.Lxi.Piplx.ComparatorRanges"/></summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.Threshold">
            <summary>Gets or sets voltage threshold.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.TimeStamp">
            <summary>Get comparator time stamp.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.TimeStampReference">
            <summary>Get comparator time stamp reference.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.VirtualFptMask">
            <summary>Gets or sets mask of virtual channels generating Front Panel Interrupts (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.VirtualMask">
            <summary>Gets or sets virtual mask of the virtual channel (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.VirtualState">
            <summary>Gets RAW virtual state data (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IComparatorSubunit.VirtualTriggerMode">
            <summary>Gets or set comparator virtual trigger mode. <see cref="T:Pickering.Lxi.Piplx.ComparatorTriggerModes"/></summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IComparatorSubunit.ReadAllEvents">
            <summary>Reads all available Comparator events.</summary>
            <returns>List of all available Comparator events.</returns>
            <exception cref="T:System.InvalidOperationException">Throws if capturing events engine is running.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IComparatorSubunit.ReadBulkEvents(System.Int32,System.Int32)">
            <summary>Reads available Comparator events form <see href="startIndex"/> to <see href="stopIndex"/>.</summary>
            <param name="startIndex">Start index to read from DDR3 memory.</param>
            <param name="stopIndex">Stop index to read from DDR3 memory.</param>
            <returns>Available Comparator events form <see href="startIndex"/> to <see href="stopIndex"/>. Zero based.</returns>
            <exception cref="T:System.InvalidOperationException">Throws if capturing events engine is running.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IComparatorSubunit.ReadEvent">
            <summary>Reads Comparator event from DDR3 memory.</summary>
            <returns>Comparator event from DDR3 memory.</returns>
            <exception cref="T:System.InvalidOperationException">Throws if capturing events engine is running.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IComparatorSubunit.ReadEvent(System.Int32)">
            <summary>Reads Comparator event from DDR3 memory.</summary>
            <param name="index">Index of Comparator event in DDR3 memory. Zero based. If <see href="index"/> is -1, returns the last Comparator event.</param>
            <returns>Comparator event from DDR3 memory.</returns>
            <exception cref="T:System.InvalidOperationException">Throws if capturing events engine is running.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IComparatorSubunit.Reset">
            <summary>Reset front panel interrupt pins.</summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IComparatorSubunit.ResetDDR3Memory">
            <summary>Reset DDR3 memory.</summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IComparatorSubunit.ResetTimeStamp">
            <summary>Reset time stamp.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ComparatorSubunit">
            <summary>Comparator subunit class.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.BitsCount">
            <summary>Get the number of bits.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.CurrentCaptureIndex">
            <summary>Gets current write index. Zero based. Eg. current count of the events.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.CurrentReadIndex">
            <summary>Gets or sets read index from DDR3 memory. Zero based.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.DebounceTime">
            <summary>Gets or sets comparator debounce time in milliseconds.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.Events">
            <summary>All available Comparator events. Can not be obtained if <see cref="P:Pickering.Lxi.Piplx.ComparatorSubunit.IsCaptureEventEnabled"/> is true (e.g. Comparator engine is running).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.IsAppendEventEnabled">
            <summary>
            Gets or sets state for appending events.
            Get: false - disabled, true - enabled.
            Set: false - disable, true - enable.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.IsCaptureEventEnabled">
            <summary>
            Gets or sets capture engine state.
            Get: false - disabled, true - enabled.
            Set: false - disable, true - enable.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.LogicalOperation">
            <summary>Gets or sets logical operation of the virtual channel. <see cref="T:Pickering.Lxi.Piplx.ComparatorLogicalOperations"/></summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.PhysicalFptMask">
            <summary>Gets or sets mask of physical channels generating Front Panel Interrupts (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.PhysicalMask">
            <summary>Gets or sets physical mask of the virtual channel (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.PhysicalState">
            <summary>Gets RAW physical state data (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.PhysicalTriggerMode">
            <summary>Gets or set comparator physical trigger mode. <see cref="T:Pickering.Lxi.Piplx.ComparatorTriggerModes"/></summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.Polarity">
            <summary>Gets or sets comparator polarity. <see cref="T:Pickering.Lxi.Piplx.ComparatorPolarities"/></summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.Range">
            <summary>Gets or set operation range. <see cref="T:Pickering.Lxi.Piplx.ComparatorRanges"/></summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.Threshold">
            <summary>Gets or sets voltage threshold.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.TimeStamp">
            <summary>Get comparator time stamp.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.TimeStampReference">
            <summary>Get comparator time stamp reference.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.VirtualFptMask">
            <summary>Gets or sets mask of virtual channels generating Front Panel Interrupts (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.VirtualMask">
            <summary>
            Gets or sets virtual mask of the virtual channel (16bits). Note this is not compatible with first Comparator subunit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.VirtualState">
            <summary>Gets RAW virtual state data (16bits).</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.VirtualTriggerMode">
            <summary>Gets or set comparator virtual trigger mode. <see cref="T:Pickering.Lxi.Piplx.ComparatorTriggerModes"/></summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ClearSubunit">
            <summary>Clears (de-energizes or sets to logic '0') all outputs of a subunit.</summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ReadAllEvents">
            <summary>Reads all available Comparator events.</summary>
            <returns>List of all available Comparator events.</returns>
            <exception cref="T:System.InvalidOperationException">Throws if capturing events engine is running.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ReadBulkEvents(System.Int32,System.Int32)">
            <summary>Reads available Comparator events form startIndex to stopIndex. Zero based.</summary>
            <param name="startIndex">Start index to read from DDR3 memory.</param>
            <param name="stopIndex">Stop index to read from DDR3 memory.</param>
            <returns>Available Comparator events form startIndex to stopIndex. Zero based.</returns>
            <exception cref="T:System.InvalidOperationException">Throws if capturing events engine is running.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ReadEvent">
            <summary>Reads Comparator event from DDR3 memory.</summary>
            <returns>Comparator event from DDR3 memory.</returns>
            <exception cref="T:System.InvalidOperationException">Throws if capturing events engine is running.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ReadEvent(System.Int32)">
            <summary>Reads Comparator event from DDR3 memory.</summary>
            <param name="index">Index of Comparator event in DDR3 memory. Zero based. If index is -1, returns the last Comparator event.</param>
            <returns>Comparator event from DDR3 memory.</returns>
            <exception cref="T:System.InvalidOperationException">Throws if capturing events engine is running.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.Reset">
            <summary>Reset front panel interrupt pins.</summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ResetDDR3Memory">
            <summary>Reset DDR3 memory.</summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ResetTimeStamp">
            <summary>Reset time stamp.</summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ViewBit(System.Int32)">
            <summary>Obtains the state of an individual input.</summary>
            <param name="bitNumber">Bit number.</param>
            <returns>State of input bit.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ViewSubunit">
            <summary>Obtains the current state of all inputs of a sub-unit.</summary>
            <returns>The current state of all inputs of a sub-unit.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.ViewSubunitByBits">
            <summary>Obtains numbers of bits, which are selected.</summary>
            <returns>Numbers of bits, which are selected.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ComparatorSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>Constructor creates a Comparator subunit.</summary>
            <param name="baseCard">Base pickering card.</param>
            <param name="subunitNumber">Subunit's number.</param>
            <param name="bitsCount">Subunits' number of bits.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.Item(System.Int32)">
            <summary>Reads Comparator event from DDR3 memory.</summary>
            <param name="index">Index of Comparator event in DDR3 memory. If index is -1, returns the last Comparator event.</param>
            <returns>Comparator event from DDR3 memory.</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ComparatorSubunit.Item(System.Int32,System.Int32)">
            <summary>Reads available Comparator events form startIndex to stopIndex.</summary>
            <param name="startIndex">Start index to read from DDR3 memory.</param>
            <param name="stopIndex">Stop index to read from DDR3 memory.</param>
            <returns>Available Comparator events form startIndex to stopIndex.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange">
            <summary>
            <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit"/> current ranges.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange.Auto">
            <summary>
            Automatic range selection.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange.Pm5mA">
            <summary>
            Range from -5mA to 5mA.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange.Pm10mA">
            <summary>
            Range from -10mA to 10mA.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange.Pm20mA">
            <summary>
            Range from -20mA to 20mA.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DigitalAnalogConverterMode">
            <summary>
            <see cref="P:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.Mode"/> operation modes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterMode.Current">
            <summary>
            Current mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterMode.Voltage">
            <summary>
            Voltage mode.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit">
            <summary>
            DigitalAnologConverterSubunit interface.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.Current">
            <summary>
            Gets or sets voltage.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.CurrentRange">
            <summary>
            Gets or sets current range. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange"/> for available ranges.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.IsEnabled">
            <summary>
            Enable or disable a channel.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.Mode">
            <summary>
            Gets or sets mode. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterMode"/> for available modes.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.Voltage">
            <summary>
            Gets or sets voltage.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.VoltageRange">
            <summary>
            Gets or sets voltage range. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for available ranges.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.EnableChannel(System.Boolean)">
            <summary>
            Enable or disable a channel.
            </summary>
            <param name="enable">True to enable, false to disable a channel.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.GetCurrent">
            <summary>
            Gets current value.
            </summary>
            <returns>Current value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.GetCurrentRange">
            <summary>
            Gets range value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange"/> for available ranges.
            </summary>
            <returns>Current range.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.GetMode">
            <summary>
            Gets mode value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterMode"/> for available modes.
            </summary>
            <returns>Mode value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.GetVoltage">
            <summary>
            Gets voltage value.
            </summary>
            <returns>Voltage value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.GetVoltageRange">
            <summary>
            Gets range value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for available ranges.
            </summary>
            <returns>Voltage range.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.IsChannelEnabled">
            <summary>
            Gets channel enable status.
            </summary>
            <returns>Channel enable status.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.SetCurrent(System.Double)">
            <summary>
            Sets current value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange"/> for more information.
            </summary>
            <param name="value">Current value in mA.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.SetCurrentRange(Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange)">
            <summary>
            Sets current value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for more information.
            </summary>
            <param name="value">Voltage value in V.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.SetMode(Pickering.Lxi.Piplx.DigitalAnalogConverterMode)">
            <summary>
            Sets mode. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterMode"/> for available modes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.SetVoltage(System.Double)">
            <summary>
            Sets voltage value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for more information.
            </summary>
            <param name="value">Voltage value in mA.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalAnologConverterSubunit.SetVoltageRange(Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange)">
            <summary>
            Sets voltage range. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for available ranges.
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit">
            <summary>
            DigitalAnologConverterSubunit class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.Current">
            <summary>
            Gets or sets voltage.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.CurrentRange">
            <summary>
            Gets or sets current range. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange"/> for available ranges.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.IsEnabled">
            <summary>
            Enable or disable a channel.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.Mode">
            <summary>
            Gets or sets mode. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterMode"/> for available modes.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.Voltage">
            <summary>
            Gets or sets voltage.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.VoltageRange">
            <summary>
            Gets or sets voltage range. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for available ranges.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.EnableChannel(System.Boolean)">
            <summary>
            Enable or disable a channel.
            </summary>
            <param name="enable">True to enable, false to disable a channel.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.GetCurrent">
            <summary>
            Gets current value.
            </summary>
            <returns>Current value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.GetCurrentRange">
            <summary>
            Gets range value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange"/> for available ranges.
            </summary>
            <returns>Current range.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.GetMode">
            <summary>
            Gets mode value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterMode"/> for available modes.
            </summary>
            <returns>Mode value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.GetVoltage">
            <summary>
            Gets voltage value.
            </summary>
            <returns>Voltage value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.GetVoltageRange">
            <summary>
            Gets range value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for available ranges.
            </summary>
            <returns>Voltage range.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.IsChannelEnabled">
            <summary>
            Gets channel enable status.
            </summary>
            <returns>Channel enable status.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.SetCurrent(System.Double)">
            <summary>
            Sets current value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange"/> for more information.
            </summary>
            <param name="value">Current value in mA.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.SetCurrentRange(Pickering.Lxi.Piplx.DigitalAnalogConverterCurrentRange)">
            <summary>
            Sets current value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for more information.
            </summary>
            <param name="value">Voltage value in V.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.SetMode(Pickering.Lxi.Piplx.DigitalAnalogConverterMode)">
            <summary>
            Sets mode. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterMode"/> for available modes.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.SetVoltage(System.Double)">
            <summary>
            Sets voltage value. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for more information.
            </summary>
            <param name="value">Voltage value in mA.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.SetVoltageRange(Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange)">
            <summary>
            Sets voltage range. See <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange"/> for available ranges.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Creates instance of <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit"/> class.
            </summary>
            <param name="card">Card which owns this subunit.</param>
            <param name="subunitNumber">Subunit number.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange">
            <summary>
            <see cref="T:Pickering.Lxi.Piplx.DigitalAnalogConverterSubunit"/> voltage ranges.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange.Auto">
            <summary>
            Automatic range selection.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange.Pm1V">
            <summary>
            Range from -1V to 1V.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange.Pm2V">
            <summary>
            Range from -2V to 2V.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange.Pm5V">
            <summary>
            Range from -5V to 5V.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange.Pm10V">
            <summary>
            Range from -10V to 10V.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange.Pm20V">
            <summary>
            Range from -20V to 20V.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DigitalAnalogConverterVoltageRange.ZeroTo40V">
            <summary>
            Range from 0V to 40V.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IDigitalInputOutputExtension">
            <summary>
            Interface for DigitalInputOutputExtension, which represents Digital Input/Output card.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.IsDynamicRunning">
            <summary>
            Indicates whether pattern operation is running.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.IsInternalClockEnabled">
            <summary>
            Enable or disable internal clock for pattern mode. 
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.InternalClockFrequency">
            <summary>
            Gets or sets internal clock frequency in hertz. Maximum value can be 400KHz.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.AbortDynamicOperation">
            <summary>
            Stop the Dynamic/OneLoop Operation and reset it to the idle state.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.DownloadPatternFile(System.Int32,System.Int32,System.String)">
            <summary>
            Downloads DIO pattern file.
            </summary>
            <param name="startPosition">Start pattern position.</param>
            <param name="endPosition">End pattern position.</param>
            <param name="fileName">Pattern filename with full path.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.GetAllPortsPattern(System.Int32)">
            <summary>
            Returns patterns for all Ports at a particular pattern address offset.
            </summary>
            <param name="position">Pattern address offset.</param>
            <returns>Patterns for all Ports at a particular pattern address offset.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.GetFifoPosition">
            <summary>
            Returns the number of pattern count (position of the memory).
            </summary>
            <returns>Number of pattern count (position of the memory).</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.GetPatternFileValidationResults">
            <summary>
            Returns results after DIO pattern file validation call <see cref="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.ValidatePatternFile(System.String)"/>.
            If validation was successfull, returns empty string.
            </summary>
            <returns>Results after DIO pattern file validation call <see cref="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.ValidatePatternFile(System.String)"/>.
            If validation was successfull, returns empty string.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.GoToStart">
            <summary>
            Clears any pending transactions and prepares the card to start DIO operation.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.RunDynamic(System.Int32,System.Int32)">
            <summary>
            Starts continuous pattern operation.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.RunOneLoop(System.Int32,System.Int32)">
            <summary>
            Starts one loop pattern operation.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.SetAllPortsPattern(System.Int32,System.Int32[])">
            <summary>
            Sets patterns for all Ports at a particular pattern address offset.
            </summary>
            <param name="position">Pattern address offset.</param>
            <param name="patterns">All ports patterns.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.SoftwareTrigger">
            <summary>
            Generates the software trigger. Single event only.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.UploadPatternFile(System.String)">
            <summary>
            Uploads DIO pattern file.
            </summary>
            <param name="fileName">Pattern filename with full path.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.ValidatePatternFile(System.String)">
            <summary>
            Validates DIO pattern file.
            </summary>
            <param name="fileName">Pattern filename with full path.</param>
            <returns>True if is valid, otherwise false. If return value is false,
            so information about what is wrong can be obtained by <see cref="M:Pickering.Lxi.Piplx.IDigitalInputOutputExtension.GetPatternFileValidationResults"/> function</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DigitalInputOutputExtension">
            <summary>
            PiplxCard extension for Digital Input Output card class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputExtension.IsDynamicRunning">
            <summary>
            Indicates whether pattern operation is running.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputExtension.IsInternalClockEnabled">
            <summary>
            Enable or disable internal clock for pattern mode. 
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputExtension.InternalClockFrequency">
            <summary>
            Gets or sets internal clock frequency in hertz. Maximum value can be 400KHz.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.AbortDynamicOperation">
            <summary>
            Stop the Dynamic/OneLoop Operation and reset it to the idle state.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.DownloadPatternFile(System.Int32,System.Int32,System.String)">
            <summary>
            Downloads DIO pattern file.
            </summary>
            <param name="startPosition">Start pattern position.</param>
            <param name="endPosition">End pattern position.</param>
            <param name="fileName">Pattern filename with full path.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.GetAllPortsPattern(System.Int32)">
            <summary>
            Returns patterns for all Ports at a particular pattern address offset.
            </summary>
            <param name="position">Pattern address offset.</param>
            <returns>Patterns for all Ports at a particular pattern address offset.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.GetFifoPosition">
            <summary>
            Returns the number of pattern count (position of the memory).
            </summary>
            <returns>Number of pattern count (position of the memory).</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.GetPatternFileValidationResults">
            <summary>
            Returns results after DIO pattern file validation call <see cref="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.ValidatePatternFile(System.String)"/>.
            If validation was successfull, returns empty string.
            </summary>
            <returns>Results after DIO pattern file validation call <see cref="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.ValidatePatternFile(System.String)"/>.
            If validation was successfull, returns empty string.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.GoToStart">
            <summary>
            Clears any pending transactions and prepares the card to start DIO operation.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.RunDynamic(System.Int32,System.Int32)">
            <summary>
            Starts continuous pattern operation.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.RunOneLoop(System.Int32,System.Int32)">
            <summary>
            Starts one loop pattern operation.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.SetAllPortsPattern(System.Int32,System.Int32[])">
            <summary>
            Sets patterns for all Ports at a particular pattern address offset.
            </summary>
            <param name="position">Pattern address offset.</param>
            <param name="patterns">All ports patterns.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.SoftwareTrigger">
            <summary>
            Generates the software trigger. Single event only.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.UploadPatternFile(System.String)">
            <summary>
            Uploads DIO pattern file.
            </summary>
            <param name="fileName">Pattern filename with full path.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.ValidatePatternFile(System.String)">
            <summary>
            Validates DIO pattern file.
            </summary>
            <param name="fileName">Pattern filename with full path.</param>
            <returns>True if is valid, otherwise false. If return value is false,
            so information about what is wrong can be obtained by <see cref="M:Pickering.Lxi.Piplx.DigitalInputOutputExtension.GetPatternFileValidationResults"/> function</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IDigitalInputOutputChannel">
            <summary>
            DigitalInputOutputChannel class interface.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputChannel.Direction">
            <summary>
            Gets or sets channel direction. False for output or True for input.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputChannel.Number">
            <summary>
            Gets channel number. Zero based.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputChannel.State">
            <summary>
            Gets or sets channel state.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DigitalInputOutputChannel">
            <summary>
            Channel class for 
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputChannel.Direction">
            <summary>
            Gets or sets channel direction. False for output or True for input.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputChannel.Number">
            <summary>
            Gets channel number. Unity based.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputChannel.State">
            <summary>
            Gets or sets channel state.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputChannel.Subunit">
            <summary>
            Gets subunit to which channel belongs.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputChannel.#ctor(Pickering.Lxi.Piplx.IDigitalInputOutputSubunit,System.Int32)">
            <summary>
            Creates instance of DigitalInputOutputChannel class. Default constructor.
            </summary>
            <param name="subunit">Subunit to which channel belongs.</param>
            <param name="number">Channel number. Zero based.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit">
            <summary>
            DigitalInputOutputSubunit class interface.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.Channels">
            <summary>
            Gets port channels.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.ClockPinMode">
            <summary>
            Gets or sets clock pin mode for pattern mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.Direction">
            <summary>
            Gets or sets port direction.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.IsEnabled">
            <summary>
            Gets if port is enabled.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.PatternCount">
            <summary>
            Gets count of the pattern operation.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.PatternMode">
            <summary>
            Gets or sets pattern mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.State">
            <summary>
            Gets input/output port channels state if mixed. Otherwise input state if whole port is as input and output
            channels state if whole port is as output. Or sets the output channels state.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.ClearSubunit">
            <summary>
            Clears the subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.GetPattern(System.Int32)">
            <summary>
            Returns pattern from specified position.
            </summary>
            <param name="position">Pattern value.</param>
            <returns>Pattern from specified position.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.GetState">
            <summary>
            Returns port input and/or output states.
            </summary>
            <returns>Port states.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.ReEnable">
            <summary>
            Re-enables the DIO port (subunit).
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.SetDirection(System.Boolean[])">
            <summary>
            Sets port direction.
            </summary>
            <param name="channelsDirection">Individual channels direction.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.SetPattern(System.Int32,System.Byte)">
            <summary>
            Sets paterrn on specified position.
            </summary>
            <param name="position">Pattern position.</param>
            <param name="data">Pattern value.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalInputOutputSubunit.SetState(System.Boolean[])">
            <summary>
            Sets port state.
            </summary>
            <param name="channelStates">Individual channels states.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DigitalInputOutputSubunit">
            <summary>
            DigitalInputOutputSubunit class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.Channels">
            <summary>
            Gets port channels.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.ClockPinDirection">
            <summary>
            Gets or sets external clock pin direction. False for output or True for input.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.ClockPinMode">
            <summary>
            Gets or sets clock pin mode for pattern mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.ClockPinState">
            <summary>
            Gets or sets external clock pin state.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.Direction">
            <summary>
            Gets or sets port direction.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.IsEnabled">
            <summary>
            Gets if port is enabled.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.PatternCount">
            <summary>
            Gets count of the pattern operation.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.PatternMode">
            <summary>
            Gets or sets pattern mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.State">
            <summary>
            Gets input/output port channels state if mixed. Otherwise input state if whole port is as input and output
            channels state if whole port is as output. Or sets the output channels state.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.ClearSubunit">
            <summary>
            Sets the subunit to it's default state.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.GetPattern(System.Int32)">
            <summary>
            Returns pattern from specified position.
            </summary>
            <param name="position">Pattern value.</param>
            <returns>Pattern from specified position.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.GetState">
            <summary>
            Returns port input and/or output states.
            </summary>
            <returns>Port states.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.ReEnable">
            <summary>
            Re-enables the DIO port (subunit).
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.SetDirection(System.Int32)">
            <summary>
            Sets port direction.
            </summary>
            <param name="direction">Port direction pattern.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.SetDirection(System.Boolean[])">
            <summary>
            Sets port direction.
            </summary>
            <param name="channelsDirection">Individual channels direction.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.SetPattern(System.Int32,System.Byte)">
            <summary>
            Sets paterrn on specified position.
            </summary>
            <param name="position">Pattern position.</param>
            <param name="pattern">Pattern value.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.SetState(System.Int32)">
            <summary>
            Sets port state.
            </summary>
            <param name="state">Port state value.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.SetState(System.Boolean[])">
            <summary>
            Sets port state.
            </summary>
            <param name="channelsState">Individual channels states.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Creates instance of DigitalInputOutputSubunit class. Default constructor.
            </summary>
            <param name="baseCard">Card to whitch this subunit belongs.</param>
            <param name="subunitNumber">Subunit number.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalInputOutputSubunit.Item(System.Int32)">
            <summary>
            Get or sets output channel state or gets input channel state.
            </summary>
            <param name="channel">Channel number. Unity based.</param>
            <returns>Channel state.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DigitalSubunit">
            <summary>
            Class representing Digital I/O subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the DigitalSubunit class, which represents the physical 
            subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalSubunit.ThresholdVoltage">
            <summary>
            Sets/Gets DOUBLE value for programmable threshold voltage.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalSubunit.ThresholdVoltages">
            <summary>
            Sets/Gets array of DOUBLE value for programmable threshold voltage.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DigitalSubunit.ThresholdVoltagesCount">
            <summary>
            Gets array size of DOUBLE value for programmable threshold voltage.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalSubunit.GetThresholdVoltage">
            <summary>
            Gets DOUBLE value for programmable threshold voltage.
            </summary>
            <returns>Value for programmable threshold voltage.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalSubunit.GetThresholdVoltages">
            <summary>
            Gets array of DOUBLE value for programmable threshold voltages.
            </summary>
            <returns>Values for programmable threshold voltages.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalSubunit.GetThresholdVoltagesCount">
            <summary>
            Gets array size of DOUBLE value for programmable threshold voltage.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energize, false to 
            de-energize.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalSubunit.SetThresholdVoltage(System.Double)">
            <summary>
            Sets DOUBLE value for programmable threshold voltage.
            </summary>
            <param name="voltage">Threshold voltage.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DigitalSubunit.SetThresholdVoltages(System.Double[])">
            <summary>
            Sets array of DOUBLE value for programmable threshold voltages.
            </summary>
            <param name="voltages">Threshold voltages.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DisplacementModuleMode">
            <summary>
            Displacement module input modes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire">
            <summary>
            5 or 6 wires mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire">
            <summary>
            4 wires mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Resolver">
            <summary>
            Resolver mode.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DisplacementModuleOutputGain">
            <summary>
            Displacement module output multiplier.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DisplacementModuleOutputGain.X1">
            <summary>
            1x output multiplier.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.DisplacementModuleOutputGain.X2">
            <summary>
            2x output multiplier.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IDisplacementModuleSubunit">
            <summary>
            Displacement module subunit interface.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.AutoInputGain">
            <summary>
            Sets or gets input gain. Range 0-100, default is 100.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelDelayA">
            <summary>
            Sets or gets output A delay. Range 0-6499.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelDelayB">
            <summary>
            Sets or gets output B delay. Range 0-6499.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelInputFrequency">
            <summary>
            Sets or gets input frequency. Range 300-20000Hz
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelInputFrequencyHiRes">
            <summary>
            Sets or gets input frequency in Hz.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelInputLevel">
            <summary>
            Sets or gets input level. Range 0-65520.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelLosStatus">
            <summary>
            Gets LOS treshold status.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelLosTreshold">
            <summary>
            Sets or gets LOS treshold. Range 0-32768. Default is 32768.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelMode">
            <summary>
            Sets or gets displacement module input mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelNullOffset">
            <summary>
            Sets or gets null offset. Range 0-100. Default is 100.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelOutputGain">
            <summary>
            Sets or gets output multiplier <see cref="T:Pickering.Lxi.Piplx.DisplacementModuleOutputGain"/>. Calibration only.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelOutputLevel">
            <summary>
            Sets or gets output level. Range 0-4096.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelPercentPosition">
            <summary>
            Sets or gets -100.00% - 100.00% value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelPercentPositionB">
            <summary>
            Sets or gets -100.00% - 100.00% value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelPosition">
            <summary>
            Sets or gets position value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            Range 0-32767.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelPositionB">
            <summary>
            Sets or gets position value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>. Range 0-32767.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelVoltageDiff">
            <summary>
            Sets or gets Vdiff value. Range is +/- <see cref="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelVoltageSum"/>.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelVoltageSum">
            <summary>
            Sets or gets Vsum value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.DsPicVersion">
            <summary>
            Gets dsPIC firmware version in xx.yy.zz format.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.IsChannelInvertedA">
            <summary>
            Sets or gets invertion of output A.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.IsChannelInvertedB">
            <summary>
            Sets or gets invertion of output B.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.IsNoWait">
            <summary>
            Sets or gets no wait mode status. Applicable to 4 wire mode, Sets ChannelA and ChannelB instantaneously.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ManualInputAtten">
            <summary>
            Sets or gets Pot value on LVDT. Range 0-255.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.MinInputVoltage">
            <summary>
            Gets minimum input voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.MaxInputVoltage">
            <summary>
            Gets maximum input voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.MinOutputVoltage">
            <summary>
            Gets minimum output voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.MaxOutputVoltage">
            <summary>
            Gets maximum output voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.PhaseDelayA">
            <summary>
            Sets or gets DOUBLE value for DOUBLE in degrees for OutA.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.PhaseDelayB">
            <summary>
            Sets or gets DOUBLE value for DOUBLE in degrees for OutB.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.PhaseTracking">
            <summary>
            Sets phase tracking. Calibration only.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.RampResponse">
            <summary>
            Sets or gets RAMP response delay in seconds up to 1677 seconds.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SampleBufferSize">
            <summary>
            Sets or gets sample buffer size. Range 0-500. Default is 500.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SampleLoad">
            <summary>
            Sets comprises of top 16 bits is GAIN (0-100) and lower 16 bits is frequency (300-20000 Hz).
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of a sub-unit.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetAutoInputGain">
            <summary>
            Returns input gain.
            </summary>
            <returns>Input gain.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetDsPicVersion">
            <summary>
            Gets dsPIC firmware version in xx.yy.zz format.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelDelayA">
            <summary>
            Returns output A delay.
            </summary>
            <returns>Output A delay.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelDelayB">
            <summary>
            Returns output B delay.
            </summary>
            <returns>Output B delay.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelInputFrequency">
            <summary>
            Returns input frequency.
            </summary>
            <returns>Input frequency.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelInputFrequencyHiRes">
            <summary>
            Returns input frequency in Hz.
            LVDT Mk2.
            </summary>
            <returns>Input frequency in Hz.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelInputLevel">
            <summary>
            Returns input level.
            </summary>
            <returns>Input level.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelInvertedA">
            <summary>
            Returns invertion of output A.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelInvertedB">
            <summary>
            Returns invertion of output B.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelLosStatus">
            <summary>
            Returns LOS treshold status.
            LVDT Mk2.
            </summary>
            <returns>LOS treshold status.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelLosTreshold">
            <summary>
            Returns LOS treshold.
            </summary>
            <returns>LOS treshold.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelMode">
            <summary>
            Returns displacement module input mode.
            </summary>
            <returns>Displacement module input mode.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelNullOffset">
            <summary>
            Returns null offset.
            </summary>
            <returns>Null offset.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelOutputLevel">
            <summary>
            Returns output level.
            </summary>
            <returns>Output level.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelPercentPosition">
            <summary>
            Returns channel position percentage value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            </summary>
            <returns>Channel position percentage value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelPercentPositionB">
            <summary>
            Returns channel position percentage value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelPosition">
            <summary>
            Returns position value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            </summary>
            <returns>Position value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelPositionB">
            <summary>
            Returns position value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>. Range 0-32767.
            </summary>
            <returns>Position value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelVoltageDiff">
            <summary>
            Returns channel Vdiff value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetChannelVoltageSum">
            <summary>
            Return channel Vsum value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetManualInputAtten">
            <summary>
            Returns Pot value on LVDT.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetMinInputVoltage">
            <summary>
            Returns minimum input voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetMaxInputVoltage">
            <summary>
            Returns maximum input voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetMinOutputVoltage">
            <summary>
            Returns minimum output voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetMaxOutputVoltage">
            <summary>
            Returns maximum output voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetRampResponse">
            <summary>
            Gets ramp response delay in seconds.
            </summary>
            <returns>Ramp response delay in seconds.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.GetSampleBufferSize">
            <summary>
            Returns sample buffer size.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetAutoInputGain(System.Int32)">
            <summary>
            Sets channel input gain. Range 0-100, default is 100.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelInputFrequency(System.Int32)">
            <summary>
            Sets channel input frequency. Range 300-20000Hz
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelInputLevel(System.Int32)">
            <summary>
            Sets channel input level. Range 0-65520.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelLosTreshold(System.Int32)">
            <summary>
            Sets LOS treshold. Range 0-32768. Default is 32768.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelMode(Pickering.Lxi.Piplx.DisplacementModuleMode)">
            <summary>
            Sets channel input mode.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelNullOffset(System.Int32)">
            <summary>
            Sets channel null offset. Range 0-100. Default is 100.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelDelayA(System.Int32)">
            <summary>
            Sets channel output A delay. Range 0-6499.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelDelayB(System.Int32)">
            <summary>
            Sets channel output B delay. Range 0-6499.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelOutputGain(Pickering.Lxi.Piplx.DisplacementModuleOutputGain)">
            <summary>
            Sets channel output multiplier <see cref="T:Pickering.Lxi.Piplx.DisplacementModuleOutputGain"/>. Calibration only.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelOutputLevel(System.Int32)">
            <summary>
            Sets channel output level. Range 0-4096.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelPosition(System.Int32)">
            <summary>
            Sets channel position value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            Range 0-32767.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelPositionB(System.Int32)">
            <summary>
            Sets channel position value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>. Range 0-32767.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelPercentPosition(System.Double)">
            <summary>
            Sets -100.00% - 100.00% value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - channel output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - channel output A and B.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelPercentPositionB(System.Double)">
            <summary>
            Sets -100.00% - 100.00% value for channel output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelVoltageDiff(System.Double)">
            <summary>
            Sets channel Vdiff value. Range is +/- <see cref="P:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.ChannelVoltageSum"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelVoltageSum(System.Double)">
            <summary>
            Sets channel Vsum value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelInvertedA(System.Boolean)">
            <summary>
            Sets channel invertion of output A.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetChannelInvertedB(System.Boolean)">
            <summary>
            Sets channel invertion of output B.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetManualInputAtten(System.Int32)">
            <summary>
            Sets Pot value on LVDT. Range 0-255.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetPhaseTracking(System.Boolean)">
            <summary>
            Sets phase tracking. Calibration only.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetRampResponse(System.Double)">
            <summary>
            Sets ramp response delay in seconds up to 1677 seconds.
            </summary>
            <param name="value">Ramp response delay in seconds up to 1677 seconds.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetSampleBufferSize(System.Int32)">
            <summary>
            Sets sample buffer size. Range 0-500. Default is 500.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetSampleLoad(System.Int32)">
            <summary>
            Sets comprises of top 16 bits is GAIN (0-100) and lower 16 bits is frequency (300-20000 Hz).
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetSampleLoad(System.Int32,System.Int32)">
            <summary>
            Sets comprises GAIN (0-100) and frequency (300-20000 Hz).
            LVDT Mk2.
            </summary>
            <param name="frequency"></param>
            <param name="gain"></param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDisplacementModuleSubunit.SetSampleLoad(System.Int16,System.Int16)">
            <summary>
            Sets comprises GAIN (0-100) and frequency (300-20000 Hz).
            LVDT Mk2.
            </summary>
            <param name="frequency"></param>
            <param name="gain"></param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.DisplacementModuleSubunit">
            <summary>
            Displacement module subunit class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.AutoInputGain">
            <summary>
            Sets or gets input gain. Range 0-100, default is 100.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelInputFrequency">
            <summary>
            Sets or gets input frequency. Range 300-20000Hz
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelInputFrequencyHiRes">
            <summary>
            Sets or gets input frequency in Hz.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelInputLevel">
            <summary>
            Sets or gets input level. Range 0-65520.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelLosStatus">
            <summary>
            Gets LOS treshold status.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelLosTreshold">
            <summary>
            Sets or gets LOS treshold. Range 0-32768. Default is 32768.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelMode">
            <summary>
            Sets or gets displacement module input mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelNullOffset">
            <summary>
            Sets or gets null offset. Range 0-100. Default is 100.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelDelayA">
            <summary>
            Sets or gets output A delay. Range 0-6499.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelDelayB">
            <summary>
            Sets or gets output B delay. Range 0-6499.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelOutputGain">
            <summary>
            Sets output multiplier <see cref="T:Pickering.Lxi.Piplx.DisplacementModuleOutputGain"/>. Calibration only.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelOutputLevel">
            <summary>
            Sets or gets output level. Range 0-4096.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelPosition">
            <summary>
            Sets or gets position value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            Range 0-32767.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelPositionB">
            <summary>
            Sets or gets position value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>. Range 0-32767.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelPercentPosition">
            <summary>
            Sets or gets -100.00% - 100.00% value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelPercentPositionB">
            <summary>
            Sets or gets -100.00% - 100.00% value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelVoltageDiff">
            <summary>
            Sets or gets Vdiff value. Range is +/- <see cref="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelVoltageSum"/>.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelVoltageSum">
            <summary>
            Sets or gets Vsum value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.DsPicVersion">
            <summary>
            Gets dsPIC firmware version in xx.yy.zz format.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.InputVoltage">
            <summary>
            Gets input voltage in volts.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.IsChannelInvertedA">
            <summary>
            Sets or gets invertion of output A.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.IsChannelInvertedB">
            <summary>
            Sets or gets invertion of output B.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.IsNoWait">
            <summary>
            Sets or gets no wait mode status. Applicable to 4 wire mode, Sets ChannelA and ChannelB instantaneously.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ManualInputAtten">
            <summary>
            Sets or gets Pot value on LVDT. Range 0-255.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.MinInputVoltage">
            <summary>
            Gets minimum input voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.MaxInputVoltage">
            <summary>
            Gets maximum input voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.MinOutputVoltage">
            <summary>
            Gets minimum output voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.MaxOutputVoltage">
            <summary>
            Gets maximum output voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.PhaseTracking">
            <summary>
            Sets or gets phase tracking. Calibration only.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.PhaseDelayA">
            <summary>
            Sets or gets DOUBLE value for DOUBLE in degrees for OutA.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.PhaseDelayB">
            <summary>
            Sets or gets DOUBLE value for DOUBLE in degrees for OutB.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.RampResponse">
            <summary>
            Sets or gets RAMP response delay in seconds up to 1677 seconds.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ResolverNumberOfTurns">
            <summary>
            Sets or gets resolver number of turns between 1 to 65535.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ResolverPosition">
            <summary>
            Sets or gets resolver position between -180.00 to 180.00 degrees.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ResolverPosition360">
            <summary>
            Sets or gets resolver position between 0.00 to 360.00 degrees.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ResolverRotate">
            <summary>
            Start or stop resolver rotation. True for start rotation, false for stopping rotation.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ResolverRotateSpeed">
            <summary>
            Sets or gets resolver rotation speed upto 655.35 RPM.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SampleBufferSize">
            <summary>
            Sets or gets sample buffer size. Range 0-500. Default is 500.
            LVDT Mk2.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SampleLoad">
            <summary>
            Sets comprises of top 16 bits is GAIN (0-100) and lower 16 bits is frequency (300-20000 Hz).
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ClearSubunit">
            <summary>
            Reset subunit to default state.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetAutoInputGain">
            <summary>
            Returns input gain (0-100). Default is 100.
            </summary>
            <returns>Input gain.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetDsPicVersion">
            <summary>
            Gets dsPIC firmware version in xx.yy.zz format.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelInputFrequency">
            <summary>
            Returns input frequency in Hz. (300-20000 Hz).
            </summary>
            <returns>Input frequency in Hz.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelInputFrequencyHiRes">
            <summary>
            Returns input frequency in Hz.
            LVDT Mk2.
            </summary>
            <returns>Input frequency in Hz.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelInputLevel">
            <summary>
            Returns input level (0-65520).
            </summary>
            <returns>Input level.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelLosStatus">
            <summary>
            Returns LOS treshold status.
            LVDT Mk2.
            </summary>
            <returns>LOS treshold status.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelLosTreshold">
            <summary>
            Returns LOS treshold (0 to 32768). Default is 32768.
            </summary>
            <returns>LOS treshold.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelMode">
            <summary>
            Returns displacement module input mode <see cref="T:Pickering.Lxi.Piplx.DisplacementModuleMode"/>.
            </summary>
            <returns>Displacement module input mode.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelNullOffset">
            <summary>
            Returns null offset. Default is 0.
            </summary>
            <returns>Null offset.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelDelayA">
            <summary>
            Returns output A delay (0-6499).
            </summary>
            <returns>Output A delay.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelDelayB">
            <summary>
            Returns output B delay (0-6499).
            </summary>
            <returns>Output B delay.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelOutputLevel">
            <summary>
            Returns output level (0-4096).
            </summary>
            <returns>Output level.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelPosition">
            <summary>
            Returns position value (0-32767) for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            </summary>
            <returns>Position value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelPositionB">
            <summary>
            Returns position value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>. Range 0-32767.
            </summary>
            <returns>Position value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelPercentPosition">
            <summary>
            Returns channel position percentage value (-100.00% to 100.00%) for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            </summary>
            <returns>Channel position percentage value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelPercentPositionB">
            <summary>
            Returns channel position percentage value (-100.00% to 100.00%) for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>.
            </summary>
            <returns>Channel position percentage value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelVoltageDiff">
            <summary>
            Returns channel Vdiff value in volts. The limit is +/- Vsum.
            </summary>
            <returns>Channel Vdiff value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelVoltageSum">
            <summary>
            Return channel Vsum value in volts.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelInvertedA">
            <summary>
            Returns invertion of output A.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetChannelInvertedB">
            <summary>
            Returns invertion of output B.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetInputVoltage">
            <summary>
            Returns input voltage in volts.
            </summary>
            <returns>Input voltage in volts.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetManualInputAtten">
            <summary>
            Returns Pot value (0-255) on LVDT.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetMinInputVoltage">
            <summary>
            Returns minimum input voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetMaxInputVoltage">
            <summary>
            Returns maximum input voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetMinOutputVoltage">
            <summary>
            Returns minimum output voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetMaxOutputVoltage">
            <summary>
            Returns maximum output voltage.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetPhaseDelayA">
            <summary>
            Sets or gets DOUBLE value for DOUBLE in degrees for OutA.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetPhaseDelayB">
            <summary>
            Sets or gets DOUBLE value for DOUBLE in degrees for OutB.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetRampResponse">
            <summary>
            Gets ramp response delay in seconds.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetResolverNumberOfTurns">
            <summary>
            Return resolver number of turns. Available range is 1 to 65535.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetResolverPosition">
            <summary>
            Returns resolver rotation between -180.00 to 180.00 degrees.
            </summary>
            <returns>Resolver rotation between -180.00 to 180.00 degrees.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetResolverPosition360">
            <summary>
            Returns resolver rotation between -180.00 to 180.00 Degrees.
            </summary>
            <returns>Resolver rotation between 0 to 360 degrees.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetResolverRotate">
            <summary>
            Returns resolver rotation state. True for rotation, false for no rotation.
            </summary>
            <returns>Resolver rotation state.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetResolverRotateSpeed">
            <summary>
            Return resoler rotation speed. Rotation speed up to 655.35 RPM.
            </summary>
            <returns>Resoler rotation speed. Rotation speed up to 655.35 RPM.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.GetSampleBufferSize">
            <summary>
            Returns sample buffer size (1 to 500). Default is 500.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetAutoInputGain(System.Int32)">
            <summary>
            Sets channel input gain. Range 0-100, default is 100.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelInputFrequency(System.Int32)">
            <summary>
            Sets channel input frequency. Range 300-20000Hz
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelInputLevel(System.Int32)">
            <summary>
            Sets channel input level. Range 0-65520.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelLosTreshold(System.Int32)">
            <summary>
            Sets LOS treshold. Range 0-32768. Default is 32768.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelMode(Pickering.Lxi.Piplx.DisplacementModuleMode)">
            <summary>
            Sets channel input mode.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelNullOffset(System.Int32)">
            <summary>
            Sets channel null offset. Range 0-100. Default is 100.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelDelayA(System.Int32)">
            <summary>
            Sets channel output A delay. Range 0-6499.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelDelayB(System.Int32)">
            <summary>
            Sets channel output B delay. Range 0-6499.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelOutputGain(Pickering.Lxi.Piplx.DisplacementModuleOutputGain)">
            <summary>
            Sets channel output multiplier <see cref="T:Pickering.Lxi.Piplx.DisplacementModuleOutputGain"/>. Calibration only.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelOutputLevel(System.Int32)">
            <summary>
            Sets channel output level. Range 0-4096.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelPosition(System.Int32)">
            <summary>
            Sets channel position value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - output A and B.
            Range 0-32767.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelPositionB(System.Int32)">
            <summary>
            Sets channel position value for output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>. Range 0-32767.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelPercentPosition(System.Double)">
            <summary>
            Sets -100.00% - 100.00% value for:
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/> - channel output A.
            <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt56Wire"/> - channel output A and B.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelPercentPositionB(System.Double)">
            <summary>
            Sets -100.00% - 100.00% value for channel output B on <see cref="F:Pickering.Lxi.Piplx.DisplacementModuleMode.Lvdt4Wire"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelVoltageDiff(System.Double)">
            <summary>
            Sets channel Vdiff value. Range is +/- <see cref="P:Pickering.Lxi.Piplx.DisplacementModuleSubunit.ChannelVoltageSum"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelVoltageSum(System.Double)">
            <summary>
            Sets channel Vsum value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelInvertedA(System.Boolean)">
            <summary>
            Sets channel invertion of output A.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetChannelInvertedB(System.Boolean)">
            <summary>
            Sets channel invertion of output B.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetManualInputAtten(System.Int32)">
            <summary>
            Sets Pot value on LVDT. Range 0-255.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetPhaseDelayA(System.Double)">
            <summary>
            Sets or gets DOUBLE value for DOUBLE in degrees for OutA.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetPhaseDelayB(System.Double)">
            <summary>
            Sets or gets DOUBLE value for DOUBLE in degrees for OutB.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetPhaseTracking(System.Boolean)">
            <summary>
            Sets phase tracking. Calibration only.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetRampResponse(System.Double)">
            <summary>
            Sets ramp response delay in seconds up to 1677 seconds.
            </summary>
            <param name="value">Ramp response delay in seconds up to 1677 seconds.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetResolverNumberOfTurns(System.Int32)">
            <summary>
            Sets resolver number of turns in range 1 to 65535.
            </summary>
            <param name="value">Number of turns (1 to 65535).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetResolverPosition(System.Double)">
            <summary>
            Sets resolver position between -180.00 to 180.00 degrees.
            </summary>
            <param name="value">Resolver position between -180.00 to 180.00 degrees.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetResolverPosition360(System.Double)">
            <summary>
            Sets resolver position between 0.00 to 360.00 degrees.
            </summary>
            <param name="value">Resolver position between 0.00 to 360.00 degrees.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetResolverRotate(System.Boolean)">
            <summary>
            Starts or stops resolver rotation.
            </summary>
            <param name="value">True to start rotation, false for stopping rotation.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetResolverRotateSpeed(System.Double)">
            <summary>
            Sets resolver rotation speed. Sspeed upto 655.35 RPM.
            </summary>
            <param name="value">Resolver rotation speed. Sspeed upto 655.35 RPM.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetSampleBufferSize(System.Int32)">
            <summary>
            Sets sample buffer size. Range 0-500. Default is 500.
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetSampleLoad(System.Int32)">
            <summary>
            Sets comprises of top 16 bits is GAIN (0-100) and lower 16 bits is frequency (300-20000 Hz).
            LVDT Mk2.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetSampleLoad(System.Int32,System.Int32)">
            <summary>
            Sets comprises GAIN (0-100) and frequency (300-20000 Hz).
            LVDT Mk2.
            </summary>
            <param name="frequency"></param>
            <param name="gain"></param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.DisplacementModuleSubunit.SetSampleLoad(System.Int16,System.Int16)">
            <summary>
            Sets comprises GAIN (0-100) and frequency (300-20000 Hz).
            LVDT Mk2.
            </summary>
            <param name="frequency"></param>
            <param name="gain"></param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.EnumExtensions">
            <summary>
            Extensions for enum.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.EnumExtensions.HasFlag(System.Enum,System.Enum)">
            <summary>
            A FX 2.0 way to mimic the FX4 "HasFlag" method.
            </summary>
            <param name="variable">The tested enum.</param>
            <param name="value">The value to test.</param>
            <returns>True if the flag is set. Otherwise false.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.FaultInsertionRestriction">
            <summary>
            Fault Insertion restrictions, to be used with Set Attribute function
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.FaultInsertionRestriction.Unrestricted">
            <summary>
            Unrestricted mode - FI subunits will work independently.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.FaultInsertionRestriction.Restricted">
            <summary>
            Restricted mode - FI subunits will behave as MUX.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.FaultInsertionSubunit">
            <summary>
            Class representing Uncommitted switch subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.FaultInsertionSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the SwitchSubunit class, which represents the 
            physical subunit on the specified card.
            </summary>
            <param name="baseCard">Base card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.FaultInsertionSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.FaultInsertionSubunit.SetRestriction(Pickering.Lxi.Piplx.FaultInsertionRestriction)">
            <summary>
            Set fault insertion card restriction
            </summary>
            <param name="state">Restriction to set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.FaultInsertionSubunit.GetRestriction(Pickering.Lxi.Piplx.FaultInsertionRestriction@)">
            <summary>
            Get current fault insertion card restriction
            </summary>
            <param name="state">Restriction set.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Interop.FunctionId">
            <summary>
            Function IDs for CB - SB communication.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.None">
            <summary>Default enumeration zero value.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.CardId">
            <summary>Function ID for Card ID function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.CardLoc">
            <summary>Function ID for Card Location function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.CardOpsCount">
            <summary>Function ID for Card operations count function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ClearAll">
            <summary>Function ID for Clear All function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ClearCard">
            <summary>Function ID for Clear Card function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ClearMask">
            <summary>Function ID for Clear Mask function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ClearSub">
            <summary>Function ID for Clear Sub-unit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.CloseCards">
            <summary>Function ID for Close All Cards function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.CloseSpecifiedCard">
            <summary>Function ID for Close Specified Card function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ClosureLimit">
            <summary>Function ID for Closure Limit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.Diagnostic">
            <summary>Function ID for Diagnostic function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.EnumerateSubs">
            <summary>Function ID for Enumerate Sub-units function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.MaskBit">
            <summary>Function ID for Mask Bit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.MaskCrossPoint">
            <summary>Function ID for Mask Crosspoint function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.OperateBit">
            <summary>Function ID for Operate Bit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.OperateCrossPoint">
            <summary>Function ID for Operate Crosspoint function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.OpenCards">
            <summary>Function ID for Open All Cards function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.OpenSpecifiedCard">
            <summary>Function ID for Open Specified Card function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ReadBit">
            <summary>Function ID for Read Bit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ReadCalibration">
            <summary>Function ID for Read Calibration Value function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ReadSub">
            <summary>Function ID for Read Sub-unit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.SetMode">
            <summary>Function ID for Set Mode function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.SettleTime">
            <summary>Function ID for Settle Time function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.Status">
            <summary>Function ID for Card Status function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.SubInfo">
            <summary>Function ID for Sub-unit Information function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.SubStatus">
            <summary>Function ID for Sub-unit Status function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.SubType">
            <summary>Function ID for Sub-unit Type function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.Version">
            <summary>Function ID for Version function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ViewBit">
            <summary>Function ID for View Bit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ViewCrossPoint">
            <summary>Function ID for View Crosspoint function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ViewMask">
            <summary>Function ID for View Mask function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ViewMaskBit">
            <summary>Function ID for View Mask Bit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ViewMaskCrossPoint">
            <summary>Function ID for View Mask Crosspoint function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ViewSub">
            <summary>Function ID for View Sub-unit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.WriteCalibration">
            <summary>Function ID for Write Calibration Value function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.WriteMask">
            <summary>Function ID for Write Mask function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.WriteSub">
            <summary>Function ID for Write Sub-unit function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.AttenuatorType">
            <summary>Function ID for Attenuator type function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.AttenuatorInfo">
            <summary>Function ID for Attenuator information function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.AttenuatorSetAttenuation">
            <summary>Function ID for Set attenuation function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.AttenuatorGetAttenuation">
            <summary>Function ID for Get attenuation function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.AttenuatorPadValue">
            <summary>Function ID for Attenuator pad value function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.PowerSupplyType">
            <summary>Function ID for Power Supply - Type function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.PowerSupplyInfo">
            <summary>Function ID for Power Supply - Information function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.PowerSupplySetVoltage">
            <summary>Function ID for Power Supply - Set Voltage function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.PowerSupplyGetVoltage">
            <summary>Function ID for Power Supply - Get Voltage function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.PowerSupplyEnable">
            <summary>Function ID for Power Supply - enable/disable output function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.SubAttribute">
            <summary>Function ID for Sub-unit Attribute function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.OperateSwitch">
            <summary>Function ID for Operate switch function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.CountFreeCards">
            <summary>Function ID for Count Free Cards function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.FindFreeCards">
            <summary>Function ID for Find Free Cards function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.OpenCardsForRead">
            <summary>Function ID for Open all cards only for read function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.OpenSpecifiedCardForRead">
            <summary>Function ID for Open specified card only for read function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.WriteFloatingPointCalibration">
            <summary>Function ID for Write Floating-point Calibration Value function.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ReadFloatingPointCalibration">
            <summary>Function ID for function Read Floating-point Calibration Value.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.WriteCalibrationDate">
            <summary>Function ID for function Write Calibration Date.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ReadCalibrationDate">
            <summary>Function ID for function Read Calibration Date.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.SetResistance">
            <summary>Function ID for function Set Resistance Value.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.GetResistance">
            <summary>Function ID for function Get Resistance Value.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.SetCalibrationPoint">
            <summary>Function ID for function Set Calibration Point.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.ResistorInfo">
            <summary>Function ID for function Resistor Info.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BirstCapabilities">
            <summary>Function ID for function BirstCapabilities.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BirstInfo">
            <summary>Function ID for function BirstInfo.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BirstSetControls">
            <summary>Function ID for function BirstSetControls.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BirstGetControls">
            <summary>Function ID for function BirstGetControls.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BirstMeasurement">
            <summary>Function ID for function BirstMeasurement.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BirstWriteCal">
            <summary>Function ID for function BirstWriteCal.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BirstReadCal">
            <summary>Function ID for function BirstReadCal.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BirstWriteCalDate">
            <summary>Function ID for function BirstWriteCalDate.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BirstReadCalDate">
            <summary>Function ID for function BirstReadCalDate.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BattSetVoltage">
            <summary>Function ID for function BattSetVoltage.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BattGetVoltage">
            <summary>Function ID for function BattGetVoltage.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BattSetCurrent">
            <summary>Function ID for function BattSetCurrent.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BattGetCurrent">
            <summary>Function ID for function BattGetCurrent.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BattSetEnable">
            <summary>Function ID for function BattSetEnable.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BattGetEnable">
            <summary>Function ID for function BattGetEnable.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.BattReadInterlockState">
            <summary>Function ID for function BattReadInterlockState.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.GetJsonErrorData">
            <summary></summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.GetCardTemperature">
            <summary></summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.DioCheckPortDisabled">
            <summary>Check whether a PORT on the DIO card is disabled due to overcurrent scenario.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.DioGetChannelDirection">
            <summary>Get the direction of a Channel.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.DioGetPortDirection">
            <summary>Get the direction of a Port.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.DioPortReEnable">
            <summary>Re-enable a PORT on the DIO card, which was disabled due to overcurrent scenario.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.DioSetChannelDirection">
            <summary>Set the direction of a Channel.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.FunctionId.DioSetPortDirection">
            <summary>Set the direction of a Port.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Interop.NativeMethods">
            <summary>
            Class NativeMethods is for raw access to C/C++ dll library. It is only 
            PInvoke code.
            </summary>
            <remarks>
            Please don't use this, it is only code for creating .NET classes.
            </remarks>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Interop.NativeMethods.MAXIMUM_DIAG_LENGTH">
            <summary>
            Length of character string.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectErrorMessage(System.Int32,System.Text.StringBuilder)">
            <summary>
            Obtains the get a string description of an error code.
            </summary>
            <param name="errorCode">Error code.</param>
            <param name="errorMessage">Appropriate error message.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOpenCards">
            <summary>
            Locates and opens all installed Pickering cards. Once cards have 
            been opened, other functions may then be used to access cards 
            numbered 1 thru the value returned.
            <para>If cards have already been opened by the calling program, 
            they are first closed - as though by 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectCloseCards"/>
            - and then re-opened.</para>
            <para>If cards are currently opened by some other program they 
            cannot be accessed and the function returns zero.</para>
            </summary>
            <remarks>
            When multiple Pickering cards are installed, the assignment of card
            numbers depends upon their relative physical locations in the 
            system (or more accurately, on the order in which they are detected
            by the computer's operating system at boot time).
            </remarks>
            <returns>The number of Pickering cards located and opened.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOpenSpecifiedCard(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Opens the specified Pickering card, clearing all of its outputs. 
            Once a card has been opened, other driver functions may then be 
            used to access it.
            <para>If the card is currently opened by some other program it 
            cannot be accessed and the function returns an error.</para>
            </summary>
            <remarks>
            The logical Bus and Slot values corresponding to a particular card 
            are determined by system topology; values for cards that are 
            operable by the Pilpxi kernel driver can be discovered using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectFindFreeCards(System.Int32,System.Int32[]@,System.Int32[]@)"/>.
            </remarks>
            <param name="bus">The card's logical bus location.</param>
            <param name="slot">The card's logical slot location.</param>
            <param name="cardNumber">The card's logical card number is returned
            by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectCloseCards">
            <summary>
            Closes all open Pickering cards, which must have been opened using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOpenCards"/>. 
            This function should be called when the application program has 
            finished using them.
            </summary>		
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectCloseSpecifiedCard(System.Int32)">
            <summary>
            Closes the specified Pickering card, which must have been opened 
            using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOpenSpecifiedCard(System.Int32,System.Int32,System.Int32@)"/>. 
            This function should be called when the application program has 
            finished using the card.
            </summary>
            <param name="cardNumber">Card number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectCardId(System.Int32,System.Text.StringBuilder)">
            <summary>
            Obtains the identification string of the specified card.
            The string contains these elements: &lt;type code&gt;,
            &lt;serial number&gt;,&lt;revision code&gt;.
            <para>The &lt;revision code&gt; value represents the 
            hardware version of the unit - cards have no firmware 
            on-board.</para>
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="id">Character string to receive the result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectCardLocation(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Obtains the location of the specified card in terms of the logical 
            PCI bus and slot number in which it is located.
            <para>These values can be cross-referenced to physical 
            slot locations in a particular system.</para>
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="bus">Bus location.</param>
            <param name="slot">Slot location.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectClosureLimit(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Obtains the maximum number of switches that may be 
            activated simultaneously in the specified sub-unit. A 
            single-channel multiplexer (MUX type) allows only one 
            channel to be closed at any time. In some other models 
            such as high-density matrix types a limit is imposed to 
            prevent overheating; although it is possible to disable 
            the limit for these types (see 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSetMode(Pickering.Lxi.Piplx.Modes)"/>)
            , doing so is not recommended.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="limit">Limit is returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectCountFreeCards(System.Int32@)">
            <summary>
            Obtains the number of installed cards that are operable 
            by the Piplx driver but are not currently opened by it.
            </summary>
            <param name="numberCards">Number of free cards returned by 
            reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectDiagnostic(System.Int32,System.Text.StringBuilder)">
            <summary>
            Obtains the diagnostic string of the specified card, 
            giving expanded information on any fault conditons 
            indicated by the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxCardInfo.Status"/>
            value.
            </summary>
            <remarks>
            The result string may include embedded newline 
            characters, coded as the ASCII &lt;linefeed&gt; character
            ('\x0A').
            <para>The length of the result string will not exceed the
            value of the driver constant MaximumDiagnosticLength.</para>
            <para>
            <para><b>Warning</b></para>
            Formatting and content of the diagnostic string may 
            change as enhanced diagnostic features are made 
            available. It should therefore not be interpreted 
            programatically.</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="diagnose">Diagnostig string.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectEnumerateSubs(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Obtains the numbers of input and output sub-units 
            implemented on the specified card.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="inputSubunits">Received number of input sub-units.
            </param>
            <param name="outputSubunits">Received number of output sub-units.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectFindFreeCards(System.Int32,System.Int32[]@,System.Int32[]@)">
            <summary>
            Obtains the logical bus and slot locations of installed 
            cards that are operable by the Piplx driver and are 
            currently unopened. These values are used with 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOpenSpecifiedCard(System.Int32,System.Int32,System.Int32@)"/>.
            </summary>
            <remarks>
            <para>The bus and slot locations of the first card found 
            are placed respectively in the least significant elements 
            of the BusList and SlotList arrays. Successive elements 
            contain the values for further cards.</para>
            <para>If the value given for numberCards is less than the 
            number of cards currently accessible, information is 
            obtained only for the number of cards specified.</para>
            <para><b>Warning</b></para>
            The arrays pointed to must have been assigned at least as
            many elements as the number of cards for which 
            information is being requested or adjacent memory will be 
            overwritten, causing data corruption and/or a program 
            crash. The number of accessible cards can be discovered 
            using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectCountFreeCards(System.Int32@)"/>.
            </remarks>
            <param name="numberOfCards">The number of cards (maximum) for 
            which information is to be obtained.</param>
            <param name="busList">The one-dimensional array (vector) to
            receive cards' bus location values.</param>
            <param name="slotList">The one-dimensional array (vector) to
            receive cards' slot location values.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSettleTime(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Obtains a sub-unit's settling time (the period taken for 
            its switches to stabilise). By default, Piplx driver 
            functions retain control during this period so that 
            switches are guaranteed to have stabilised on completion.
            This mode of operation can be overridden if required - 
            see <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSetMode(Pickering.Lxi.Piplx.Modes)"/>.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="time">Settle time is returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectStatus(System.Int32)">
            <summary>
            Obtains the current status flags for the specified card.
            </summary>
            <remarks>
            <para><b>Status Bit Definition</b></para>
            <para>Status bits are as follows:</para>
            <list type="bullet">
            <item>0x80000000 - STAT_NO_CARD (no card with specified number)
            </item>
            <item>0x40000000 - STAT_WRONG_DRIVER (card requires newer driver)
            </item>
            <item>0x20000000 - STAT_EEPROM_ERR (card EEPROM fault)</item>
            <item>0x10000000 - STAT_DISABLED (card disabled)</item>
            <item>0x04000000 - STAT_BUSY (card operations not completed)</item>
            <item>0x02000000 - STAT_HW_FAULT (card hardware defect)</item>
            <item>0x01000000 - STAT_PARITY_ERROR (PCIbus parity error)</item>
            <item>0x00080000 - STAT_CARD_INACCESSIBLE (Card cannot be accessed 
            - failed/removed/unpowered)</item>
            <item>0x00040000 - STAT_UNCALIBRATED (one or more sub-units 
            uncalibrated)</item>
            <item>0x00020000 - STAT_CALIBRATION_DUE (one or more sub-units 
            due for calibration)</item>
            <item>0x00000000 - STAT_OK (card functional and stable)</item>
            </list>
            <para>Certain status bits are relevant only for specific 
            classes of sub-unit, or for those having particular 
            characteristics.</para>
            <para>At card level, StatusBusy indicates if any of a 
            card's sub-units have not yet stabilised.</para>
            <para>Diagnostic information on fault conditions 
            indicated in the status value can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectDiagnostic(System.Int32,System.Text.StringBuilder)"/>
            .</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubStatus(System.Int32,System.Int32)"/>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <returns>Status flag.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubAttribute(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Obtains the value of a sub-unit attribute. These values
            facilitate operation using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateSwitch(System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction,System.Boolean@)"/>.
            </summary>
            <remarks>
            <b>AttributeCode values</b>
            <para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>1</td>
            <td>SUB_ATTR_CHANNEL_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical channel (matrix 
            crosspoint)</td>
            </tr>
            <tr>
            <td>2</td>
            <td>SUB_ATTR_X_ISO_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical X-isolator</td>
            </tr>
            <tr>
            <td>3</td>
            <td>SUB_ATTR_Y_ISO_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical Y-isolator</td>
            </tr>
            <tr>
            <td>4</td>
            <td>SUB_ATTR_X_LOOPTHRU_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical X-loopthru</td>
            </tr>
            <tr>
            <td>5</td>
            <td>SUB_ATTR_Y_LOOPTHRU_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical Y-loopthru</td>
            </tr>
            <tr>
            <td>0x100</td>
            <td>SUB_ATTR_NUM_X_SEGMENTS</td>
            <td>Gets number of X-axis segments</td>
            </tr>
            <tr>
            <td>0x101</td>
            <td>SUB_ATTR_X_SEGMENT01_SIZE</td>
            <td>Gets size of X-axis segment 1</td>
            </tr>
            <tr>
            <td>0x102</td>
            <td>SUB_ATTR_X_SEGMENT02_SIZE</td>
            <td>Gets size of X-axis segment 2</td>
            </tr>
            <tr>
            <td>0x103</td>
            <td>SUB_ATTR_X_SEGMENT03_SIZE</td>
            <td>Gets size of X-axis segment 3</td>
            </tr>
            <tr>
            <td>0x104</td>
            <td>SUB_ATTR_X_SEGMENT04_SIZE</td>
            <td>Gets size of X-axis segment 4</td>
            </tr>
            <tr>
            <td>0x105</td>
            <td>SUB_ATTR_X_SEGMENT05_SIZE</td>
            <td>Gets size of X-axis segment 5</td>
            </tr>
            <tr>
            <td>0x106</td>
            <td>SUB_ATTR_X_SEGMENT06_SIZE</td>
            <td>Gets size of X-axis segment 6</td>
            </tr>
            <tr>
            <td>0x107</td>
            <td>SUB_ATTR_X_SEGMENT07_SIZE</td>
            <td>Gets size of X-axis segment 7</td>
            </tr>
            <tr>
            <td>0x108</td>
            <td>SUB_ATTR_X_SEGMENT08_SIZE</td>
            <td>Gets size of X-axis segment 8</td>
            </tr>
            <tr>
            <td>0x109</td>
            <td>SUB_ATTR_X_SEGMENT09_SIZE</td>
            <td>Gets size of X-axis segment 9</td>
            </tr>
            <tr>
            <td>0x10A</td>
            <td>SUB_ATTR_X_SEGMENT10_SIZE</td>
            <td>Gets size of X-axis segment 10</td>
            </tr>
            <tr>
            <td>0x10B</td>
            <td>SUB_ATTR_X_SEGMENT11_SIZE</td>
            <td>Gets size of X-axis segment 11</td>
            </tr>
            <tr>
            <td>0x10C</td>
            <td>SUB_ATTR_X_SEGMENT12_SIZE</td>
            <td>Gets size of X-axis segment 12</td>
            </tr>
            <tr>
            <td>0x200</td>
            <td>SUB_ATTR_NUM_Y_SEGMENTS</td>
            <td>Gets number of Y-axis segments</td>
            </tr>
            <tr>
            <td>0x201</td>
            <td>SUB_ATTR_Y_SEGMENT01_SIZE</td>
            <td>Gets size of y-axis segment 1</td>
            </tr>
            <tr>
            <td>0x202</td>
            <td>SUB_ATTR_Y_SEGMENT02_SIZE</td>
            <td>Gets size of y-axis segment 2</td>
            </tr>
            </table>
            </div>
            </para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Output(true) or input (false) sub-unit 
            function.</param>
            <param name="attributeCode">Attribute code.</param>
            <param name="attributeValue">Attribute values is returned by 
            reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubInfo(System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Obtains a description of a sub-unit, as numeric values.
            </summary>
            <remarks>
            <b>Results</b>
            <para>Sub-unit type codes are:</para>
            <list type="bullet">
            <item>1 - Input</item>
            <item>11 - Switch (uncommitted switch)</item>
            <item>12 - Multiplexer (multiplexer single-channel)</item>
            <item>13 - MultichannelMultiplexer (multiplexer, multi-channel)
            </item>
            <item>14 - Matrix (matrix - LF)</item>
            <item>15 - RadioMatrix (matrix - RF)</item>
            <item>16 - Digital (digital outputs)</item>
            <item>17 - Resistor (programmable resistor)</item>
            <item>18 - Attenuator (programmable RF attenuator)</item>
            <item>19 - PowerSupply (DC power supply)</item>
            </list>
            <para>Row and column values give the dimensions of the 
            sub-unit. For all types other than matrices the column 
            value contains the significant dimension: their row 
            value is always '1'.</para>
            <para><b>Note</b></para>
            Some sub-unit types are supported by functions providing 
            alternate and/or more detailed information. These include:
            <list type="bullet">
            <item>Attenuator - <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectAttenuatorInfo(System.Int32,System.Int32,System.Int32@,System.Single@)"/></item>
            <item>PowerSupply - <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)"/></item>
            </list>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit function: input(false), output 
            (true).</param>
            <param name="typeNumber">Type code is returned by reference.
            </param>
            <param name="rows">Number of rows is returned by reference.</param>
            <param name="columns">Number of columns is returned by reference.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubStatus(System.Int32,System.Int32)">
            <summary>
            Obtains the current status flags for the specified output 
            sub-unit. Status bits associated with significant 
            card-level conditions are also returned.
            </summary>
            <remarks>
            <b>Status Bit Definition</b>
            <para>Status bits are as follows:</para>
            <list type="bullet">
            <item>0x80000000 - STAT_NO_CARD (no card with specified number)
            </item>
            <item>0x40000000 - STAT_WRONG_DRIVER (card requires newer driver)
            </item>
            <item>0x20000000 - STAT_EEPROM_ERR (card EEPROM fault)</item>
            <item>0x10000000 - STAT_DISABLED (card disabled)</item>
            <item>0x08000000 - STAT_NO_SUB (no sub-unit with specified number)
            </item>
            <item>0x04000000 - STAT_BUSY (sub-unit operations not completed)
            </item>
            <item>0x02000000 - STAT_HW_FAULT (card hardware defect)</item>
            <item>0x01000000 - STAT_PARITY_ERROR (PCIbus parity error)</item>
            <item>0x00800000 - STAT_PSU_INHIBITED (power supply output is 
            disabled - by software)</item>
            <item>0x00400000 - STAT_PSU_SHUTDOWN (power supply output is 
            shutdown - due to overload)</item>
            <item>0x00200000 - STAT_PSU_CURRENT_LIMIT (power supply is 
            operating in current-limited mode)</item>
            <item>0x00100000 - STAT_CORRUPTED (sub-unit logical state is 
            corrupted)</item>
            <item>0x00080000 - STAT_CARD_INACCESSIBLE (Card cannot be 
            accessed - failed/removed/unpowered)</item>
            <item>0x00040000 - STAT_UNCALIBRATED (sub-unit is uncalibrated)
            </item>
            <item>0x00020000 - STAT_CALIBRATION_DUE (sub-unit is due for 
            calibration)</item>
            <item>0x00000000 - STAT_OK (sub-unit functional and stable)</item>
            </list>
            <para>Certain status bits are relevant only for particular
            classes of sub-unit.</para>
            <para>Diagnostic information on fault conditions indicated 
            in the status value can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectDiagnostic(System.Int32,System.Text.StringBuilder)"/>
            .</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <returns>
            A value representing the sub-unit's status flags.
            </returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubType(System.Int32,System.Int32,System.Boolean,System.Text.StringBuilder)">
            <summary>
            Obtains a description of a sub-unit, as a text string.
            </summary>
            <remarks>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Type string</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>INPUT(&lt;size&gt;)</td>
            <td>Digital inputs</td>
            </tr>
            <tr>
            <td>SWITCH(&lt;size&gt;)</td>
            <td>Uncommitted switches</td>
            </tr>
            <tr>
            <td>MUX(&lt;size&gt;)</td>
            <td>Multiplexer, single-channel only</td>
            </tr>
            <tr>
            <td>MUXM(&lt;size&gt;)</td>
            <td>Multiplexer, multi-channel</td>
            </tr>
            <tr>
            <td>MATRIX(&lt;columns&gt;X&lt;rows&gt;)</td>
            <td>Matrix, LF</td>
            </tr>
            <tr>
            <td>MATRIXR(&lt;columns&gt;X&lt;rows&gt;)</td>
            <td>SMatrix, RF</td>
            </tr>
            <tr>
            <td>DIGITAL(&lt;size&gt;)</td>
            <td>Digital Outputs</td>
            </tr>
            <tr>
            <td>RES(&lt;number of resistors in chain&gt;)</td>
            <td> Programmable resistor</td>
            </tr>
            <tr>
            <td>ATTEN(&lt;number of pads&gt;)</td>
            <td>Programmable RF attenuator</td>
            </tr>
            <tr>
            <td>PSUDC(0)</td>
            <td>DC Power Supply</td>
            </tr>
            </table>
            </div>
            <para>
            Some sub-unit types are supported by functions providing 
            more detailed information. These include:</para>
            <list type="bullet">
            <item>ATTEN - <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectAttenuatorType(System.Int32,System.Int32,System.Text.StringBuilder)"/></item>
            <item>PSUDC - <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyType(System.Int32,System.Int32,System.Text.StringBuilder)"/></item>
            </list>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit function: input(false), output
            (true).</param>
            <param name="type">Description of the sub-unit.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectVersion">
            <summary>
            Obtains the driver version code.
            </summary>
            <returns>
            The driver version code, multiplied by 100 (i.e. a value 
            of 100 represents version 1.00).
            </returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectClearAll">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of all 
            sub-units of every open Pickering card.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectClearCard(System.Int32)">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of 
            all sub-units of the specified Pickering card.
            </summary>
            <param name="cardNumber">Card number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectClearSub(System.Int32,System.Int32)">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of 
            a sub-unit.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Operate a single output channel or bit.
            <para>Note that in the case of a single-channel 
            multiplexer (MUX type) any existing channel closure will 
            be cleared automatically prior to selecting the new 
            channel.</para>
            <para>Note that 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            allows more straightforward use of row/column 
            co-ordinates with matrix sub-units.</para>
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="action">true to energise, false to de-energise.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewBit(System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual output.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="state">State returned by reference: OFF(false), 
            ON(true).</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewSub(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">One-dimensional array (vector) to receive 
            the result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            <para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            <para><b>Example Code</b></para>
            For clarity, this example omits initialising the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 ints
            supports sub-units having upto 64 switches) */
            int[] data = new int[2]; /* Value specifies the number of array 
            elements */
            
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            
            /* Setup array data to turn on switches 3, 33 and output to the 
            card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... now have switches 3, 4, 33 energised */
            
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... leaving switches 3 and 4 energised */
            </code>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">One-dimensional array (vector) containing the 
            bit-pattern to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectReadBit(System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual input.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="inputSubunit">Input sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="state">State is returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectReadSub(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Obtains the current state of all inputs of a sub-unit.
            </summary>
            <remarks>
            Input sub-units do not exceed SUBUNIT_SIZE bits in size, so an 
            array is not necessary to receive the result.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="inputSubunit">Input sub-unit number.</param>
            <param name="data">Data are returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectClearMask(System.Int32,System.Int32)">
            <summary>
            Clears a sub-unit's switch mask, enabling operation of 
            all outputs by the 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            and 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])"/>
            functions.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectMaskBit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single output bit.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            and 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])"/>
            functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits. Note that 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectMaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            allows more straightforward use of row/column 
            co-ordinates with matrices.</para>
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="action">True - mask, false - unmask.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectMaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single matrix crosspoint.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            and 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])"/>
            functions.
            <para>This facility can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number method
            employed by 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectMaskBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row.</param>
            <param name="column">Crosspoitn column.</param>
            <param name="action">Mask - true, unmask - false.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Operate a single matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number 
            method employed by 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            <para><b>Related Matrix Functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectMaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewMaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)"/>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="action">true to energise, false to de-energise.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateSwitch(System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction,System.Boolean@)">
            <summary>
            This function obtains, and optionally sets, the state of
            a switch. It allows explicit access to the individual 
            switches making up a sub-unit, in types where their 
            operation is normally handled automatically by the 
            driver. The main purpose of this is in implementing fault 
            diagnostic programs for such types; it can also be used 
            where normal automated behaviour does not suit an 
            application.
            </summary>
            <remarks>
            <para><b>Applicable sub-unit types</b></para>
            This function is only usable with matrix sub-units having 
            auto-isolation and/or auto-loopthru features. For further 
            information see: segmented matrix, unsegmented matrix in 
            documentation.
            <para><b>SwitchFunction value</b></para>
            A value indicating the functional group of the switch to 
            be accessed.
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>SW_FUNC_CHANNEL</td>
            <td>A channel (matrix crosspoint) switch</td>
            </tr>
            <tr>
            <td>1</td>
            <td>SW_FUNC_X_ISO</td>
            <td>A matrix X-isolation switch</td>
            </tr>
            <tr>
            <td>2</td>
            <td>SW_FUNC_Y_ISO</td>
            <td>A matrix Y-isolation switch</td>
            </tr>
            <tr>
            <td>3</td>
            <td>SW_FUNC_X_LOOPTHRU</td>
            <td>A matrix X-loopthru switch</td>
            </tr>
            <tr>
            <td>4</td>
            <td>SW_FUNC_Y_LOOPTHRU</td>
            <td>A matrix Y-loopthru switch</td>
            </tr>
            </table>
            </div>
            <para><b>SegmentNumber value</b></para>
            The number of the switch in its functional group 
            (unity-based).
            <para>For channel (crosspoint) switches, the switch 
            number can be either:</para>
            <list type="bullet">
            <item>if SegNum is zero, the global channel number of the
            switch (see output bit number)</item>
            <item>if SegNum is non-zero, the segment-local number of 
            the switch, calculated in a similar way to the above</item>
            </list>
            <para><b>SubSwitch value</b></para>
            The number of the subswitch to operate (unity-based). 
            This parameter caters for a situation in which a logical 
            channel, isolation or loopthru switch is served by more 
            than one physical relay (as for example when 2-pole 
            operation is implemented using independently-driven 
            single-pole relays).
            <para>The numbers of subswitches for each functional 
            group can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubAttribute(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32@)"/>
            .</para>
            <para><b>SwitchAction value</b></para>
            A code indicating the action to be performed.
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>SW_ACT_NONE</td>
            <td>No switch change - just set State result</td>
            </tr>
            <tr>
            <td>1</td>
            <td>SW_ACT_OPEN</td>
            <td>Open switchh</td>
            </tr>
            <tr>
            <td>2</td>
            <td>SW_ACT_CLOSE</td>
            <td>Close switch</td>
            </tr>
            </table>
            </div>
            <para><b>Loopthru switches</b></para>
            Loopthru switches are initialised by the driver to a 
            <b>closed</b> state, which may mean that they are either 
            energised or de-energised depending upon their type. In 
            normal automated operation loopthru switches open when 
            any crosspoint on their associated line is closed. 
            Actions SW_ACT_CLOSE and SW_ACT_OPEN close or open 
            loopthru switch contacts as their names imply.
            <para><b>Operational considerations</b></para>
            This function can be used to alter a pre-existing 
            switch state in a sub-unit, set up by fuctions such as 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            or <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])"/>. 
            However once the state of any switch is changed by 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateSwitch(System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction,System.Boolean@)"/> 
            the logical state of the sub-unit is considered to have 
            been destroyed. This condition is flagged in the result 
            of <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubStatus(System.Int32,System.Int32)"/> 
            (bit STAT_CORRUPTED). Subsequent attempts to operate it 
            using 'ordinary' switch functions such as 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewBit(System.Int32,System.Int32,System.Int32,System.Boolean@)"/> 
            etc. will fail (result ER_STATE_CORRUPT). Normal operation 
            can be restored by clearing the sub-unit using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectClearSub(System.Int32,System.Int32)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectClearCard(System.Int32)"/>
            or 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectClearAll"/>.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="switchFunction">Code indicating the functional group 
            of the switch.</param>
            <param name="segmentNumber">The segment location of the switch.
            </param>
            <param name="switchNumber">The number of the switch in its 
            functional group (unity-based).</param>
            <param name="subunitSwitch">The number of the subswitch to 
            operate (unity-based).</param>
            <param name="switchAction">Code indicating the action to be 
            performed.</param>
            <param name="state">The state of the switch (after performing
            any action) is returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number method 
            employed by <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewBit(System.Int32,System.Int32,System.Int32,System.Boolean@)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is replaced
            by one having different dimensions.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="state">State is returned by reference: OFF(false), 
            ON(true).</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewMask(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Obtains the switch mask of a sub-unit. The result fills 
            the number of least significant bits corresponding to the 
            size of the sub-unit.
            </summary>
            <remarks>
            For a Matrix sub-unit, the result is folded into the 
            vector on its row-axis.
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to 
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            <para><b>Example code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">The one-dimensional array (vector) to receive 
            the result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewMaskBit(System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual output's mask.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Output bit number.</param>
            <param name="state">A variable to receive the result (false = 
            unmasked, true = masked).</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewMaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual matrix crosspoint's mask.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number method 
            employed by 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectViewMaskBit(System.Int32,System.Int32,System.Int32,System.Boolean@)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is replaced 
            by one having different dimensions.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="state">A variable to receive the result (false = 
            unmasked, true = masked).</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteMask(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Sets a sub-unit's switch mask to the supplied bit-pattern
            . The number of least significant bits corresponding to 
            the size of the sub-unit are written into the mask. A 
            'true' bit in the mask disables the corresponding switch 
            for the 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])"/> 
            functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            For a Matrix sub-unit, the mask data is folded into the 
            vector on its row-axis.
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to 
            represent the mask pattern for the specified sub-unit, or 
            undefined data will be written to the more significant 
            bits.
            <para><b>Example Code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">The one-dimensional array (vector) containing 
            the mask pattern to be set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectReadCalibration(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads an integer calibration value from on-card EEPROM.
            
            </summary>
            <remarks>
            <para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            <para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            <para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            <para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteCalibration(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="index">Calibration value index number.</param>
            <param name="data">A variable to receive result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteCalibration(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an integer calibration value to on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            <para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            <para>The number of bits actually stored is specific to 
            the target sub-unit - any redundant high-order bits of 
            the supplied Data value are ignored.</para>
            <para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            <para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectReadCalibration(System.Int32,System.Int32,System.Int32,System.Int32@)"/>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="index">Calibration value index number.</param>
            <param name="data">The value to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectAttenuatorGetAttenuation(System.Int32,System.Int32,System.Single@)">
            <summary>
            Obtains the current attenuation setting.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="attenuation">The variable to receive the attenuation 
            value, in dB.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectAttenuatorInfo(System.Int32,System.Int32,System.Int32@,System.Single@)">
            <summary>
            Obtains a description of an attenuator sub-unit, as numeric values.
            </summary>
            <remarks>
            The description obtained by this function is a logical 
            one; a physical description indicating the number of 
            discrete pads in the attenuator can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubInfo(System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Int32@)"/>.
            <para><b>Result</b></para>
            RF attenuator sub-unit type code is:
            <list type="bullet">
            <item>8 - TYPE_ATTEN (programmable RF attenuator)</item>
            </list>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="numberOfSteps">The variable to receive step count.</param>
            <param name="stepSize">Variable to receive step size, in dB.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectAttenuatorPadValue(System.Int32,System.Int32,System.Int32,System.Single@)">
            <summary>
            Obtains the attenuation value of a numbered pad.
            </summary>
            /// <remarks>
            This function facilitates explicit pad selection using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            or <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])"/>, 
            if the selections made by 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectAttenuatorSetAttenuation(System.Int32,System.Int32,System.Single)"/> 
            are not optimal for the application.
            <para>The number of pads in the sub-unit can be found using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubInfo(System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Int32@)"/>
            .</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="padNumber">Pad number.</param>
            <param name="attenuation">The variable to receive the pad's 
            attenuation value, in dB.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectAttenuatorSetAttenuation(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the attenuation to the specified value.
            </summary>
            <remarks>
            The combination of pads inserted to achieve the desired 
            attenuation level is determined by the driver for best 
            all-round performance. In some models it may be possible 
            to optimise particular aspects of attenuator performance 
            by setting other pad combinations explicitly using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectOperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            or 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteSub(System.Int32,System.Int32,System.Int32[])"/>. 
            The pad value associated with each output channel can be 
            discovered with 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectAttenuatorPadValue(System.Int32,System.Int32,System.Int32,System.Single@)"/>.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="attenuation">The attenuation value to set, in dB. 
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectAttenuatorType(System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>
            Obtains a description of an attenuator sub-unit, as a 
            text string. 
            </summary>
            <remarks>
            <para><b>Result</b></para>
            The format of the result is "ATTEN(&lt;number of 
            steps&gt;,&lt;step size in dB&gt;)".
            <para><b>Note</b></para>
            The description obtained by this function is a logical 
            one; a physical description indicating the number of 
            discrete pads employed in the attenuator can be obtained 
            using <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSubType(System.Int32,System.Int32,System.Boolean,System.Text.StringBuilder)"/>.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="type"> The string to receive the result</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyEnable(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enables or disables a power supply's output.
            </summary>
            <remarks>
            This function is usable only with sub-units having the 
            capability OutputControl - see 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)"/>.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="state">true to enable, false to disable output.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyGetVoltage(System.Int32,System.Int32,System.Double@)">
            <summary>
            Obtains the voltage setting of a power supply sub-unit.
            </summary>
            <remarks>
            The result is the nominal value to which the output has 
            been set, not necessarily the actual voltage being 
            output (which may be affected by device tolerances, 
            current-limit conditions etc.).
            <para>This function is also usable with fixed-voltage 
            supplies, returning the nominal output voltage.</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="voltage">The variable to receive the output setting,
            in Volts.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)">
            <summary>
            Obtains a description of a power supply sub-unit, as 
            numeric values.
            </summary>
            <remarks>
            <para><b>Results</b></para>
            Power supply sub-unit type code is:
            <list type="bullet">
            <item>19 - PowerSupply (DC power supply)</item>
            </list>
            <para>
            Capability flag bit definitions:
            <list type="bullet">
            <item>0x00000010 - CurrentModeSense (can sense 
            if operating in current-limited mode)</item>
            <item>0x00000008 - ProgrammableCurrent (output current 
            is programmable)</item>
            <item>0x00000004 - ProgrammableVoltage (output voltage 
            is programmable)</item>
            <item>0x00000002 - OutputSense (has logic-level 
            sensing of output active state)</item>
            <item>0x00000001 - OutputControl (has output 
            on/off control)</item>
            </list>
            Certain driver functions are only usable with sub-units 
            having appropriate capabilities - examples being: 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyEnable(System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplySetVoltage(System.Int32,System.Int32,System.Double)"/>
            </para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="voltage">Received rated voltage [V].</param>
            <param name="current">Received rated current [mA].</param>
            <param name="precision">The variable to receive precision (in bits,
            meaningful only for programmable supplies.</param>
            <param name="capabilities">The variable to receive capability 
            flags.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplySetVoltage(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the output voltage of a power supply sub-unit to 
            the specified value.
            </summary>
            <remarks>
            The voltage value specified is rounded to the precision 
            of the supply's DAC. The actual voltage setting can be 
            obtained using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyGetVoltage(System.Int32,System.Int32,System.Double@)"/>.
            <para>This function is usable only with sub-units having the 
            capability ProgrammableVoltage - see 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)"/>
            .</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="voltage">The output voltage to set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyType(System.Int32,System.Int32,System.Text.StringBuilder)">
            <summary>
            Obtains a description of a power supply sub-unit, as a 
            text string.
            </summary>
            <remarks>
            <para><b>Result</b></para>
            For a DC power supply the format of the result is 
            "PSUDC(&lt;rated voltage&gt;,&lt;rated current&gt;)".
            <para>More detailed information on power supply 
            characteristics is obtainable in numeric format, using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectPowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)"/>
            .</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="type">The string to receive the result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSetMode(Pickering.Lxi.Piplx.Modes)">
            <summary>
            Allows control flags affecting the driver's global 
            behaviour to be set and read. This function gives access 
            to low-level control features of the Piplx driver and is 
            intended for 'expert' use only - the default driver 
            behaviour should be satisfactory for the great majority 
            of applications.
            </summary>
            <remarks>
            <para><b>Flag Bit Definitions</b></para>
            Flag bits are as follows (see <see cref="T:Pickering.Lxi.Piplx.Modes"/>):
            <list type="bullet">
            <item>Default - standard operating mode</item>
            <item>NoWait - sequencing and settling time delays disabled</item>
            <item>Unlimited - closure limits disabled - 
            see <b>Warning</b> below)</item>
            <item>Reopen - allow re-opening without clearing cards</item>
            <item>IgnoreTest - enable card operation even if selftest fails 
            - see <b>Warning</b> below)</item>
            </list>
            <para><b>Warning - Mode Unlimited:</b></para>
            Use of Unlimited mode to disable the limit on the maximum 
            number of switch closures permitted on high-density cards 
            is <b>not</b> recommended, because it carries the danger 
            of overheating and consequent damage to both the card 
            itself and the system in which it is installed. See 
            Closure Limits.
            <para><b>Warning - Mode IgnoreTest:</b></para> 
            The IgnoreTest feature should be used with 
            <b>extreme caution</b>. If a defective card is forcibly 
            enabled, under some fault conditions a large number of 
            outputs could be energised spuriously, resulting in 
            overheating and consequent damage to both the card itself
            and the system in which it is installed. The intended 
            purpose of this feature is to allow continued operation 
            of a BRIC unit from which a daughtercard has been removed 
            for maintenance. See BRIC Operation.
            </remarks>
            <param name="modeFlags">A new value for driver mode flags.</param>
            <returns>The driver's mode flags prior to executing this function.
            </returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteFloatingPointCalibration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Writes one or more floating-point calibration values into 
            on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as SetResistance(). 
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value of "Store" Parameter</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>CAL_STORE_USER</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>
            <td>1</td>
            <td>CAL_STORE_FACTORY</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outpus sub-unit's logical number.
            </param>
            <param name="store">Value indicating which store to access 
            (see below).</param>
            <param name="offset">The offset in the sub-unit's calibration 
            store at which to start.</param>
            <param name="numberValues">The number of values to be written.
            </param>
            <param name="data">The array containing values to write.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectReadFloatingPointCalibration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[]@)">
            <summary>
            Reads one or more floating-point calibration values from on-card 
            EEPROM.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as SetResistance().
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value of "Store" Parameter</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>CAL_STORE_USER</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>
            <td>1</td>
            <td>CAL_STORE_FACTORY</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outpus sub-unit's logical number.
            </param>
            <param name="store">Value indicating which store to access 
            (see below).
            </param>
            <param name="offset">The offset in the sub-unit's calibration 
            store at which to start.</param>
            <param name="numberValues">The number of values to be written.
            </param>
            <param name="data">The array to receive result.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteCalibrationDate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a sub-unit's calibration date and interval into on-card 
            EEPROM. 
            Date information is obtained from the current system date.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSetResistance(System.Int32,System.Int32,System.Int32,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value of "Store" Parameter</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>CAL_STORE_USER</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>
            <td>1</td>
            <td>CAL_STORE_FACTORY</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outpus sub-unit's logical number.
            </param>
            <param name="store">value indicating which store to access 
            (see below).</param>
            <param name="interval">The desired calibration interval 
            (in days).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectReadCalibrationDate(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Reads a sub-unit's calibration date and interval from on-card 
            EEPROM.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSetResistance(System.Int32,System.Int32,System.Int32,System.Double)"/>
            .
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value of "Store" Parameter</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>CAL_STORE_USER</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>
            <td>1</td>
            <td>CAL_STORE_FACTORY</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outpus sub-unit's logical number.
            </param>
            <param name="store">value indicating which store to access 
            (see below).</param>
            <param name="year">The variable to receive the year of calibration.
            </param>
            <param name="day">The variable to receive the day in the year of 
            calibration.</param>
            <param name="interval">The variable to receive the calibration 
            interval (in days).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSetResistance(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Sets a programmable resistor to the closest available setting to 
            the value specified. This function is only usable with programmable 
            resistor models that support it, such as 40-260-001.
            <para>If the sub-unit permits, the resistance value can be set to:
            </para>
            <list type="bullet">
            <item>zero ohms (nominally), by passing the resistance value 0.0
            </item>
            <item>infinity, by passing the resistance value 
            Double.<see cref="F:System.Double.MaxValue"/>
            or alternatively by using function 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectClearSub(System.Int32,System.Int32)"/>
            </item>
            </list>
            <para>The resistance value actually set can be found using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectGetResistance(System.Int32,System.Int32,System.Double@)"/>
            .</para>
            </summary>
            <remarks>
            <para>Mode value</para>
            <para>A value indicating how the given resistance value is to 
            be applied. 
            Only one mode is currently supported:</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>RES_MODE_SET</td>
            <td>Set resistance to the specified value</td>
            </tr>
            </table>
            </div>
            <para>
            Note</para>
            <para>In programmable resistor models having gapped ranges, 
            resistance values falling within such gaps are not coerced. 
            For example, in a unit supporting settings:
            <list type="bullet">
            <item>zero ohms</item>
            <item>100 - 200 ohms continuously variable</item>
            <item>infinity as Double.<see cref="F:System.Double.MaxValue"/></item>
            </list>
            attempting to set values above zero but below 100 ohms, 
            or above 200 ohms but less than infinity, gives error 
            <see cref="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadResistance"/>.
            </para>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outpus sub-unit's logical number.
            </param>
            <param name="mode">The resistance setting mode (see below).</param>
            <param name="resistance">The resistance value to set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectGetResistance(System.Int32,System.Int32,System.Double@)">
            <summary>
            <para>Obtains the current resistance setting of the specified 
            programmable resistor. This function is only usable with 
            programmable resistor models that support it, such as 40-260-001.
            </para>
            <para>The value obtained for a resistance setting of infinity, 
            if the sub-unit permits this, is 
            Double.<see cref="F:System.Double.MaxValue"/>.</para>
            </summary>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outpus sub-unit's logical number.
            </param>
            <param name="resistance">The variable to receive the result.
            </param>
            <returns>The result.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSetCalibrationPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a sub-unit to a state corresponding to one of its defined 
            calibration points.
            </summary>
            <remarks>
            <para><b>Notes:</b>
            This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used by a 
            calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectSetResistance(System.Int32,System.Int32,System.Int32,System.Double)"/>.
            The number of calibration points supported is specific to the 
            target sub-unit.
            </para>
            <para>
            The idx value used by this function corresponds directly to the 
            offset in the sub-unit's calibration store at which the value is 
            to be stored and retrieved, using 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectWriteFloatingPointCalibration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[])"/>.
            and 
            <see cref="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectReadFloatingPointCalibration(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double[]@)"/>.
            </para>
            <para><b>Warning:</b>
            Selection of a calibration point causes the sub-unit to change 
            state; the resulting state may be outside its normally desired 
            range of operation. On completion of a calibration sequence, 
            SetResistance can be used to normalise the setting.
            </para>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outpus sub-unit's logical number.
            </param>
            <param name="idx">The index number of the calibration point 
            (see below).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Interop.NativeMethods.DirectResistorInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Obtain resistor characteristics
            </summary>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outpus sub-unit's logical number.
            </param>
            <param name="minResistance">Pointer to variable to receive the 
            minimum resistance setting</param>
            <param name="maxResistance">Pointer to variable to receive the 
            maximum resistance setting</param>
            <param name="referenceResistance">Pointer to variable to receive
            the reference resistance value</param>
            <param name="precisionPercentage">Pointer to variable to receive
            percentage precision (+/- percent)</param>
            <param name="precisionDelta">Pointer to variable to receive delta
            precision (+/- ohms)</param>
            <param name="int1">Pointer to variable to receive (currently 
            unused) value</param>
            <param name="internalDelta">Pointer to variable to receive 
            internal precision (+/- ohms)</param>
            <param name="capabilities">Pointer to variable to receive 
            capabilities flags</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.GeneralMatrixSubunit">
            <summary>
            Base abstract class for matrix sub-units.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.GeneralMatrixSubunit.Columns">
            <summary>
            Obtains the number of columns.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.GeneralMatrixSubunit.Rows">
            <summary>
            Obtains the number of rows.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.BitToCrosspoint(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Converts bit number to column and row location.
            </summary>
            <param name="bitNumber">Bit number.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="row">Crosspoint row (Y) location.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.CrosspointToBit(System.Int32,System.Int32)">
            <summary>
            Converts column and row location to bit number.
            </summary>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <returns>Bit number.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.MaskCrosspoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single matrix crosspoint.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.OperateCrosspoint(System.Int32,System.Int32,System.Boolean)"/>
            and 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.WriteSubunit(System.Int32[])"/>
            functions.
            <para>This facility can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            This function supports matrix operation using 
            row/column co-ordinates in place of the linearized 
            bit-number method employed by 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.MaskBit(System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            </remarks>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="action">1 to mask, 0 to unmask.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.OperateCrosspoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Operate a single matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number 
            method employed by 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            <para><b>Related Matrix Functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.ViewCrosspoint(System.Int32,System.Int32)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.MaskCrosspoint(System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.ViewMaskCrosspoint(System.Int32,System.Int32)"/>
            </remarks>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="action">1 to energise, 0 to de-energise.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.OperateSwitch(Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction)">
            <summary>
            This function obtains, and optionally sets, the state of
            a switch. It allows explicit access to the individual 
            switches making up a sub-unit, in types where their 
            operation is normally handled automatically by the 
            driver. The main purpose of this is in implementing fault
            diagnostic programs for such types; it can also be used 
            where normal automated behaviour does not suit an 
            application.
            </summary>
            <remarks>
            <para><b>Applicable sub-unit types</b></para>
            This function is only usable with matrix sub-units having 
            auto-isolation and/or auto-loopthru features. For further 
            information see: segmented matrix, unsegmented matrix in 
            documentation.
            <para><b>SwitchFunction value</b></para>
            A value indicating the functional group of the switch to 
            be accessed.
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>Channel</td>
            <td>A channel (matrix crosspoint) switch</td>
            </tr>
            <tr>
            <td>1</td>
            <td>XIsolation</td>
            <td>A matrix X-isolation switch</td>
            </tr>
            <tr>
            <td>2</td>
            <td>YIsolation</td>
            <td>A matrix Y-isolation switch</td>
            </tr>
            <tr>
            <td>3</td>
            <td>XLoopThru</td>
            <td>A matrix X-loopthru switch</td>
            </tr>
            <tr>
            <td>4</td>
            <td>YLoopThru</td>
            <td>A matrix Y-loopthru switch</td>
            </tr>
            </table>
            </div>
            <para>In <see cref="T:Pickering.Lxi.Piplx.SwitchFunction"/> 
            enumerator class you can find constants listed above.
            </para>
            <para><b>SegmentNumber value</b></para>
            The number of the switch in its functional group 
            (unity-based).
            <para>For channel (crosspoint) switches, the switch 
            number can be either:</para>
            <list type="bullet">
            <item>if SegNum is zero, the global channel number of the 
            switch (see output bit number)</item>
            <item>if SegNum is non-zero, the segment-local number of 
            the switch, calculated in a similar way to the above</item>
            </list>
            <para><b>SubSwitch value</b></para>
            The number of the subswitch to operate (unity-based). 
            This parameter caters for a situation in which a logical 
            channel, isolation or loopthru switch is served by more 
            than one physical relay (as for example when 2-pole 
            operation is implemented using independently-driven 
            single-pole relays).
            <para>The numbers of subswitches for each functional 
            group can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.SubAttribute(Pickering.Lxi.Piplx.SubAttributeCode)"/>.</para>
            <para><b>SwitchAction value</b></para>
            A code indicating the action to be performed.
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>None</td>
            <td>No switch change - just set State result</td>
            </tr>
            <tr>
            <td>1</td>
            <td>Open</td>
            <td>Open switchh</td>
            </tr>
            <tr>
            <td>2</td>
            <td>Close</td>
            <td>Close switch</td>
            </tr>
            </table>
            </div>
            <para>In <see cref="T:Pickering.Lxi.Piplx.SwitchAction"/> 
            enumerator class you can find constants listed above.
            </para>
            <para><b>Loopthru switches</b></para>
            Loopthru switches are initialised by the driver to a 
            <b>closed</b> state, which may mean that they are either 
            energised or de-energised depending upon their type. In 
            normal automated operation loopthru switches open when 
            any crosspoint on their associated line is closed. 
            Actions 
            <see cref="F:Pickering.Lxi.Piplx.SwitchAction.Close"/> and 
            <see cref="F:Pickering.Lxi.Piplx.SwitchAction.Open"/> close or open 
            loopthru switch contacts as their names imply.
            <para><b>Operational considerations</b></para>
            This function can be used to alter a pre-existing 
            switch state in a sub-unit, set up by fuctions such as 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/>
            or <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.WriteSubunit(System.Int32[])"/>. 
            However once the state of any switch is changed by 
            <see cref="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.OperateSwitch(Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction)"/> 
            the logical state of the sub-unit is considered to have 
            been destroyed. This condition is flagged in the result 
            of <see cref="M:Pickering.Lxi.Piplx.Subunit.Status"/> 
            (bit 
            <see cref="F:Pickering.Lxi.Piplx.SubStatus.Corrupted"/>
            ). Subsequent attempts to operate it 
            using 'ordinary' switch functions such as 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ViewBit(System.Int32)"/> 
            etc. will fail (result 
            <see cref="F:Pickering.Lxi.Piplx.PiplxErrorCode.StateCorrupt"/>
            ). Normal 
            operation can be restored by clearing the sub-unit using 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ClearSubunit"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxCard.ClearCard"/> or 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ClearAll"/>.
            </remarks>
            <param name="switchFunction">Code indicating the 
            functional group of the switch.</param>
            <param name="segmentNumber">The segment location of 
            the switch.</param>
            <param name="switchNumber">The number of the switch in 
            its functional group (unity-based).</param>
            <param name="subSwitch">The number of the subswitch to 
            operate (unity-based).</param>
            <param name="switchAction">Code indicating the action 
            to be performed.</param>
            <returns>The state of the switch (after 
            performing any action) is returned.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.SubAttribute(Pickering.Lxi.Piplx.SubAttributeCode)">
            <summary>
            Obtains the value of a sub-unit attribute. These values
            facilitate operation using 
            <see cref="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.OperateSwitch(Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction)"/>.
            </summary>
            <remarks>
            <b>AttributeCode values</b>
            <para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>1</td>
            <td>ChannelSubswitches</td>
            <td>Gets number of subswitches per logical channel 
            (matrix crosspoint)</td>
            </tr>
            <tr>
            <td>2</td>
            <td>XIsoSubswitches</td>
            <td>Gets number of subswitches per logical X-isolator</td>
            </tr>
            <tr>
            <td>3</td>
            <td>YIsoSubwsitches</td>
            <td>Gets number of subswitches per logical Y-isolator</td>
            </tr>
            <tr>
            <td>4</td>
            <td>XLoopthruSubswitches</td>
            <td>Gets number of subswitches per logical X-loopthru</td>
            </tr>
            <tr>
            <td>5</td>
            <td>YLoopthruSubswitches</td>
            <td>Gets number of subswitches per logical Y-loopthru</td>
            </tr>
            <tr>
            <td>0x100</td>
            <td>NumberXSegments</td>
            <td>Gets number of X-axis segments</td>
            </tr>
            <tr>
            <td>0x101</td>
            <td>XSegment01Size</td>
            <td>Gets size of X-axis segment 1</td>
            </tr>
            <tr>
            <td>0x102</td>
            <td>XSegment02Size</td>
            <td>Gets size of X-axis segment 2</td>
            </tr>
            <tr>
            <td>0x103</td>
            <td>XSegment03Size</td>
            <td>Gets size of X-axis segment 3</td>
            </tr>
            <tr>
            <td>0x104</td>
            <td>XSegment04Size</td>
            <td>Gets size of X-axis segment 4</td>
            </tr>
            <tr>
            <td>0x105</td>
            <td>XSegment05Size</td>
            <td>Gets size of X-axis segment 5</td>
            </tr>
            <tr>
            <td>0x106</td>
            <td>XSegment06Size</td>
            <td>Gets size of X-axis segment 6</td>
            </tr>
            <tr>
            <td>0x107</td>
            <td>XSegment07Size</td>
            <td>Gets size of X-axis segment 7</td>
            </tr>
            <tr>
            <td>0x108</td>
            <td>XSegment08Size</td>
            <td>Gets size of X-axis segment 8</td>
            </tr>
            <tr>
            <td>0x109</td>
            <td>XSegment09Size</td>
            <td>Gets size of X-axis segment 9</td>
            </tr>
            <tr>
            <td>0x10A</td>
            <td>XSegment10Size</td>
            <td>Gets size of X-axis segment 10</td>
            </tr>
            <tr>
            <td>0x10B</td>
            <td>XSegment11Size</td>
            <td>Gets size of X-axis segment 11</td>
            </tr>
            <tr>
            <td>0x10C</td>
            <td>XSegment12Size</td>
            <td>Gets size of X-axis segment 12</td>
            </tr>
            <tr>
            <td>0x200</td>
            <td>NumberYSegments</td>
            <td>Gets number of Y-axis segments</td>
            </tr>
            <tr>
            <td>0x201</td>
            <td>YSegment01Size</td>
            <td>Gets size of y-axis segment 1</td>
            </tr>
            <tr>
            <td>0x202</td>
            <td>YSegment02Size</td>
            <td>Gets size of y-axis segment 2</td>
            </tr>
            </table>
            </div>
            </para>
            <para>In <see cref="T:Pickering.Lxi.Piplx.SubAttributeCode"/> 
            enumerator class you can find constants listed above.
            </para>
            </remarks>
            <param name="attributeCode">Attribute code.</param>
            <returns>Attribute values.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.ViewCrosspoint(System.Int32,System.Int32)">
            <summary>
            Obtains the state of an individual matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number method 
            employed by <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ViewBit(System.Int32)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            </remarks>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <returns>The result (0 = OFF, 1 = ON).</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.ViewMaskCrosspoint(System.Int32,System.Int32)">
            <summary>
            Obtains the state of an individual matrix crosspoint's 
            mask.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number method 
            employed by 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ViewMaskBit(System.Int32)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            </remarks>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <returns>The result (0 = unmasked, 1 = masked).</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,Pickering.Lxi.Piplx.SubunitType,System.Int32,System.Int32)">
            <summary>
            Creates the GeneralMatrixSubunit abstract class, which represents the physical subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="subunitType">Sub-unit type.</param>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.GeneralSwitchSubunit">
            <summary>
            Class representing general switch sub-unit. It can be used to general 
            control of Switch, Digital, Multiplexer, Multi-channel Multiplexer, 
            Matrix and Radio Matrix sub-units.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.GeneralSwitchSubunit.bitsCount">
            <summary>
            The number of bits.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.GeneralSwitchSubunit.closureLimit">
            <summary>
            Closure limit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.GeneralSwitchSubunit.settleTime">
            <summary>
            Settling time.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,Pickering.Lxi.Piplx.SubunitType,System.Int32)">
            <summary>
            Creates the GeneralSwitchSubunit class, which represents one of the 
            Switch, Digital, Multiplexer, Multi-channel Multiplexer, 
            Matrix or Radio Matrix physical sub-units on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="subunitType">Sub-unit type.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.GeneralSwitchSubunit.BitsCount">
            <summary>
            Obtains the number of bits, each bit represents one switch.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ClosureLimit">
            <summary>
            Obtains the maximum number of switches that may be 
            activated simultaneously in the specified sub-unit. A 
            single-channel multiplexer (MUX type) allows only one 
            channel to be closed at any time. In some other models 
            such as high-density matrix types a limit is imposed to 
            prevent overheating; although it is possible to disable 
            the limit for these types (see 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>)
            , doing so is not recommended.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.GeneralSwitchSubunit.SettleTime">
            <summary>
            Obtains a sub-unit's settling time (the period taken for 
            its switches to stabilise). By default, Piplx driver 
            functions retain control during this period so that 
            switches are guaranteed to have stabilised on completion.
            This mode of operation can be overridden if required - 
            see <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of
            a sub-unit.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ClearMask">
            <summary>
            Clears a sub-unit's switch mask, enabling operation of 
            all outputs by the 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.WriteSubunit(System.Int32[])"/>
            functions.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.MaskBit(System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single output bit.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.WriteSubunit(System.Int32[])"/>
            functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external 
            circuits. </para>
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <param name="action">1 to mask, 0 to unmask.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ViewMask">
            <summary>
            Obtains the switch mask of a sub-unit. The result fills 
            the number of least significant bits corresponding to the 
            size of the sub-unit.
            </summary>
            <remarks>
            For a Matrix sub-unit, the result is folded into the 
            vector on its row-axis.
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to 
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            <para><b>Example code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.WriteSubunit(System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <returns>One-dimensional array containing the 
            result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ViewMaskBit(System.Int32)">
            <summary>
            Obtains the state of an individual output's mask.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <returns>The result (false = unmasked, true = masked).</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.WriteMask(System.Int32[])">
            <summary>
            Sets a sub-unit's switch mask to the supplied bit-pattern
            . The number of least significant bits corresponding to 
            the size of the sub-unit are written into the mask. A 
            'true' bit in the mask disables the corresponding switch 
            for the 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.WriteSubunit(System.Int32[])"/> 
            functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            For a Matrix sub-unit, the mask data is folded into the 
            vector on its row-axis.
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to 
            represent the mask pattern for the specified sub-unit, or 
            undefined data will be written to the more significant 
            bits.
            <para><b>Example Code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.WriteSubunit(System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <param name="data">One-dimensional array (vector) 
            containing the mask pattern to be set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)">
            <summary>
            Operate a single output channel or bit.
            <para>Note that in the case of a single-channel 
            multiplexer (MUX type) any existing channel closure will 
            be cleared automatically prior to selecting the new 
            channel.</para>
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <param name="action">1 to energise, 0 to de-energise.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ViewBit(System.Int32)">
            <summary>
            Obtains the state of an individual output.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <returns>Result, 0 = OFF or logic '0', 
            1 = ON or logic '1'.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ViewSubunit">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <returns>One-dimensional array (vector) containing 
            the result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.WriteSubunit(System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            <para><b>Warning:</b></para>
            <para>Function cannot be used with Multiplexer sub-units 
            unless the data array to be written contain only 
            zero.</para>
            <para><b>Note:</b></para>
            <para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            <para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            <para><b>Example Code</b></para>
            For clarity, this example omits initialising the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 ints
            supports sub-units having upto 64 switches) */
            int[] data = new int[2]; /* Value specifies the number 
            of array elements */
            
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            
            /* Setup array data to turn on switches 3, 33 and output 
            to the card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSubunit(data);
            
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSubunit(data);
            /* ... now have switches 3, 4, 33 energised */
            
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSubunit(data);
            /* ... leaving switches 3 and 4 energised */
            </code>
            </remarks>
            <param name="data">One-dimensional array (vector) 
            containing the bit-pattern to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ViewSubunitByBits">
            <summary>
            Reads the specified sub-unit and returns an array of 
            set bit indexes.
            </summary>
            <remarks>
            <para><b>Note:</b></para>
            With multiplexer and voltage attenuator sub-units use function
            <see cref="M:Pickering.Lxi.Piplx.MultiplexerSubunit.GetSelectedBit"/>
            , which return single integer instead of array.
            </remarks>
            <returns>Array of bit indexes.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.ViewMaskByBits">
            <summary>
            Reads the mask of the specified sub-unit and returns an 
            array of masked bit indexes.
            </summary>
            <returns>Array of bit indexes.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.GeneralSwitchSubunit.MaskBits(System.Int32[],System.Boolean)">
            <summary>
            Masks or unmasks bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be masked or 
            unmasked.</param>
            <param name="state">True - to mask, false - to unmask.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IBatterySimulatorExtension">
            <summary>
            Interface for BatterySimulatorExtension, which represents 
            Battery Simulator card.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IBatterySimulatorExtension.IsSetMeasureSetEnabled">
            <summary>
            Gets or sets set\measure\set functionality.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IBatterySimulatorExtension.GetEnable">
            <summary>
            Obtains the output enable pattern of battery simulator sub-units.
            </summary>
            <remarks><para><b>Notes</b></para>
            <para>Enable states of all the card's sub-units are obtained; bits in 
            Pattern are assigned in ascending order of sub-unit, i.e.
            Pattern bit 0 = enable state of lowest numbered sub-unit (0 = OFF, 1 = ON)
            Pattern bit 1 = enable state of next numbered sub-unit (0 = OFF, 1 = ON)
            etc.</para>
            </remarks>
            <returns>Output enable pattern.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IBatterySimulatorExtension.SetEnable(System.Boolean[])">
            <summary>
            Sets the output enable pattern of battery simulator (BATT type) sub-units.
            </summary>
            <remarks>
            <para><b>Notes</b></para>
            <para>Enable states of all the card's sub-units are set; bits in the supplied pattern 
            are utilised in ascending order of sub-unit, i.e.
            Pattern bit 0 = enable state of lowest numbered sub-unit (0 = OFF, 1 = ON)
            Pattern bit 1 = enable state of next numbered sub-unit (0 = OFF, 1 = ON)
            etc.</para>
            <para>Note that the operation can fail if a necessary hardware interlock is disconnected.
            The present enable pattern can be obtained using
            <see cref="M:Pickering.Lxi.Piplx.IBatterySimulatorExtension.GetEnable"/>.</para>
            </remarks>
            <param name="pattern">The pattern of output enables to set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IBatterySimulatorExtension.SetValue(Pickering.Lxi.Piplx.ValueType,System.Double)">
            <summary>
            Sets the output voltage or current of battery simulator 
            sub-units. All of the card's sub-units are set to the 
            given value.
            </summary>
            <remarks>The voltage or current value specified is rounded 
            to the precision of the sub-unit's DAC. The actual voltage 
            or current setting can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.GetValue(Pickering.Lxi.Piplx.ValueType)"/>.
            </remarks>
            <param name="valueType">The type of value to set.</param>
            <param name="value">The output value to set.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IBatterySimulatorSubunit">
            <summary>
            Interface for Battery Simulator sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.Current">
            <summary>
            Gets or sets current value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.Enabled">
            <summary>
            Obtains or sets the output enable of battery simulator sub-unit.
            </summary>
            <returns>Enable state; false = OFF, true = ON.</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.IsInterlockUp">
            <summary>
            Obtains the present state of a hardware interlock.
            </summary>
            <remarks>
            Interlock "up" state is hardware-latched from the physical 
            wired interlock by the action of 
            <see cref="P:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.Enabled"/>, 
            when that function succeeds. Hence:
            <list type="bullet">
            <item>If the "up" state is indicated, the physical interlock 
            has remained intact and outputs are enabled as previously 
            set by 
            <see cref="P:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.Enabled"/>.</item>
            <item>If the "down" state is indicated, the physical interlock 
            has been broken and all outputs will have been disabled 
            automatically through hardware.</item>
            </list>
            </remarks>
            <returns>Interlock state; false = interlock is "down", 
            true = interlock is "up".</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.Load">
            <summary>
            Gets or sets load value 0-300 (0-300mA).
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.MeasureConfiguration">
            <summary>
            Gets or sets measure configuration.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.Voltage">
            <summary>
            Gets or sets voltage value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.SetValue(Pickering.Lxi.Piplx.ValueType,System.Double)">
            <summary>
            Sets the output voltage or current of battery simulator 
            sub-unit.
            </summary>
            <remarks>The voltage or current value specified is rounded 
            to the precision of the sub-unit's DAC. The actual voltage 
            or current setting can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.BatterySimulatorSubunit.GetValue(Pickering.Lxi.Piplx.ValueType)"/>.
            </remarks>
            <param name="valueType">The type of value to set.</param>
            <param name="value">The output value to set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IBatterySimulatorSubunit.GetValue(Pickering.Lxi.Piplx.ValueType)">
            <summary>
            Obtains the voltage or current setting of a battery 
            simulator sub-unit.
            </summary>
            <remarks>
            <para><b>Notes:</b></para>
            <para>The voltage result is the nominal value to which the 
            output has been set, not necessarily the actual voltage 
            being output (which could be affected by conditions such 
            as current-limiting).</para>
            </remarks>
            <param name="valueType">The type of value to obtain.</param>
            <returns>The output setting.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ICalibration">
            <summary>
            Interface for calibration functions used by 
            Precision Resistor and Battery Simulator cards.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ICalibration.ReadCalibration(System.Int32)">
            <summary>
            Reads an integer calibration value from on-card EEPROM.
            </summary>
            <param name="index">Calibration value index number.</param>
            <remarks>
            	<para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            	<para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            	<para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            	<para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            	<para><b>Related functions</b></para>
            	<see cref="M:Pickering.Lxi.Piplx.ICalibration.WriteCalibration(System.Int32,System.Int32)"/>
            </remarks>
            <returns>The result.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ICalibration.WriteCalibration(System.Int32,System.Int32)">
            <summary>
            Writes an integer calibration value to on-card EEPROM.
            </summary>
            <param name="index">Calibration value index number.</param>
            <param name="data">Calibration value.</param>
            <remarks>
            	<para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            	<para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            	<para>The number of bits actually stored is specific to 
            the target sub-unit - any redundant high-order bits of 
            the supplied Data value are ignored.</para>
            	<para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            	<para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            	<para><b>Related functions</b></para>
            	<see cref="M:Pickering.Lxi.Piplx.ICalibration.ReadCalibration(System.Int32)"/>
            </remarks>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ICalibrationDate">
            <summary>
            Calibration date information from the precision resistor subunit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ICalibrationDate.Day">
            <summary>
            Day in year of the calibration.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ICalibrationDate.Interval">
            <summary>
            Calibration interval (in days).
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ICalibrationDate.Year">
            <summary>
            Year of the calibration.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IClearableSubunit">
            <summary></summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IClearableSubunit.ClearSubunit">
            <summary>Clears (de-energises, open or sets to logic '0') all outputs of a subunit.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IDigitalSubunit">
            <summary>
            Interface for DigitalSubunit class, which represents 
            Digital subunit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalSubunit.ThresholdVoltage">
            <summary>
            Sets/Gets DOUBLE value for programmable threshold voltage.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalSubunit.ThresholdVoltages">
            <summary>
            Sets/Gets array of DOUBLE value for programmable threshold voltages.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IDigitalSubunit.ThresholdVoltagesCount">
            <summary>
            Gets array size of DOUBLE value for programmable threshold voltages.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalSubunit.GetThresholdVoltage">
            <summary>
            Gets DOUBLE value for programmable threshold voltage.
            </summary>
            <returns>Value for programmable threshold voltage.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalSubunit.GetThresholdVoltages">
            <summary>
            Gets array of DOUBLE value for programmable threshold voltages.
            </summary>
            <returns>Values for programmable threshold voltages.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalSubunit.GetThresholdVoltagesCount">
            <summary>
            Gets array size of DOUBLE value for programmable threshold voltages.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energize, false to de-energize.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalSubunit.SetThresholdVoltage(System.Double)">
            <summary>
            Sets DOUBLE value for programmable threshold voltage.
            </summary>
            <param name="voltage">Threshold voltage.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IDigitalSubunit.SetThresholdVoltages(System.Double[])">
            <summary>
            Sets array of DOUBLE value for programmable threshold voltages.
            </summary>
            <param name="voltages">Threshold voltages.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IFaultInsertionSubunit">
            <summary>
            Interface for SwitchSubunit class, which represents Uncommitted 
            switch subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IFaultInsertionSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IFaultInsertionSubunit.SetRestriction(Pickering.Lxi.Piplx.FaultInsertionRestriction)">
            <summary>
            Set fault insertion card restriction
            </summary>
            <param name="state">Restriction to set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IFaultInsertionSubunit.GetRestriction(Pickering.Lxi.Piplx.FaultInsertionRestriction@)">
            <summary>
            Get current fault insertion card restriction
            </summary>
            <param name="state">Restriction set.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IGeneralMatrixSubunit">
            <summary>
            Interface for class GeneralMatrixSubunit, which represents
            general matrix sub-unit. It can be used to general control 
            of Matrix and Radio Matrix sub-units.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.Rows">
            <summary>
            Obtains the number of rows.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.Columns">
            <summary>
            Obtains the number of columns.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.ViewMaskCrosspoint(System.Int32,System.Int32)">
            <summary>
            Obtains the state of an individual matrix crosspoint's 
            mask.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number method 
            employed by 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ViewMaskBit(System.Int32)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            </remarks>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <returns>The result (0 = unmasked, 1 = masked).</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.ViewCrosspoint(System.Int32,System.Int32)">
            <summary>
            Obtains the state of an individual matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number method 
            employed by <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ViewBit(System.Int32)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            </remarks>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <returns>The result (0 = OFF, 1 = ON).</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.OperateCrosspoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Operate a single matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number 
            method employed by 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            <para><b>Related Matrix Functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.ViewCrosspoint(System.Int32,System.Int32)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.MaskCrosspoint(System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.ViewMaskCrosspoint(System.Int32,System.Int32)"/>
            </remarks>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="action">1 to energise, 0 to de-energise.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.MaskCrosspoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single matrix crosspoint.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.OperateCrosspoint(System.Int32,System.Int32,System.Boolean)"/>
            and 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.WriteSubunit(System.Int32[])"/>
            functions.
            <para>This facility can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            This function supports matrix operation using 
            row/column co-ordinates in place of the linearized 
            bit-number method employed by 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.MaskBit(System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            </remarks>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="action">1 to mask, 0 to unmask.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.CrosspointToBit(System.Int32,System.Int32)">
            <summary>
            Converts column and row location to bit number.
            </summary>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <returns>Bit number.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.BitToCrosspoint(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Converts bit number to column and row location.
            </summary>
            <param name="bitNumber">Bit number.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="row">Crosspoint row (Y) location.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.SubAttribute(Pickering.Lxi.Piplx.SubAttributeCode)">
            <summary>
            Obtains the value of a sub-unit attribute. These values
            facilitate operation using 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.OperateSwitch(Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction)"/>.
            </summary>
            <remarks>
            	<b>AttributeCode values</b>
            	<para>
            		<div class="tablediv">
            			<table border="1" cellpadding="6" cellspacing="0">
            				<tr align="left">
            					<th>Value</th>
            					<th>Ident</th>
            					<th>Function</th>
            				</tr>
            				<tr>
            					<td>1</td>
            					<td>SUB_ATTR_CHANNEL_SUBSWITCHES</td>
            					<td>Gets number of subswitches per logical channel 
            (matrix crosspoint)</td>
            				</tr>
            				<tr>
            					<td>2</td>
            					<td>SUB_ATTR_X_ISO_SUBSWITCHES</td>
            					<td>Gets number of subswitches per logical X-isolator</td>
            				</tr>
            				<tr>
            					<td>3</td>
            					<td>SUB_ATTR_Y_ISO_SUBSWITCHES</td>
            					<td>Gets number of subswitches per logical Y-isolator</td>
            				</tr>
            				<tr>
            					<td>4</td>
            					<td>SUB_ATTR_X_LOOPTHRU_SUBSWITCHES</td>
            					<td>Gets number of subswitches per logical X-loopthru</td>
            				</tr>
            				<tr>
            					<td>5</td>
            					<td>SUB_ATTR_Y_LOOPTHRU_SUBSWITCHES</td>
            					<td>Gets number of subswitches per logical Y-loopthru</td>
            				</tr>
            				<tr>
            					<td>0x100</td>
            					<td>SUB_ATTR_NUM_X_SEGMENTS</td>
            					<td>Gets number of X-axis segments</td>
            				</tr>
            				<tr>
            					<td>0x101</td>
            					<td>SUB_ATTR_X_SEGMENT01_SIZE</td>
            					<td>Gets size of X-axis segment 1</td>
            				</tr>
            				<tr>
            					<td>0x102</td>
            					<td>SUB_ATTR_X_SEGMENT02_SIZE</td>
            					<td>Gets size of X-axis segment 2</td>
            				</tr>
            				<tr>
            					<td>0x103</td>
            					<td>SUB_ATTR_X_SEGMENT03_SIZE</td>
            					<td>Gets size of X-axis segment 3</td>
            				</tr>
            				<tr>
            					<td>0x104</td>
            					<td>SUB_ATTR_X_SEGMENT04_SIZE</td>
            					<td>Gets size of X-axis segment 4</td>
            				</tr>
            				<tr>
            					<td>0x105</td>
            					<td>SUB_ATTR_X_SEGMENT05_SIZE</td>
            					<td>Gets size of X-axis segment 5</td>
            				</tr>
            				<tr>
            					<td>0x106</td>
            					<td>SUB_ATTR_X_SEGMENT06_SIZE</td>
            					<td>Gets size of X-axis segment 6</td>
            				</tr>
            				<tr>
            					<td>0x107</td>
            					<td>SUB_ATTR_X_SEGMENT07_SIZE</td>
            					<td>Gets size of X-axis segment 7</td>
            				</tr>
            				<tr>
            					<td>0x108</td>
            					<td>SUB_ATTR_X_SEGMENT08_SIZE</td>
            					<td>Gets size of X-axis segment 8</td>
            				</tr>
            				<tr>
            					<td>0x109</td>
            					<td>SUB_ATTR_X_SEGMENT09_SIZE</td>
            					<td>Gets size of X-axis segment 9</td>
            				</tr>
            				<tr>
            					<td>0x10A</td>
            					<td>SUB_ATTR_X_SEGMENT10_SIZE</td>
            					<td>Gets size of X-axis segment 10</td>
            				</tr>
            				<tr>
            					<td>0x10B</td>
            					<td>SUB_ATTR_X_SEGMENT11_SIZE</td>
            					<td>Gets size of X-axis segment 11</td>
            				</tr>
            				<tr>
            					<td>0x10C</td>
            					<td>SUB_ATTR_X_SEGMENT12_SIZE</td>
            					<td>Gets size of X-axis segment 12</td>
            				</tr>
            				<tr>
            					<td>0x200</td>
            					<td>SUB_ATTR_NUM_Y_SEGMENTS</td>
            					<td>Gets number of Y-axis segments</td>
            				</tr>
            				<tr>
            					<td>0x201</td>
            					<td>SUB_ATTR_Y_SEGMENT01_SIZE</td>
            					<td>Gets size of y-axis segment 1</td>
            				</tr>
            				<tr>
            					<td>0x202</td>
            					<td>SUB_ATTR_Y_SEGMENT02_SIZE</td>
            					<td>Gets size of y-axis segment 2</td>
            				</tr>
            			</table>
            		</div>
            	</para>
            </remarks>
            <param name="attributeCode">Attribute code.</param>
            <returns>Attribute values.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.OperateSwitch(Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction)">
            <summary>
            This function obtains, and optionally sets, the state of
            a switch. It allows explicit access to the individual 
            switches making up a sub-unit, in types where their 
            operation is normally handled automatically by the 
            driver. The main purpose of this is in implementing fault
            diagnostic programs for such types; it can also be used 
            where normal automated behaviour does not suit an 
            application.
            </summary>
            <remarks>
            	<para><b>Applicable sub-unit types</b></para>
            This function is only usable with matrix sub-units having 
            auto-isolation and/or auto-loopthru features. For further 
            information see: segmented matrix, unsegmented matrix in 
            documentation.
            <para><b>SwitchFunction value</b></para>
            A value indicating the functional group of the switch to 
            be accessed.
            <div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Value</th>
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>0</td>
            				<td>SW_FUNC_CHANNEL</td>
            				<td>A channel (matrix crosspoint) switch</td>
            			</tr>
            			<tr>
            				<td>1</td>
            				<td>SW_FUNC_X_ISO</td>
            				<td>A matrix X-isolation switch</td>
            			</tr>
            			<tr>
            				<td>2</td>
            				<td>SW_FUNC_Y_ISO</td>
            				<td>A matrix Y-isolation switch</td>
            			</tr>
            			<tr>
            				<td>3</td>
            				<td>SW_FUNC_X_LOOPTHRU</td>
            				<td>A matrix X-loopthru switch</td>
            			</tr>
            			<tr>
            				<td>4</td>
            				<td>SW_FUNC_Y_LOOPTHRU</td>
            				<td>A matrix Y-loopthru switch</td>
            			</tr>
            		</table>
            	</div>
            	<para><b>SegmentNumber value</b></para>
            The number of the switch in its functional group 
            (unity-based).
            <para>For channel (crosspoint) switches, the switch 
            number can be either:</para>
            	<list type="bullet">
            		<item>if SegNum is zero, the global channel number of the 
            switch (see output bit number)</item>
            		<item>if SegNum is non-zero, the segment-local number of 
            the switch, calculated in a similar way to the above</item>
            	</list>
            	<para><b>SubSwitch value</b></para>
            The number of the subswitch to operate (unity-based). 
            This parameter caters for a situation in which a logical 
            channel, isolation or loopthru switch is served by more 
            than one physical relay (as for example when 2-pole 
            operation is implemented using independently-driven 
            single-pole relays).
            <para>The numbers of subswitches for each functional 
            group can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.SubAttribute(Pickering.Lxi.Piplx.SubAttributeCode)"/>
            .</para>
            	<para><b>SwitchAction value</b></para>
            A code indicating the action to be performed.
            <div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Value</th>
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>0</td>
            				<td>SW_ACT_NONE</td>
            				<td>No switch change - just set State result</td>
            			</tr>
            			<tr>
            				<td>1</td>
            				<td>SW_ACT_OPEN</td>
            				<td>Open switchh</td>
            			</tr>
            			<tr>
            				<td>2</td>
            				<td>SW_ACT_CLOSE</td>
            				<td>Close switch</td>
            			</tr>
            		</table>
            	</div>
            	<para><b>Loopthru switches</b></para>
            Loopthru switches are initialised by the driver to a 
            <b>closed</b> state, which may mean that they are either 
            energised or de-energised depending upon their type. In 
            normal automated operation loopthru switches open when 
            any crosspoint on their associated line is closed. 
            Actions SW_ACT_CLOSE and SW_ACT_OPEN close or open 
            loopthru switch contacts as their names imply.
            <para><b>Operational considerations</b></para>
            This function can be used to alter a pre-existing 
            switch state in a sub-unit, set up by fuctions such as 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/>
            or <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.WriteSubunit(System.Int32[])"/>. 
            However once the state of any switch is changed by 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralMatrixSubunit.OperateSwitch(Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction)"/> 
            the logical state of the sub-unit is considered to have 
            been destroyed. This condition is flagged in the result 
            of <see cref="M:Pickering.Lxi.Piplx.ISubunit.Status"/> 
            (bit STAT_CORRUPTED). Subsequent attempts to operate it 
            using 'ordinary' switch functions such as 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ViewBit(System.Int32)"/> 
            etc. will fail (result ER_STATE_CORRUPT). Normal 
            operation can be restored by clearing the sub-unit using 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ClearSubunit"/>, 
            <see cref="M:Pickering.Lxi.Piplx.IPiplxCard.ClearCard"/> or 
            <see cref="M:Pickering.Lxi.Piplx.IPiplxManager.ClearAll"/>.
            </remarks>
            <param name="switchFunction">Code indicating the 
            functional group of the switch.</param>
            <param name="segmentNumber">The segment location of the 
            switch.</param>
            <param name="switchNumber">The number of the switch in 
            its functional group (unity-based).</param>
            <param name="subSwitch">The number of the subswitch to 
            operate (unity-based).</param>
            <param name="switchAction">Code indicating the action 
            to be performed.</param>
            <returns>The state of the switch (after 
            performing any action) is returned.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IGeneralSwitchSubunit">
            <summary>
            Interface for class GeneralSwitchSubunit, which represents
            general switch sub-unit. It can be used to general control 
            of Switch, Digital, Multiplexer, Multi-channel Multiplexer, 
            Matrix and Radio Matrix sub-units.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.BitsCount">
            <summary>
            Obtains the number of bits, each bit represents one switch.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ClearMask">
            <summary>
            Clears a sub-unit's switch mask, enabling operation of 
            all outputs by the 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.WriteSubunit(System.Int32[])"/>
            functions.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of
            a sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ClosureLimit">
            <summary>
            Obtains the maximum number of switches that may be 
            activated simultaneously in the specified sub-unit. A 
            single-channel multiplexer (MUX type) allows only one 
            channel to be closed at any time. In some other models 
            such as high-density matrix types a limit is imposed to 
            prevent overheating; although it is possible to disable 
            the limit for these types (see 
            <see cref="M:Pickering.Lxi.Piplx.IPiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>)
            , doing so is not recommended.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.MaskBit(System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single output bit.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.WriteSubunit(System.Int32[])"/>
            functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external 
            circuits. </para>
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <param name="action">1 to mask, 0 to unmask.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.MaskBits(System.Int32[],System.Boolean)">
            <summary>
            Masks or unmasks bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be masked or 
            unmasked.</param>
            <param name="state">True - to mask, false - to unmask.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)">
            <summary>
            Operate a single output channel or bit.
            <para>Note that in the case of a single-channel 
            multiplexer (MUX type) any existing channel closure will 
            be cleared automatically prior to selecting the new 
            channel.</para>
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <param name="action">1 to energise, 0 to de-energise.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.SettleTime">
            <summary>
            Obtains a sub-unit's settling time (the period taken for 
            its switches to stabilise). By default, Piplx driver 
            functions retain control during this period so that 
            switches are guaranteed to have stabilised on completion.
            This mode of operation can be overridden if required - 
            see <see cref="M:Pickering.Lxi.Piplx.IPiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ViewBit(System.Int32)">
            <summary>
            Obtains the state of an individual output.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <returns>Result, 0 = OFF or logic '0', 
            1 = ON or logic '1'.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ViewMask">
            <summary>
            Obtains the switch mask of a sub-unit. The result fills 
            the number of least significant bits corresponding to the 
            size of the sub-unit.
            </summary>
            <remarks>
            For a Matrix sub-unit, the result is folded into the 
            vector on its row-axis.
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to 
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            <para><b>Example code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.WriteSubunit(System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <returns>One-dimensional array containing the 
            result.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ViewMaskBit(System.Int32)">
            <summary>
            Obtains the state of an individual output's mask.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <returns>The result (false = unmasked, true = masked).</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ViewMaskByBits">
            <summary>
            Reads the mask of the specified sub-unit and returns an 
            array of masked bit indexes.
            </summary>
            <returns>Array of bit indexes.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ViewSubunit">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <returns>One-dimensional array (vector) containing 
            the result.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.ViewSubunitByBits">
            <summary>
            Reads the specified sub-unit and returns an array of 
            selected bit indexes.
            </summary>
            <remarks>
            <para><b>Note:</b></para>
            With multiplexer and voltage attenuator sub-units use function
            <see cref="M:Pickering.Lxi.Piplx.MultiplexerSubunit.GetSelectedBit"/>
            , which return single integer instead of array.
            </remarks>
            <returns>Array of bit indexes.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.WriteMask(System.Int32[])">
            <summary>
            Sets a sub-unit's switch mask to the supplied bit-pattern.
            The number of least significant bits corresponding to 
            the size of the sub-unit are written into the mask. A 
            'true' bit in the mask disables the corresponding switch 
            for the 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.OperateBit(System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.WriteSubunit(System.Int32[])"/> 
            functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            For a Matrix sub-unit, the mask data is folded into the 
            vector on its row-axis.
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to 
            represent the mask pattern for the specified sub-unit, or 
            undefined data will be written to the more significant 
            bits.
            <para><b>Example Code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.WriteSubunit(System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <param name="data">One-dimensional array (vector) 
            containing the mask pattern to be set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IGeneralSwitchSubunit.WriteSubunit(System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            <para><b>Warning:</b></para>
            <para>Function cannot be used with Multiplexer sub-units 
            unless the data array to be written contain only 
            zeros.</para>
            <para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            <para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            <para><b>Example Code</b></para>
            For clarity, this example omits initialising the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 ints
            supports sub-units having upto 64 switches) */
            int[] data = new int[2]; /* Value specifies the number 
            of array elements */
            
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            
            /* Setup array data to turn on switches 3, 33 and output 
            to the card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSubunit(data);
            
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSubunit(data);
            /* ... now have switches 3, 4, 33 energised */
            
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSubunit(data);
            /* ... leaving switches 3 and 4 energised */
            </code>
            </remarks>
            <param name="data">One-dimensional array (vector) 
            containing the bit-pattern to be written.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IInputSubunit">
            <summary>
            Interface for InputSubunit class, which represents 
            Input subunit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IInputSubunit.BitsCount">
            <summary>
            Obtains the number of bits.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IInputSubunit.ViewBit(System.Int32)">
            <summary>
            Obtains the state of an individual input.
            </summary>
            <param name="bitNumber">Bit number.</param>
            <returns>State of input bit.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IInputSubunit.ViewSubunit">
            <summary>
            Obtains the current state of all inputs of a sub-unit.
            </summary>
            <returns>One-dimensional array (vector) containing 
            the result.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IInputSubunit.ViewSubunitByBits">
            <summary>
            Obtains array of indexes of selected bits.
            </summary>
            <returns>Array of bits indexes.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IMatrixPSubunit">
            <summary>
            Interface for MatrixPSubunit class, which represents MatrixP subunit
            subunit.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IMatrixSubunit">
            <summary>
            Interface for MatrixSubunit class, which represents 
            LF Matrix subunit.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IMultichannelMultiplexerSubunit">
            <summary>
            Interface for MultiChannelMultiplexer class, which 
            representing Multiplexer multi-channel subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IMultichannelMultiplexerSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IMultiplexerSubunit">
            <summary>
            Interface for MultiplexerSubunit class, which represents Multiplexer single-channel subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IMultiplexerSubunit.GetSelectedBit">
            <summary>
            Obtains the index of selected bit from 
            Multiplexer sub-unit.
            </summary>
            <returns>Index of selected bit.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.InputSubunit">
            <summary>
            Class representing Input subunit type of Pickering base card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.InputSubunit.bitsCount">
            <summary>
            The number of bits.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.InputSubunit.BitsCount">
            <summary>
            Obtains the number of bits.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.InputSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the InputSubunit class, which represents the 
            physical subunit on the specified card.
            </summary>
            <param name="baseCard">Base card.</param>
            <param name="subunitNumber">Sub-unit's number.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.InputSubunit.ViewBit(System.Int32)">
            <summary>
            Obtains the state of an individual input.
            </summary>
            <param name="bitNumber">Bit number.</param>
            <returns>State of input bit.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.InputSubunit.ViewSubunit">
            <summary>
            Obtains the current state of all inputs of a sub-unit.
            </summary>
            <returns>The current state of all inputs of a sub-unit.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.InputSubunit.ViewSubunitByBits">
            <summary>
            Obtains numbers of bits, which are selected.
            </summary>
            <returns>Numbers of bits, which are selected.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IPiplxCard">
            <summary>
            Interface for PiplxCard class. Represents Pickering's base card 
            (switch, matrix, PSUDC, etc.).
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCard.Capabilities">
            <summary>
            Get card extended capabilities.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCard.CardNumber">
            <summary>
            Obtains card's logical card number.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCard.InputSubunits">
            <summary>
            Obtains list of input sub-units.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCard.OutputSubunits">
            <summary>
            Obtains list of output sub-units.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCard.PiplxManager">
            <summary>
            Obtains PiplxManager, which is owner of this class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCard.SensorsTemperatures">
            <summary>
            Gets available sensors temperature value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPiplxCard.ClearCard">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of all 
            sub-units of the card.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IPiplxCardInfo">
            <summary>
            Interface for class PiplxCardInfo, which stores all information about
            Pickering card.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCardInfo.Bus">
            <summary>
            Obtains card's logical bus location.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPiplxCardInfo.Diagnostic">
            <summary>
            Obtains card's diagnostic string.
            </summary>
            <returns>Diagnostic string.</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCardInfo.GlobalAddressSlotNumber">
            <summary>
            Gets global address slot address of a PXIe card.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCardInfo.InputSubunitsCount">
            <summary>
            Obtains the number of input subunits.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCardInfo.OutputSubunitsCount">
            <summary>
            Obtains the number of output subunits.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCardInfo.RevisionCode">
            <summary>
            Obtains card's revision code.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCardInfo.SerialNumber">
            <summary>
            Obtains card's serial number.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCardInfo.Device">
            <summary>
            Obtains card's logical slot location.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPiplxCardInfo.Status">
            <summary>
            Obtains card's status flags.
            </summary>
            <returns>A value representing the card's status flags.</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCardInfo.TemperatureSensorCount">
            <summary>
            Get the number of Temperature sensors on-board.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxCardInfo.TypeCode">
            <summary>
            Obtains card's type code.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IPiplxManager">
            <summary>
            Iterface for PiplxManager class, which is used to 
            create interface between user and specified LXI/PXI device.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxManager.IsPxiSharedMemoryActive">
            <summary>
            Indicates if PXI Shared Memory activated.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxManager.IsPxiSharedMemoryInstalled">
            <summary>
            Indicates if PXI Shared Memory installed.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPiplxManager.ClearAll">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of 
            all sub-units of every open Pickering card.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)">
            <summary>
            Allows control flags affecting the driver's global 
            behaviour to be set and read. This function gives access 
            to low-level control features of the Piplx driver and is 
            intended for 'expert' use only - the default driver 
            behaviour should be satisfactory for the great majority 
            of applications.
            </summary>
            <remarks>
            <para><b>Flag Bit Definitions</b></para>
            Flag bits are as follows:
            <list type="bullet">
            <item>0x00000000 - Default (standard operating 
            mode)</item>
            <item>0x00000001 - NoWait (sequencing and settling 
            time delays disabled)</item>
            <item>0x00000002 - Unlimited (closure limits 
            disabled - see <b>Warning</b> below)</item>
            <item>0x00000004 - Reopen (allow re-opening without 
            clearing cards)</item>
            <item>0x00000008 - IgnoreTest (enable card 
            operation even if selftest fails - see <b>Warning</b> 
            below)</item>
            </list>
            <para>In 
            <see cref="T:Pickering.Lxi.Piplx.Modes"/> enumerator class
            you can find constants listed above.</para>
            <para><b>Warning - Unlimited:</b></para>
            Use of <b>Unlimited</b> mode to disable the limit on the maximum 
            number of switch closures permitted on high-density cards 
            is <b>not</b> recommended, because it carries the danger 
            of overheating and consequent damage to both the card 
            itself and the system in which it is installed. See 
            Closure Limits.
            <para><b>Warning - IgnoreTest:</b></para> 
            The <b>IgnoreTest</b> feature should be used with 
            <b>extreme caution</b>. If a defective card is forcibly 
            enabled, under some fault conditions a large number of 
            outputs could be energised spuriously, resulting in 
            overheating and consequent damage to both the card itself
            and the system in which it is installed. The intended 
            purpose of this feature is to allow continued operation 
            of a BRIC unit from which a daughtercard has been removed 
            for maintenance. See BRIC Operation.
            </remarks>
            <param name="mode">A new value for driver mode flags.</param>
            <returns>The driver's mode flags prior to executing this 
            function.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown 
            when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPiplxManager.Version">
            <summary>
            Obtains the driver version code.
            </summary>
            <returns>
            The driver version code, multiplied by 100 (i.e. a value 
            of 100 represents version 1.00).
            </returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPiplxManager.Item(System.Int32)">
            <summary>
            Gets a PiplxCard based on index of the card.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit">
            <summary>
            Interface for PowerAttenuatorSubunit class, which represents 
            Programmable attenuator subunit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.AttenuatorType">
            <summary>
            Obtains a description of an attenuator sub-unit, as a 
            text string.
            </summary>        
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of a 
            sub-unit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.GetValue">
            <summary>
            Obtains the current attenuation setting.
            </summary>
            <returns>The attenuation value, in dB.</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.StepsCount">
            <summary>
            Obtains steps count.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.OperateBit(System.Int32,System.Boolean)">
            <summary>
            Operates a single output channel or bit.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <param name="action">1 to energise, 0 to de-energise.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.PadValue(System.Int32)">
            <summary>
            Obtains the attenuation value of a numbered pad.
            </summary>
            <param name="padNumber">Pad number.</param>
            <returns>Pad's attenuation value in dB.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.SetValue(System.Single)">
            <summary>
            Sets the attenuation to the specified value.
            </summary>
            <param name="value">The attenuation value to set, in dB.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.SettleTime">
            <summary>
            Obtains a sub-unit's settling time (the period taken for its 
            switches to stabilise). By default, Piplx driver functions retain 
            control during this period so that switches are guaranteed to have 
            stabilised on completion.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.StepSize">
            <summary>
            Obtains the step size.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.ViewBit(System.Int32)">
            <summary>
            Obtains the state of an individual output.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <returns>Result, 0 = OFF or logic '0', 1 = ON or logic '1'.
            </returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.ViewSubunit">
            <summary>
            Obtains the state of all outputs of a sub-unit. The result 
            fills the number of least significant bits corresponding 
            to the size of the sub-unit.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <returns>One-dimensional array (vector) containing the result.
            </returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerAttenuatorSubunit.WriteSubunit(System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied bit-pattern. The 
            number of least significant bits corresponding to the size of the 
            sub-unit are written.
            </summary>
            <param name="data">One-dimensional array (vector) containing the 
            bit-pattern to be written.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IPowerSupplySubunit">
            <summary>
            Interface for PowerSupplySubunit class, which represents DC power 
            supply subunit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSupplySubunit.Capabilities">
            <summary>
            Obtains capability flags.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSupplySubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of a 
            sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSupplySubunit.RatedCurrent">
            <summary>
            Obtains the rated current.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSupplySubunit.Enable(System.Boolean)">
            <summary>
            Enables or disables a power supply's output.
            </summary>
            <param name="state">1 to enable, 0 to disable output.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSupplySubunit.GetValue">
            <summary>
            Obtains the voltage setting of a power supply sub-unit.
            </summary>
            <returns>The output setting, in Volts.</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSupplySubunit.Precision">
            <summary>
            Obtains the precision.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSupplySubunit.PowerSupplyType">
            <summary>
            Obtains a description of a power supply sub-unit, as a text string.
            </summary>        
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSupplySubunit.SetValue(System.Double)">
            <summary>
            Sets the output voltage of a power supply sub-unit to the 
            specified value.
            </summary>
            <param name="value">The output voltage to set, in Volts.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSupplySubunit.RatedVoltage">
            <summary>
            Obtains the rated voltage.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IPrecisionResistorSubunit">
            <summary>
            Detail information about precision resistor sub-unit.
            </summary>   
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.Capabilities">
            <summary>
            Capabilitiy flags.
            </summary>        
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.InternalDelta">
            <summary>
            internal precision [Ohms].
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.MaximumResistance">
            <summary>
            The maximum resistance setting.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.MinimumResistance">
            <summary>
            The minimum resistance setting.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.PrecisionDelta">
            <summary>
            Delta precision [Ohms].
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.PrecisionPercentage">
            <summary>
            Percentage precision [%].
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.ReferenceResistance">
            <summary>
            The reference resistance value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.GetValue">
            <summary>
            	<para>Obtains the current resistance setting of the specified 
            programmable resistor. This function is only usable with 
            programmable resistor models that support it, such as 40-260-001.
            </para>
            </summary>
            <returns>The resistance.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.GetResistorSubunitObject">
            <summary>
            Returns explicitly an object of the resistor subunit.
            </summary>
            <remarks>Some precision Resistor cards support functions which are 
            only available for classic Resistor cards.</remarks>
            <returns>Returned Resistor subunit object.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.WriteFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Double[])">
            <summary>
            Writes one or more floating-point calibration values into 
            on-card EEPROM.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">
            Value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).
            </param>
            <param name="offset">
            The offset in the sub-unit's calibration 
            store at which to start.
            </param>
            <param name="data">The array containing values to write.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.WriteCalibrationDate(Pickering.Lxi.Piplx.CalibrationStore,System.Int32)">
            <summary>
            Writes a sub-unit's calibration date and interval into on-card 
            EEPROM. 
            Date information is obtained from the current system date.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">
            value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).
            </param>
            <param name="interval">
            The desired calibration interval 
            (in days).
            </param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)">
            <summary>
            Sets a programmable resistor to the closest available setting to 
            the value specified. This function is only usable with programmable 
            resistor models that support it, such as 40-260-001.
            <para>If the sub-unit permits, the resistance value can be set to:
            </para>
            	<list type="bullet">
            		<item>zero ohms (nominally), by passing the resistance value 0.0
            </item>
            		<item>infinity as Double.<see cref="F:System.Double.MaxValue"/>
            or by using function 
            <see cref="M:Pickering.Lxi.Piplx.ResistorSubunit.ClearSubunit"/>
            		</item>
            	</list>
            	<para>The resistance value actually set can be found using 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.GetValue"/>
            .</para>
            </summary>
            <remarks>
            	<para>Mode value</para>
            	<para>A value indicating how the given resistance value is to be 
            applied. 
            Only one mode is currently supported:</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>SpecifiedValue</td>
            				<td>Set resistance to the specified value</td>
            			</tr>
            		</table>
            	</div>
            	<para>
            Note:</para>
            	<para>In programmable resistor models having gapped ranges, 
            resistance values falling within such gaps are not coerced. 
            For example, in a unit supporting settings:
            <list type="bullet">
            			<item>zero ohms</item>
            			<item>100 - 200 ohms continuously variable</item>
            			<item>infinity as Double.<see cref="F:System.Double.PositiveInfinity"/></item>
            		</list>
            attempting to set values above zero but below 100 ohms, 
            or above 200 ohms but less than infinity, gives error 
            <see cref="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadResistance"/>.
            </para>
            </remarks>
            <param name="mode">The resistance setting mode (<see cref="T:Pickering.Lxi.Piplx.ResistanceSettingMode"/>).</param>
            <param name="value">The resistance value to set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.SetCalibrationPoint(System.Int32)">
            <summary>
            Sets a sub-unit to a state corresponding to one of its defined 
            calibration points.
            </summary>
            <remarks>
            	<para><b>Notes:</b>
            This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used by a 
            calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of calibration points supported is specific to the 
            target sub-unit.
            </para>
            	<para>
            The index value used by this function corresponds directly to the 
            offset in the sub-unit's calibration store at which the value is 
            to be stored and retrieved, using 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.WriteFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Double[])"/>.
            and 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.ReadFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Int32)"/>.
            </para>
            	<para><b>Warning:</b>
            Selection of a calibration point causes the sub-unit to change 
            state; the resulting state may be outside its normally desired 
            range of operation. On completion of a calibration sequence, 
            SetResistance can be used to normalise the setting.
            </para>
            </remarks>
            <param name="index">
            The index number of the calibration point 
            (see below).
            </param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.ReadFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Int32)">
            <summary>
            Reads one or more floating-point calibration values from on-card 
            EEPROM.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">
            Value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).
            </param>
            <param name="offset">
            The offset in the sub-unit's calibration store
            at which to start.
            </param>
            <param name="numValues">The number of calibration values to read.</param>
            <returns>The floating point calibration data.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPrecisionResistorSubunit.ReadCalibrationDate(Pickering.Lxi.Piplx.CalibrationStore)">
            <summary>
            Reads a sub-unit's calibration date and interval from on-card 
            EEPROM.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">
            value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).
            </param>
            <returns>Calibration information.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IRadioMatrixSubunit">
            <summary>
            Interface for RadioMatrixSubunit class, which represents RF Matrix 
            subunit.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IResistorSubunit">
            <summary>
            Interface for ResistorSubunit class, which represents Programmable 
            resistor subunit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IResistorSubunit.BitsCount">
            <summary>
            Obtains the number of bits, each bit 
            represents a switch sub-unit's resistor chain.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IResistorSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of a 
            sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IResistorSubunit.ClosureLimit">
            <summary>
            Obtains the closure limit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IResistorSubunit.OperateBit(System.Int32,System.Boolean)">
            <summary>
            Operates a single output channel or bit.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <param name="action">true to energise, false to de-energise.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IResistorSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IResistorSubunit.ReadCalibration(System.Int32)">
            <summary>
            Reads a 16-bit calibration value from on-card EEPROM.
            </summary>
            <param name="index">Calibration value index number.</param>
            <returns>The result.</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IResistorSubunit.SettleTime">
            <summary>
            Obtains a sub-unit's settling time (the period taken for its
            switches to stabilise). By default, Piplx driver functions retain 
            control during this period so that switches are guaranteed to have 
            stabilised on completion.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IResistorSubunit.ViewBit(System.Int32)">
            <summary>
            Obtains the state of an individual output.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <returns>Result, 'false' = OFF, 'true' = ON.
            </returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IResistorSubunit.ViewSubunit">
            <summary>
            Obtains the state of all outputs of a sub-unit. The result 
            fills the number of least significant bits corresponding to the 
            size of the sub-unit.
            </summary>
            <returns>One-dimensional array (vector) containing the result.
            </returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IResistorSubunit.WriteCalibration(System.Int32,System.Int32)">
            <summary>
            Writes a 16-bit calibration value to on-card EEPROM.
            </summary>
            <param name="index">Calibration value index number.</param>
            <param name="data">The value to be written.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IResistorSubunit.WriteSubunit(System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied bit-pattern. 
            The number of least significant bits corresponding to the size 
            of the sub-unit are written.
            </summary>
            <param name="data">One-dimensional array (vector) containing the 
            bit-pattern to be written.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ISwitchSubunit">
            <summary>
            Interface for SwitchSubunit class, which represents Uncommitted 
            switch subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ISwitchSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IVoltageAttenuatorSubunit">
            <summary>
            Interface for VoltageAttenuatorSubunit class, which represents 
            Voltage attenuator subunit type of Pickering card.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.MatrixPInfo">
            <summary>
            Sub-unit type codes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.MatrixPInfo.NotApplicable">
            <summary>
            Sub-unit is not MATRIXP type.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.MatrixPInfo.RestrictiveX">
            <summary>
            Pole-switched matrix allowing only one column (X) connection on any row (Y).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.MatrixPInfo.RestrictiveY">
            <summary>
            Pole-switched matrix allowing only one row (Y) connection on any column (X).
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.MatrixPSubunit">
            <summary>
            Class representing matrixP subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.MatrixPSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the RadioMatrixSubunit class, which represents the physical subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.MatrixPSubunit.SetMultiY(System.Int32)">
            <summary>
            For Internal Use, Sets <see cref="T:System.Int32" /> value.
            </summary>
            <param name="password">Access code as <see cref="T:System.Int32" />.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.MatrixSubunit">
            <summary>
            Class representing LF Matrix subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.MatrixSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the MatrixSubunit class, which represents the physical subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Modes">
            <summary>
            Bit status of mode of the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Modes.Default">
            <summary>
            Standard operating mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Modes.NoWait">
            <summary>
            Sequencing and settling time delays disabled.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Modes.Unlimited">
            <summary>
            Closure limits disabled.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Modes.Reopen">
            <summary>
            Allow re-opening without clearing cards.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Modes.IgnoreTest">
            <summary>
            Enable card operation even if self test fails.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Modes.SharedAccess">
            <summary>
            Enable shared access to cards.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Modes.SyncStart">
            <summary>
            Enables sync/abort mode of operation, cards do not operate switches until either a sync signal is received.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Modes.SimCard">
            <summary>
            TODO: Add comment here.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.MultichannelMultiplexerSubunit">
            <summary>
            Class representing Multiplexer multi-channel subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.MultichannelMultiplexerSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the MultiChannelMultiplexerSubunit class, which 
            represents the physical subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.MultichannelMultiplexerSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.MultiplexerSubunit">
            <summary>
            Class representing Multiplexer single-channel subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.MultiplexerSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the MultiplexerSubunit class, which represents the 
            physical subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.MultiplexerSubunit.GetSelectedBit">
            <summary>
            Obtains the index of selected bit from 
            Multiplexer sub-unit.
            </summary>
            <returns>Index of selected bit.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.NumberRangeAttribute">
            <summary>
            Specifies a number range for a enumerator or property.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.NumberRangeAttribute.Minimum">
            <summary>
            Gets minimum value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.NumberRangeAttribute.Maximum">
            <summary>
            Gets maximum value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.NumberRangeAttribute.#ctor(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="minimum">Minimum value.</param>
            <param name="maximum">Maximum value.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.OutputSubunitCapabilities">
            <summary>Output Subunit capabilities.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.OutputSubunitCapabilities.None">
            <summary>Subunit, doesn't have any added capabilities.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.OutputSubunitCapabilities.ProgrammableThreshold">
            <summary>Digital input subunit has programmable threshold in decimal values (added for 40-414).</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PatternMode">
            <summary>
            DIO Port pattern mode enumerator.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PatternMode.Acquisition">
            <summary>
            Pattern acquisition.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PatternMode.Generation">
            <summary>
            Pattern generation.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PiplxCard">
            <summary> 
            Class represents Pickering base card (switch, matrix, PSUDC, etc.).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.inputSubunits">
            <summary>
            The list of input sub-units on the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.outputSubunits">
            <summary>
            The list of output sub-units on the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.allSubunits">
            <summary>
            The list of all sub-units on the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.bus">
            <summary>
            Card's logical bus location.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.device">
            <summary>
            Card's logical device location.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.cardStrIdentificator">
            <summary>
            Card's identification string.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.inputSubunitsCount">
            <summary>
            The number of input sub-units on the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.outputSubunitsCount">
            <summary>
            The number of output sub-units on the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.subunitType">
            <summary>
            Sub-unit's type code.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.rows">
            <summary>
            The number of rows.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.columns">
            <summary>
            The number of columns.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCard.HIGHER_LAYER_ACCESS">
            <summary>
            A special constant which changes an access of the method.
            </summary>
            <remarks>It is defined only for specialized actions.</remarks>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.BirstSubunits">
            <summary>
            Obtains list of BIRST sub-units.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.Capabilities">
            <summary>
            Get card extended capabilities.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.CardNumber">
            <summary>
            Obtains card's logical card number.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.Info">
            <summary>
            Obtains basic card's info.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.InfoEx">
            <summary>
            Obtains Pickering card's info.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.InputSubunits">
            <summary>
            Obtains list of input sub-units.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.IsInterlockUp">
            <summary>
            Obtains the present state of a the card hardware interlock.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.Manager">
            <summary>Gets Pilpx device manager.</summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.OutputSubunits">
            <summary>
            Obtains list of output sub-units.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.PiplxManager">
            <summary>
            Obtains PiplxManager, which is owner of this class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.Subunits">
            <summary>
            Obtains list of all sub-units.
            </summary>
            <remarks>
            <para><b>Note:</b></para>
            Input sub-units are stored first in the list, follows output 
            sub-units.
            </remarks>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCard.SensorsTemperatures">
            <summary>
            Gets available sensors temperature value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.ClearCard">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of all 
            sub-units of the card.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.Close">
            <summary>
            Closes the card.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code returns fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.FlushSyncRelayCountingData">
            <summary>
            Updates the db file as well as memory with current relay count values.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.GenerateRelayCountingDbFile">
            <summary>
            Generates db file for a card if on board memory is present.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.GetBatterySimulatorExtension">
            <summary>
            Gets Battery Simulator extension which can control all 
            Battery Simulator sub-units in one step.
            </summary>
            <returns>Returns object of the extension if there is 
            at least one Battery Simulator sub-unit.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.GetDigitalInputOutputExtension">
            <summary>
            Returns Digital Input Output extension which can control
            Digital Input Output sub-units in one step.
            </summary>
            <returns>
            Digital Input Output extension which can control
            Digital Input Output sub-units in one step.
            </returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.LoadCardInformation">
            <summary>
            Loads all card information.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.Open(Pickering.Lxi.Communication.AccessType)">
            <summary>
            Opens the card.
            </summary>
            <param name="access">Type of card access.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code returns fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.SetUpCardObject">
            <summary>
            Set up object of Piplx card.
            </summary>        
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.ToString">
            <summary>
            Gets string representing this card.
            </summary>
            <returns>String representing this card.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.#ctor(Pickering.Lxi.Piplx.PiplxManager,System.Int32)">
            <summary>
            Constructor, that creates the class, which represents physical card
            with the specified card's logical card number.
            </summary>
            <param name="deviceManager">Piplx device manager.</param>
            <param name="cardNumber">Card's logical card number.</param>
            <remarks>The card has to be openned if the device is LXI.</remarks>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.#ctor(Pickering.Lxi.Piplx.PiplxManager,System.Int32,System.Boolean)">
            <summary>
            Constructor, that creates the class, which represents physical card
            with the specified card's logical card number but card is already opened.
            </summary>
            <param name="deviceManager">Piplx device manager.</param>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="opened">True if card is already opened.</param>
            <remarks>The card has to be openned if the device is LXI.</remarks>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCard.#ctor(Pickering.Lxi.Piplx.PiplxManager,System.Int32,System.Int32)">
            <summary>
            Constructor, that creates the class, which represents physical 
            card with the specified card's logical bus and device number.
            </summary>
            <param name="deviceManager">Piplx device manager.</param>
            <param name="bus">Card's logical bus location.</param>
            <param name="device">Card's logical device location.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PiplxCardInfo">
            <summary>
            Class, which stores all information about Pickering's card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCardInfo.bus">
            <summary>
            Card's logical bus location.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCardInfo.device">
            <summary>
            Card's logical device location.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCardInfo.diagnosticString">
            <summary>
            Card's diagnostic string.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCardInfo.inputSubunitsCount">
            <summary>
            The number of input sub-units.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCardInfo.outputSubunitsCount">
            <summary>
            The number of output sub-units.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCardInfo.status">
            <summary>
            Card's status flags.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCardInfo.typeCode">
            <summary>
            Card's type code.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCardInfo.serialNumber">
            <summary>
            Card's serial number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxCardInfo.revisionCode">
            <summary>
            Card's revision code.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.AliasRealTypeCode">
            <summary>
            Gets card alias Id.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.Bus">
            <summary>
            Obtains card's logical bus location.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.Device">
            <summary>
            Obtains card's logical device location.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.GlobalAddressSlotNumber">
            <summary>
            Gets global address slot address of a PXIe card. Global Address Slot works on for PXIe - returns 0 when used on PXI.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.InputSubunitsCount">
            <summary>
            Obtains the number of input subunits.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.IsAliasModeActive">
            <summary>
            Gets or sets card alias mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.OutputSubunitsCount">
            <summary>
            Obtains the number of output subunits.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.RevisionCode">
            <summary>
            Obtains card's revision code.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.SerialNumber">
            <summary>
            Obtains card's serial number.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.TemperatureSensorCount">
            <summary>
            Get the number of Temperature sensors on-board.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxCardInfo.TypeCode">
            <summary>
            Obtains card's type code.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCardInfo.Diagnostic">
            <summary>
            Obtains card's diagnostic string.
            </summary>
            <returns>Diagnostic string.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCardInfo.GetStatusMessage">
            <summary>
            Returns message status of CERN board/cards/selftest.</summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when driver code return a fault.</exception>
            <returns>Status message of CERN board/cards/selftest.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCardInfo.Status">
            <summary>
            Obtains card's status flags.
            </summary>
            <returns>A value representing the card's status flags.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxCardInfo.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Constructor, that creates the PiplxCardInfo class, which stores 
            information about PiplxCard.
            </summary>
            <param name="baseCard">PiplxCard, which this information are for.
            </param>
            <param name="bus">Bus number.</param>
            <param name="device">Device number.</param>
            <param name="cardIdStr">Card ID string.</param>
            <param name="inputSubunitsCount">Number of input subunits.</param>
            <param name="outputSubunitsCount">Number of output subunits.        
            </param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PiplxErrorCode">
            <summary>
            Error codes used by PiplxException.
            <remarks>
            <para><b>Warning:</b></para>Do <b>NOT</b> use  the numeric constants! 
            Please use symbolic names only. The numeric values 
            can change in the future.</remarks>
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.PirmlLibraryNotPresent">
            <summary>
            Pirml library is not in system.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.UnknownError">
            <summary>
            Unknown error code.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.Success">
            <summary>
            OK
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.NoCard">
            <summary>
            No Pickering card has the specified number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.NoInfo">
            <summary>
            Cannot obtain information for specified card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.CardDisabled">
            <summary>
            Specified card is disabled.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadSubunit">
            <summary>
            Sub-unit value out-of-range for target card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadBit">
            <summary>
            Bit-number out-of-range for target sub-unit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.NoCalibrationData">
            <summary>
            Target sub-unit has no calibration data to read/write.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadArray">
            <summary>
            SafeArray type, shape or size is incorrect.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.MultiplexerIllegal">
            <summary>
            Non-zero write data value is illegal for MUX sub-unit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.ExcessClosure">
            <summary>
            Execution would cause closure limit to be exceeded.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.IllegalMask">
            <summary>
            One or more of the specified channels cannot be masked.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.OutputMasked">
            <summary>
            Cannot activate an output that is masked.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadLocation">
            <summary>
            Cannot open a Pickering card at the specified location.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.ReadFail">
            <summary>
            Failed read from hardware.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.WriteFail">
            <summary>
            Failed write to hardware.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.DriverOperation">
            <summary>
            Hardware driver failure.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.DriverVersion">
            <summary>
            Incompatible hardware driver version.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.SubunitType">
            <summary>
            Function call incompatible with sub-unit type or capabilities.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadRow">
            <summary>
            Matrix row value out-of-range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadColumn">
            <summary>
            Matrix column value out-of-range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadAttenuation">
            <summary>
            Attenuation value out-of-range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadVoltage">
            <summary>
            Voltage value out-of-range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadCalibrationIndex">
            <summary>
            Calibration index value out-of-range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadSegment">
            <summary>
            Segment number out of range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadFunctionCode">
            <summary>
            Function code value out of range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadSubswitch">
            <summary>
            Sub-switch value out of range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadAction">
            <summary>
            Action code out of range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.StateCorrupt">
            <summary>
            Cannot execute due to corrupt sub-unit state.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadAttributeCode">
            <summary>
            Unrecognised attribute code.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.MemoryWriteTimeout">
            <summary>
            Timeout writing to EEPROM.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.IllegalOperation">
            <summary>
            Operation is illegal in the sub-unit's current state.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadPot">
            <summary>
            Unrecognised pot number requested.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.MatrixIllegal">
            <summary>
            Invalid write pattern for MATRIXR/MATRIXS sub-unit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.MissingChannel">
            <summary>
            Attempted operation on non-existent channel.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.CardInaccessible">
            <summary>
            Card cannot be accessed (failed/removed/unpowered).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadFloatPointFormat">
            <summary>
            Unsupported internal floating-point format (internal error).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.Uncalibrated">
            <summary>
            Sub-unit is not calibrated.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadResistance">
            <summary>
            Unobtainable resistance value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadStore">
            <summary>
            Invalid calibration store number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadMode">
            <summary>
            Invalid mode value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.CardIsNotOpened">
            <summary>
            Card is not opened.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.SubunitNotSupported">
            <summary>
            Sub-unit type is not supported by the driver.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.UnsupportedOperation">
            <summary>
            An operation is not supported. For instance code in LXI can not 
            access the PXI cards thought kernel driver.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.UnusableVisaResource">
            <summary>
            Resource string cannot be used. There's no card with specified.
            bus/device.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.InvalidVisaResource">
            <summary>
            Invalid VISA resource string.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.SettingsConflict">
            <summary>
            Conflicting device settings.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.CardType">
            <summary>
            Function call incompatible with card type or capabilities.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadPole">
            <summary>
            Switch pole value out-of-range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.MissingCapability">
            <summary>
            Attempted to activate a non-existent capability.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.MissingHardware">
            <summary>
            Action requires hardware that is not present.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.HardwareFault">
            <summary>
            Faulty hardware.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.ExecutionFail">
            <summary>
            Failed to execute (e.g. blocked by a hardware condition).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadCurrent">
            <summary>
            Current value out of range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadRange">
            <summary>
            Invalid range value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.UnsupportedAttribute">
            <summary>
            Attribute not supported.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadRegister">
            <summary>
            Register number out of range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.MatrixPIllegal">
            <summary>
            Invalid channel closure or write pattern for pole-switched matrix sub-unit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BufferUndersize">
            <summary>
            Data buffer too small.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.InconsistentAccessMode">
            <summary>
            Inconsistent shared access mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.UnobtainableResistance">
            <summary>
            Unobtainable resistance value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadAttribute">
            <summary>
            Unrecognised attribute value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.InvalidPointer">
            <summary>
            Invalid Pointer.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.ReadOnlyAttribute">
            <summary>
            Attribute is read-only.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.AttributeDisabled">
            <summary>
            Attribute is disabled.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.PsuMainOutputDisabled">
            <summary>
            Main output is disabled, cannot enable the channel.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.OutOfMemoryHeap">
            <summary>
            Unable to allocate memory on Heap.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.InvalidProcessId">
            <summary>
            Invalid ProcessID.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.SharedMemoryErr">
            <summary>
            Shared memory error.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.CardOpennedOtherProcess">
            <summary>
            Card is opened by a process in exclusive mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.DioPortDisabled">
            <summary>
            DIO card PORT is disabled due to Over-Current Scenario.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.DioInvalidFile">
            <summary>
            DIO Pattern File is invalid.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.DioDynamicActive">
            <summary>
            DIO Dynamic operation is active, action not permissible.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.DioFileEntryErr">
            <summary>
            DIO File Entry has error, check the file entries.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.HardwareInterlockNotSupported">
            <summary>
            Hardware Interlock feature not supported for the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.HardwareInterlockError">
            <summary>
            Hardware Interlock is not detected on the card, cannot use the function.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.SetMeasureSetChannelEnable">
            <summary>
            Channel is disabled, so Set/Measure/Set cannot be used.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.MeasuredCurrentOutOfRange">
            <summary>
            Measured Current out of range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.TemperatureOutOfRange">
            <summary>
            Temperature value out of range.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.CaptureEngineRunning">
            <summary>
            Capture Engine running - operation unobtainable.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxErrorCode.InvalidWritePattern">
            <summary>
            Invalid write pattern.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PiplxErrors">
            <summary>
            Error messages used by PiplxException.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxErrors.GetPiplxErrors">
            <summary>
            Initializes all Errors needed for PiplxException.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxErrors.UpdateErrors(Pickering.Lxi.Piplx.PiplxManager)">
            <summary>
            Updates error codes and messages for new driver's errors.
            ignored for some LXIs don't respond well to this mechanics.
            </summary>
            <param name="manager">Piplx device manager.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxErrors.GetMessage(System.Int32)">
            <summary>
            Obtains error message relevant to the error code.
            </summary>
            <param name="code">Error code.</param>
            <returns>Relevant error message.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxErrors.GetMessage(Pickering.Lxi.Piplx.PiplxErrorCode)">
            <summary>
            Obtains error message relevant to the error code.
            </summary>
            <param name="code">Error code.</param>
            <returns>Relevant error message.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxErrors.IsError(System.Int32)">
            <summary>
            Decides if the error code is valid.
            </summary>
            <param name="code">Error code.</param>
            <returns>True - error code has relevant error message; False - 
            error code hasn't relevant error message.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxErrors.IsError(Pickering.Lxi.Piplx.PiplxErrorCode)">
            <summary>
            Decides if the error code is valid.
            </summary>
            <param name="code">Error code.</param>
            <returns>True - error code has relevant error message; False - 
            error code hasn't relevant error message.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PiplxException">
            <summary>
            Piplx exception generated by PiplxManager.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxException.#ctor">
            <summary>
            Initializes a new instance of the <b>PiplxException</b> class.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>PiplxException</b> 
            class for the specific error message.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>PiplxException</b> class for 
            the specific error message with an inner exception.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception object.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>PiplxException</b> 
            class for the specific error code.
            </summary>
            <param name="errorCode">Error code of the exception.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <b>PiplxException</b> class 
            for the specific error code and message.
            </summary>
            <param name="errorCode">Error code of the exception.</param>
            <param name="message">Error message.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxException.#ctor(System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <b>PiplxException</b> class 
            for the specific error code with an inner exception.
            </summary>
            <param name="errorCode">Error code of the exception.</param>
            <param name="innerException">Inner exception object.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <b>PiplxException</b> class 
            for the specific error message with specific error code 
            and an inner exception.
            </summary>
            <param name="errorCode">Error code of the exception.</param>
            <param name="message">Error message.</param>
            <param name="innerException">Inner exception object.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <b>PiplxException</b> class 
            for the specific serialization info and context.
            </summary>
            <remarks>Only for serialization purposes.</remarks>
            <param name="info">Serialization info object.</param>
            <param name="context">Serialization context object.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PiplxManager">
            <summary>
            Piplx device manager. It is used to create interface between 
            user and specified LXI/PXI device.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxManager._buses">
            <summary>
            Array of card's logical buses locations.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxManager._devices">
            <summary>
            Array of card's logical devices locations.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PiplxManager._instances">
            <summary>
            List of active instances.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxManager.ActiveInstances">
            <summary>
            List of active PiplxDevicemanager instances.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxManager.Current">
            <summary>
            Current manager instance used by static OpenCard function.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxManager.IsPxiSharedMemoryActive">
            <summary>
            Indicates if PXI Shared Memory activated.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxManager.IsPxiSharedMemoryInstalled">
            <summary>
            Indicates if PXI Shared Memory installed.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxManager.IsUpdateErrorMessagesEnabled">
            <summary>
            Enable or disable updating error messages in <see cref="T:Pickering.Lxi.Piplx.PiplxErrors"/> from connected source PXI/LXI.
            Enabled as default. 
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxManager.PxiSharedMemoryService">
            <summary>
            Get PXI Shared Memory service location.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Connect">
            <summary>
            Establishes a connection with specified LXI or PXI
            device, loads all Pickering cards, initializes 
            appropriate classes and adds them to the list of cards.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Connect(Pickering.Lxi.Communication.DeviceInfo)">
            <summary>
            Establishes a connection with specified LXI or PXI
            device, loads all Pickering cards, initializes 
            appropriate classes and adds them to the list of cards.
            </summary>
            <remarks>For connection to the PXI/PCI device, it is 
            important to set a network device name 
            (<i>HostName</i>) to null reference 
            (<b>Nothing</b> in Visual Basic) or to empty string. 
            </remarks>
            <param name="devInfo">Variable, which holds information about 
            the device.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String)">
            <summary>
            Establishes a connection with specified LXI or PXI
            device, loads all Pickering cards, initializes 
            appropriate classes and adds them to the list of cards.
            </summary>
            <remarks>For connection to the PXI/PCI device, it is 
            important to set a network device name 
            (<i>HostName</i>) to null reference 
            (<b>Nothing</b> in Visual Basic) or to empty string. 
            </remarks>
            <param name="resource">The address of the device.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32)">
            <summary>
            Establishes a connection with specified LXI or PXI
            device, loads all Pickering cards, initializes 
            appropriate classes and adds them to the list of cards.
            </summary>
            <remarks>For connection to the PXI/PCI device, it is 
            important to set a network device name 
            (<i>HostName</i>) to null reference 
            (<b>Nothing</b> in Visual Basic) or to empty string. 
            </remarks>
            <param name="resource">The address of the device.</param>
            <param name="echoPort">The discovery service port.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32,System.Int32)">
            <summary>
            Establishes a connection with specified LXI or PXI
            device, loads all Pickering cards, initializes 
            appropriate classes and adds them to the list of cards.
            </summary>
            <remarks>For connection to the PXI/PCI device, it is 
            important to set a network device name 
            (<i>HostName</i>) to null reference 
            (<b>Nothing</b> in Visual Basic) or to empty string. 
            </remarks>
            <param name="resource">The address of the device.</param>
            <param name="echoPort">The discovery service port.</param>
            <param name="rpcPort">The communication port.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.String)">
            <summary>
            Establishes a connection with specified LXI or PXI
            device, loads all Pickering cards, initializes 
            appropriate classes and adds them to the list of cards.
            </summary>
            <remarks>
            For connection to the PXI/PCI device, it is 
            important to set a network device name 
            (<i>HostName</i>) to null reference 
            (<b>Nothing</b> in Visual Basic) or to empty string. 
            
            If alias exists, card is opened after successful connect.
            </remarks>
            <param name="aliasName">Alias name.</param>
            <param name="storage">
            A file containing resource database. These should be fully qualified path to prevent unexpected result.
            If is null or empty string used, then local resource database is used.
            </param>
            <remarks>Pickering Resource Management must be installed (Pirml.dll) and alias must be exists.</remarks>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Disconnect">
            <summary>
            Disconnects from LXI or PXI/PCI device.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            </summary>
            <param name="disposing">
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the destructor and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.GetPXIAccessMethod">
            <summary>
            Returns currently set PXI access method.
            </summary>
            <returns>Current access method.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Initialize">
            <summary>
            Initialize main structures.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.LoadCards">
            <summary>
            Loads information about all cards and creates the 
            PiplxCard classes in PiplxManager.
            </summary>
            <exception cref="T:System.DllNotFoundException">Exception is thrown 
            when a DLL specified in DLL import cannot be found.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.OnLoadCardsException(System.Exception)">
            <summary>
            Logs every generated exception during card initialization.
            </summary>
            <remarks>Only for implementation purposes.</remarks>
            <param name="exception">Generated exception.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SetPXIAccessMethod(Pickering.Lxi.Piplx.PxiAccessType)">
            <summary>
            Sets PXI access method according to PxiAccessType enumerator
            </summary>
            <param name="access">Access method.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.QueryResourceFromAlias(System.String,System.String)">
            <summary>
            Query resource string by given aliasName.
            </summary>
            <param name="aliasName">Alias name.</param>
            <param name="storage">
            A file containing resource database. These should be fully qualified path to prevent unexpected result.
            If is null or empty string used, then local resource database is used.
            </param>
            <returns>Resource string.</returns>
            <remarks>Pickering Resource Management must be installed (Pirml.dll) and alias must be exists.</remarks>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.CloseCards">
            <summary>
            Closes all open Pickering cards, which must have been 
            opened using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OpenCards"/>. 
            This function should be called when the application 
            program has finished using them.
            </summary>		
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.CloseSpecifiedCard(System.Int32)">
            <summary>
            Closes the specified Pickering card, which must have been
            opened using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OpenSpecifiedCard(System.Int32,System.Int32,System.Int32@)"/>. 
            This function should be called when the application 
            program has finished using the card.
            </summary>
            <param name="cardNumber">Card number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.OpenCards">
            <summary>
            Locates and opens all installed Pickering cards. Once 
            cards have been opened, other functions may then be used 
            to access cards numbered 1 through the value returned.
            <para>If cards have already been opened by the calling 
            program, they are first closed - as though by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.CloseCards"/>
            - and then re-opened.</para>
            <para>If cards are currently opened by some other program 
            they cannot be accessed and the function returns zero.</para>
            </summary>
            <remarks>
            When multiple Pickering cards are installed, the 
            assignment of card numbers depends upon their relative 
            physical locations in the system (or more accurately, on 
            the order in which they are detected by the computer's 
            operating system at boot time).
            </remarks>
            <returns>The number of Pickering cards located and opened.
            </returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>        
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.OpenSpecifiedCard(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Opens the specified Pickering card, clearing all of its 
            outputs. Once a card has been opened, other driver 
            functions may then be used to access it.
            <para>If the card is currently opened by some other 
            program it cannot be accessed and the function returns 
            an error.</para>
            </summary>
            <remarks>
            The logical Bus and Device values corresponding to a 
            particular card are determined by system topology; values 
            for cards that are operable by the Pilpxi kernel driver 
            can be discovered using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.FindFreeCards(System.Int32,System.Int32[]@,System.Int32[]@)"/>.
            </remarks>
            <param name="bus">The card's logical bus location.</param>
            <param name="device">The card's logical device location.</param>
            <param name="cardNumber">The card's logical card number is returned
            by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.OpenCardsForRead">
            <summary>
            Locates and opens all installed Pickering cards. This 
            function opens the cards only for read, the cards aren't
            blocked for other functions and users.
            </summary>
            <returns>The number of Pickering cards located and opened for read.
            </returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>        
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.OpenSpecifiedCardForRead(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Opens the specified Pickering card. This function opens 
            the card only for read, the card isn't blocked for other 
            functions and users.
            </summary>
            <param name="bus">Bus number.</param>
            <param name="device">Device number.</param>
            <param name="cardNumber">Card number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.CardId(System.Int32,System.String@)">
            <summary>
            Obtains the identification string of the specified card. 
            The string contains these elements: &lt;type code&gt;,
            &lt;serial number&gt;,&lt;revision code&gt;.
            <para>The &lt;revision code&gt; value represents the 
            hardware version of the unit - cards have no firmware 
            on-board.</para>
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="id">Character string to receive the result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.CardLocation(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Obtains the location of the specified card in terms of 
            the logical PCI bus and device number in which it is 
            located.
            <para>These values can be cross-referenced to physical 
            device locations in a particular system.</para>
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="bus">Bus location.</param>
            <param name="device">Device location.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ClosureLimit(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Obtains the maximum number of switches that may be 
            activated simultaneously in the specified sub-unit. A 
            single-channel multiplexer (MUX type) allows only one 
            channel to be closed at any time. In some other models 
            such as high-density matrix types a limit is imposed to 
            prevent overheating; although it is possible to disable 
            the limit for these types (see 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>)
            , doing so is not recommended.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="limit">Limit is returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.CountFreeCards(System.Int32@)">
            <summary>
            Obtains the number of installed cards that are operable 
            by the Piplx driver but are not currently opened by it.
            </summary>
            <param name="numberOfCards">Number of free cards returned 
            by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Diagnostic(System.Int32,System.String@)">
            <summary>
            Obtains the diagnostic string of the specified card, 
            giving expanded information on any fault conditions 
            indicated by the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxCardInfo.Status"/>
            value.
            </summary>
            <remarks>
            The result string may include embedded newline 
            characters, coded as the ASCII &lt;linefeed&gt; character
            ('\x0A').
            <para>The length of the result string will not exceed the
            value of the driver constant MaximumDiagnosticLength.</para>
            <para>
            <para><b>Warning</b></para>
            Formatting and content of the diagnostic string may 
            change as enhanced diagnostic features are made 
            available. It should therefore not be interpreted 
            programmatically.</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="diagnose">Diagnostic string.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.EnumerateSubunits(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Obtains the numbers of input and output sub-units 
            implemented on the specified card.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="inputSubunits">Received number of input sub-units.
            </param>
            <param name="outputSubunits">Received number of output sub-units.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ErrorMesage(System.Int32)">
            <summary>
            Converts error code to message.
            </summary>
            <param name="errorCode">Error code.</param>
            <returns>Error message.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.FindFreeCards(System.Int32,System.Int32[]@,System.Int32[]@)">
            <summary>
            Obtains the logical bus and device locations of installed 
            cards that are operable by the Piplx driver and are 
            currently unopened. These values are used with 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OpenSpecifiedCard(System.Int32,System.Int32,System.Int32@)"/>.
            </summary>
            <remarks>
            <para>The bus and device locations of the first card found 
            are placed respectively in the least significant elements 
            of the BusList and DeviceList arrays. Successive elements 
            contain the values for further cards.</para>
            <para>If the value given for numberCards is less than the 
            number of cards currently accessible, information is 
            obtained only for the number of cards specified.</para>
            <para><b>Warning</b></para>
            The arrays pointed to must have been assigned at least as
            many elements as the number of cards for which 
            information is being requested or adjacent memory will be 
            overwritten, causing data corruption and/or a program 
            crash. The number of accessible cards can be discovered 
            using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.CountFreeCards(System.Int32@)"/>.
            </remarks>
            <param name="numberOfCards">The number of cards (maximum) for which
            information is to be obtained.</param>
            <param name="busList">The one-dimensional array (vector) to receive
            cards' bus location values.</param>
            <param name="deviceList">The one-dimensional array (vector) to
            receive cards' device location values.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.GetStatusMessage(System.Int32)">
            <summary>
            Returns message status of CERN board/cards/self-test
            </summary>
            <param name="cardNumber">Card number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SettleTime(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Obtains a sub-unit's settling time (the period taken for 
            its switches to stabilise). By default, Piplx driver 
            functions retain control during this period so that 
            switches are guaranteed to have stabilised on completion.
            This mode of operation can be overridden if required - 
            see <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="time">Settle time is returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Status(System.Int32)">
            <summary>
            Obtains the current status flags for the specified card.
            </summary>
            <remarks>
            <para><b>Status Bit Definition</b></para>
            <para>Status bits are as follows:</para>
            <list type="bullet">
            <item>0x80000000 - STAT_NO_CARD (no card with specified number)
            </item>
            <item>0x40000000 - STAT_WRONG_DRIVER (card requires newer driver)
            </item>
            <item>0x20000000 - STAT_EEPROM_ERR (card EEPROM fault)</item>
            <item>0x10000000 - STAT_DISABLED (card disabled)</item>
            <item>0x04000000 - STAT_BUSY (card operations not completed)</item>
            <item>0x02000000 - STAT_HW_FAULT (card hardware defect)</item>
            <item>0x01000000 - STAT_PARITY_ERROR (PCIbus parity error)</item>
            <item>0x00080000 - STAT_CARD_INACCESSIBLE (Card cannot be accessed 
            - failed/removed/unpowered)</item>
            <item>0x00040000 - STAT_UNCALIBRATED (one or more sub-units 
            un-calibrated)</item>
            <item>0x00020000 - STAT_CALIBRATION_DUE (one or more sub-units
            due for calibration)</item>
            <item>0x00000000 - STAT_OK (card functional and stable)</item>
            </list>
            <para>Certain status bits are relevant only for specific 
            classes of sub-unit, or for those having particular 
            characteristics.</para>
            <para>At card level, StatusBusy indicates if any of a 
            card's sub-units have not yet stabilised.</para>
            <para>Diagnostic information on fault conditions 
            indicated in the status value can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Diagnostic(System.Int32,System.String@)"/>.</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SubStatus(System.Int32,System.Int32)"/>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <returns>Status flag. </returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SubInfo(System.Int32,System.Int32,System.Boolean,Pickering.Lxi.Piplx.SubunitType@,System.Int32@,System.Int32@)">
            <summary>
            Obtains a description of a sub-unit, as numeric values.
            </summary>
            <remarks>
            <b>Results</b>
            <para>Sub-unit type codes are:</para>
            <list type="bullet">
            <item>1 - Input</item>
            <item>11 - Switch (uncommitted switch)</item>
            <item>12 - Multiplexer (multiplexer single-channel)</item>
            <item>13 - MultichannelMultiplexer (multiplexer, multi-channel)
            </item>
            <item>14 - Matrix (matrix - LF)</item>
            <item>15 - RadioMatrix (matrix - RF)</item>
            <item>16 - Digital (digital outputs)</item>
            <item>17 - Resistor (programmable resistor)</item>
            <item>18 - Attenuator (programmable RF attenuator)</item>
            <item>19 - PowerSupply (DC power supply)</item>
            </list>
            <para>Row and column values give the dimensions of the 
            sub-unit. For all types other than matrices the column 
            value contains the significant dimension: their row 
            value is always '1'.</para>
            <para><b>Note</b></para>
            Some sub-unit types are supported by functions providing 
            alternate and/or more detailed information. These include:
            <list type="bullet">
            <item>Attenuator - <see cref="M:Pickering.Lxi.Piplx.PiplxManager.AttenuatorInfo(System.Int32,System.Int32,System.Int32@,System.Single@)"/></item>
            <item>PowerSupply - <see cref="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)"/></item>
            </list>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit function: false for INPUT, true 
            for OUTPUT.</param>
            <param name="subunitType">Subunit type is returned by reference.
            </param>
            <param name="rows">Number of rows is returned by reference.</param>
            <param name="columns">Number of columns is returned by reference.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SubStatus(System.Int32,System.Int32)">
            <summary>
            Obtains the current status flags for the specified output 
            sub-unit. Status bits associated with significant 
            card-level conditions are also returned.
            </summary>
            <remarks>
            <b>Status Bit Definition</b>
            <para>Status bits are as follows:</para>
            <list type="bullet">
            <item>0x80000000 - STAT_NO_CARD (no card with specified number)
            </item>
            <item>0x40000000 - STAT_WRONG_DRIVER (card requires newer driver)
            </item>
            <item>0x20000000 - STAT_EEPROM_ERR (card EEPROM fault)</item>
            <item>0x10000000 - STAT_DISABLED (card disabled)</item>
            <item>0x08000000 - STAT_NO_SUB (no sub-unit with specified number)
            </item>
            <item>0x04000000 - STAT_BUSY (sub-unit operations not completed)
            </item>
            <item>0x02000000 - STAT_HW_FAULT (card hardware defect)</item>
            <item>0x01000000 - STAT_PARITY_ERROR (PCIbus parity error)</item>
            <item>0x00800000 - STAT_PSU_INHIBITED (power supply output is 
            disabled - by software)</item>
            <item>0x00400000 - STAT_PSU_SHUTDOWN (power supply output is 
            shutdown - due to overload)</item>
            <item>0x00200000 - STAT_PSU_CURRENT_LIMIT (power supply is 
            operating in current-limited mode)</item>
            <item>0x00100000 - STAT_CORRUPTED (sub-unit logical state is 
            corrupted)</item>
            <item>0x00080000 - STAT_CARD_INACCESSIBLE (Card cannot be accessed 
            - failed/removed/unpowered)</item>
            <item>0x00040000 - STAT_UNCALIBRATED (sub-unit is un-calibrated)
            </item>
            <item>0x00020000 - STAT_CALIBRATION_DUE (sub-unit is due for 
            calibration)</item>
            <item>0x00000000 - STAT_OK (sub-unit functional and stable)
            </item>
            </list>
            <para>Certain status bits are relevant only for particular
            classes of sub-unit.</para>
            <para>Diagnostic information on fault conditions indicated 
            in the status value can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Diagnostic(System.Int32,System.String@)"/>.</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <returns>
            A value representing the sub-unit's status flags.
            </returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SubType(System.Int32,System.Int32,System.Boolean,System.String@)">
            <summary>
            Obtains a description of a sub-unit, as a text string.
            </summary>
            <remarks>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Type string</th>
            <th>Description</th>
            </tr>
            <tr>
            <td>INPUT(&lt;size&gt;)</td>
            <td>Digital inputs</td>
            </tr>
            <tr>
            <td>SWITCH(&lt;size&gt;)</td>
            <td>Uncommitted switches</td>
            </tr>
            <tr>
            <td>MUX(&lt;size&gt;)</td>
            <td>Multiplexer, single-channel only</td>
            </tr>
            <tr>
            <td>MUXM(&lt;size&gt;)</td>
            <td>Multiplexer, multi-channel</td>
            </tr>
            <tr>
            <td>MATRIX(&lt;columns&gt;X&lt;rows&gt;)</td>
            <td>Matrix, LF</td>
            </tr>
            <tr>
            <td>MATRIXR(&lt;columns&gt;X&lt;rows&gt;)</td>
            <td>SMatrix, RF</td>
            </tr>
            <tr>
            <td>DIGITAL(&lt;size&gt;)</td>
            <td>Digital Outputs</td>
            </tr>
            <tr>
            <td>RES(&lt;number of resistors in chain&gt;)</td>
            <td> Programmable resistor</td>
            </tr>
            <tr>
            <td>ATTEN(&lt;number of pads&gt;)</td>
            <td>Programmable RF attenuator</td>
            </tr>
            <tr>
            <td>PSUDC(0)</td>
            <td>DC Power Supply</td>
            </tr>
            </table>
            </div>
            <para>
            Some sub-unit types are supported by functions providing more 
            detailed information.
            These include:</para>
            <list type="bullet">
            <item>ATTEN - <see cref="M:Pickering.Lxi.Piplx.PiplxManager.AttenuatorType(System.Int32,System.Int32,System.String@)"/></item>
            <item>PSUDC - <see cref="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyType(System.Int32,System.Int32,System.String@)"/></item>
            </list>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit function: input(false), 
            output(true).</param>
            <param name="type">Description of the sub-unit.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Version">
            <summary>
            Obtains the driver version code.
            </summary>
            <returns>
            The driver version code, multiplied by 100 (i.e. a value 
            of 100 represents version 1.00).
            </returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ClearAll">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of 
            all sub-units of every open Pickering card.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ClearCard(System.Int32)">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of 
            all sub-units of the specified Pickering card.
            </summary>
            <param name="cardNumber">Card number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ClearSub(System.Int32,System.Int32)">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of 
            a sub-unit.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Operate a single output channel or bit.
            <para>Note that in the case of a single-channel 
            multiplexer (MUX type) any existing channel closure will 
            be cleared automatically prior to selecting the new 
            channel.</para>
            <para>Note that 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            allows more straightforward use of row/column 
            co-ordinates with matrix sub-units.</para>
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="action">true to energise, false to de-energise.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ViewBit(System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual output.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="state">State returned by reference: OFF(false),
            ON(true).</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ViewSub(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            <para><b>Note:</b></para>
            The data array is allocated by the function itself. In 
            case that <b>null</b> has been send, the array is allocated 
            in according to the needed size. In case, that array 
            too big has been send, the function reallocates the 
            array and returns data array in correct needed size.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">One-dimensional array (vector) to receive the
            result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            <para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            <para><b>Example Code</b></para>
            For clarity, this example omits initialising the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 int's
            supports sub-units having up to 64 switches) */
            int[] data = new int[2]; 
            /* Value specifies the number of array elements */
            
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            
            /* Set up array data to turn on switches 3, 33 and output 
            to the card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... now have switches 3, 4, 33 energised */
            
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... leaving switches 3 and 4 energised */
            </code>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">One-dimensional array (vector) containing the 
            bit-pattern to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Operate a single matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearised bit-number 
            method employed by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            <para><b>Related Matrix Functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.MaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewMaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)"/>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="action">true to energise, false to de-energise.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.OperateSwitch(System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction,System.Boolean@)">
            <summary>
            This function obtains, and optionally sets, the state of a switch. 
            It allows explicit access to the individual switches making up a
            sub-unit, in types where their operation is normally handled 
            automatically by the driver. The main purpose of this is in 
            implementing fault diagnostic programs for such types; it can also 
            be used where normal automated behaviour does not suit an 
            application.
            </summary>
            <remarks>
            <para><b>Applicable sub-unit types</b></para>
            This function is only usable with matrix sub-units having 
            auto-isolation and/or auto-loopthru features. For further 
            information see: segmented matrix, unsegmented matrix in 
            documentation.
            <para><b>SwitchFunction value</b></para>
            A value indicating the functional group of the switch to be 
            accessed.
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Indent</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>SW_FUNC_CHANNEL</td>
            <td>A channel (matrix crosspoint) switch</td>
            </tr>
            <tr>
            <td>1</td>
            <td>SW_FUNC_X_ISO</td>
            <td>A matrix X-isolation switch</td>
            </tr>
            <tr>
            <td>2</td>
            <td>SW_FUNC_Y_ISO</td>
            <td>A matrix Y-isolation switch</td>
            </tr>
            <tr>
            <td>3</td>
            <td>SW_FUNC_X_LOOPTHRU</td>
            <td>A matrix X-loopthru switch</td>
            </tr>
            <tr>
            <td>4</td>
            <td>SW_FUNC_Y_LOOPTHRU</td>
            <td>A matrix Y-loopthru switch</td>
            </tr>
            </table>
            </div>
            <para><b>SegmentNumber value</b></para>
            The number of the switch in its functional group (unity-based).
            <para>For channel (crosspoint) switches, the switch number can be
            either:</para>
            <list type="bullet">
            <item>if SegNum is zero, the global channel number of the switch 
            (see output bit number)</item>
            <item>if SegNum is non-zero, the segment-local number of the 
            switch, calculated in a similar way to the above</item>
            </list>
            <para><b>SubSwitch value</b></para>
            The number of the sub-switch to operate (unity-based). This 
            parameter caters for a situation in which a logical 
            channel, isolation or loopthru switch is served by more 
            than one physical relay (as for example when 2-pole 
            operation is implemented using independently-driven 
            single-pole relays).
            <para>The numbers of sub-switches for each functional group 
            can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SubAttribute(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32@)"/>.</para>
            <para><b>SwitchAction value</b></para>
            A code indicating the action to be performed.
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Indent</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>SW_ACT_NONE</td>
            <td>No switch change - just set State result</td>
            </tr>
            <tr>
            <td>1</td>
            <td>SW_ACT_OPEN</td>
            <td>Open switch</td>
            </tr>
            <tr>
            <td>2</td>
            <td>SW_ACT_CLOSE</td>
            <td>Close switch</td>
            </tr>
            </table>
            </div>
            <para><b>Loopthru switches</b></para>
            Loopthru switches are initialised by the driver to a 
            <b>closed</b> state, which may mean that they are either 
            energised or de-energised depending upon their type. In 
            normal automated operation loopthru switches open when 
            any crosspoint on their associated line is closed. 
            Actions SW_ACT_CLOSE and SW_ACT_OPEN close or open 
            loopthru switch contacts as their names imply.
            <para><b>Operational considerations</b></para>
            This function can be used to alter a pre-existing 
            switch state in a sub-unit, set up by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            or <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/>. 
            However once the state of any switch is changed by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateSwitch(System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction,System.Boolean@)"/> 
            the logical state of the sub-unit is considered to have 
            been destroyed. This condition is flagged in the result 
            of <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SubStatus(System.Int32,System.Int32)"/> 
            (bit STAT_CORRUPTED). Subsequent attempts to operate it 
            using 'ordinary' switch functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewBit(System.Int32,System.Int32,System.Int32,System.Boolean@)"/> 
            etc. will fail (result ER_STATE_CORRUPT). Normal operation 
            can be restored by clearing the sub-unit using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ClearSub(System.Int32,System.Int32)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ClearCard(System.Int32)"/> or 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ClearAll"/>.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="switchFunction">Code indicating the functional group 
            of the switch.</param>
            <param name="segmentNumber">The segment location of the switch.
            </param>
            <param name="switchNumber">The number of the switch in its 
            functional group (unity-based).</param>
            <param name="subSwitch">The number of the sub-switch to operate
            (unity-based).</param>
            <param name="switchAction">Code indicating the action to be 
            performed.</param>
            <param name="state">The state of the switch (after performing any 
            action) is returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ViewCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearised bit-number method 
            employed by <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewBit(System.Int32,System.Int32,System.Int32,System.Boolean@)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is replaced
            by one having different dimensions.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="state">State is returned by reference: OFF(false),
            ON(true).</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SubAttribute(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32@)">
            <summary>
            Obtains the value of a sub-unit attribute. These values
            facilitate operation using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateSwitch(System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction,System.Boolean@)"/>.
            </summary>
            <remarks>
            <b>AttributeCode values</b>
            <para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Indent</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>1</td>
            <td>SUB_ATTR_CHANNEL_SUBSWITCHES</td>
            <td>Gets number of sub-switches per logical channel 
            (matrix crosspoint)</td>
            </tr>
            <tr>
            <td>2</td>
            <td>SUB_ATTR_X_ISO_SUBSWITCHES</td>
            <td>Gets number of sub-switches per logical X-isolator</td>
            </tr>
            <tr>
            <td>3</td>
            <td>SUB_ATTR_Y_ISO_SUBSWITCHES</td>
            <td>Gets number of sub-switches per logical Y-isolator</td>
            </tr>
            <tr>
            <td>4</td>
            <td>SUB_ATTR_X_LOOPTHRU_SUBSWITCHES</td>
            <td>Gets number of sub-switches per logical X-loopthru</td>
            </tr>
            <tr>
            <td>5</td>
            <td>SUB_ATTR_Y_LOOPTHRU_SUBSWITCHES</td>
            <td>Gets number of sub-switches per logical Y-loopthru</td>
            </tr>
            <tr>
            <td>0x100</td>
            <td>SUB_ATTR_NUM_X_SEGMENTS</td>
            <td>Gets number of X-axis segments</td>
            </tr>
            <tr>
            <td>0x101</td>
            <td>SUB_ATTR_X_SEGMENT01_SIZE</td>
            <td>Gets size of X-axis segment 1</td>
            </tr>
            <tr>
            <td>0x102</td>
            <td>SUB_ATTR_X_SEGMENT02_SIZE</td>
            <td>Gets size of X-axis segment 2</td>
            </tr>
            <tr>
            <td>0x103</td>
            <td>SUB_ATTR_X_SEGMENT03_SIZE</td>
            <td>Gets size of X-axis segment 3</td>
            </tr>
            <tr>
            <td>0x104</td>
            <td>SUB_ATTR_X_SEGMENT04_SIZE</td>
            <td>Gets size of X-axis segment 4</td>
            </tr>
            <tr>
            <td>0x105</td>
            <td>SUB_ATTR_X_SEGMENT05_SIZE</td>
            <td>Gets size of X-axis segment 5</td>
            </tr>
            <tr>
            <td>0x106</td>
            <td>SUB_ATTR_X_SEGMENT06_SIZE</td>
            <td>Gets size of X-axis segment 6</td>
            </tr>
            <tr>
            <td>0x107</td>
            <td>SUB_ATTR_X_SEGMENT07_SIZE</td>
            <td>Gets size of X-axis segment 7</td>
            </tr>
            <tr>
            <td>0x108</td>
            <td>SUB_ATTR_X_SEGMENT08_SIZE</td>
            <td>Gets size of X-axis segment 8</td>
            </tr>
            <tr>
            <td>0x109</td>
            <td>SUB_ATTR_X_SEGMENT09_SIZE</td>
            <td>Gets size of X-axis segment 9</td>
            </tr>
            <tr>
            <td>0x10A</td>
            <td>SUB_ATTR_X_SEGMENT10_SIZE</td>
            <td>Gets size of X-axis segment 10</td>
            </tr>
            <tr>
            <td>0x10B</td>
            <td>SUB_ATTR_X_SEGMENT11_SIZE</td>
            <td>Gets size of X-axis segment 11</td>
            </tr>
            <tr>
            <td>0x10C</td>
            <td>SUB_ATTR_X_SEGMENT12_SIZE</td>
            <td>Gets size of X-axis segment 12</td>
            </tr>
            <tr>
            <td>0x200</td>
            <td>SUB_ATTR_NUM_Y_SEGMENTS</td>
            <td>Gets number of Y-axis segments</td>
            </tr>
            <tr>
            <td>0x201</td>
            <td>SUB_ATTR_Y_SEGMENT01_SIZE</td>
            <td>Gets size of y-axis segment 1</td>
            </tr>
            <tr>
            <td>0x202</td>
            <td>SUB_ATTR_Y_SEGMENT02_SIZE</td>
            <td>Gets size of y-axis segment 2</td>
            </tr>
            </table>
            </div>
            </para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Output(true) or input (false) sub-unit 
            function.</param>
            <param name="attributeCode">Attribute code.</param>
            <param name="attributeValue">Attribute values is returned by 
            reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ClearMask(System.Int32,System.Int32)">
            <summary>
            Clears a sub-unit's switch mask, enabling operation of 
            all outputs by the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            and 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/>
            functions.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.MaskBit(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single output bit.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            and 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external 
            circuits. Note that 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.MaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            allows more straightforward use of row/column co-ordinates 
            with matrices.</para>
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="action">True - mask, false - unmask.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.MaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single matrix crosspoint.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> functions.
            <para>This facility can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            This function supports matrix operation using 
            row/column co-ordinates in place of the linearised 
            bit-number method employed by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.MaskBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="action">Mask - true, unmask - false.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ViewMask(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Obtains the switch mask of a sub-unit. The result fills 
            the number of least significant bits corresponding to the 
            size of the sub-unit.
            </summary>
            <remarks>
            For a Matrix sub-unit, the result is folded into the 
            vector on its row-axis.
            <para><b>Note:</b></para>
            The data array is allocated by the function itself. In 
            case that <b>null</b> has been send, the array is allocated 
            in according to the needed size. In case, that array 
            too big has been send, the function reallocates the 
            array and returns data array in correct needed size.
            <para><b>Example code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">The one-dimensional array (vector) to receive
            the result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ViewMaskBit(System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual output's mask.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Output bit number.</param>
            <param name="state">A variable to receive the result 
            (false = unmasked, true = masked).</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ViewMaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual matrix crosspoint's mask.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearised bit-number method 
            employed by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewMaskBit(System.Int32,System.Int32,System.Int32,System.Boolean@)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is replaced 
            by one having different dimensions.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="state">A variable to receive the result (false = 
            unmasked, true = masked).</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.WriteMask(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Sets a sub-unit's switch mask to the supplied bit-pattern
            . The number of least significant bits corresponding to 
            the size of the sub-unit are written into the mask. A 
            'true' bit in the mask disables the corresponding switch 
            for the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> 
            functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            For a Matrix sub-unit, the mask data is folded into the 
            vector on its row-axis.
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to 
            represent the mask pattern for the specified sub-unit, or 
            undefined data will be written to the more significant 
            bits.
            <para><b>Example Code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">The one-dimensional array (vector) containing 
            the mask pattern to be set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ReadBit(System.Int32,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Obtains the state of an individual input.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="inputSubunit">Input sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="state">State is returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ReadSub(System.Int32,System.Int32,System.Int32[]@)">
            <summary>
            Obtains the current state of all inputs of a sub-unit.
            </summary>
            <remarks>
            Input sub-units do not exceed SUBUNIT_SIZE bits in size, so an 
            array is not necessary to receive the result.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="inputSubunit">Input sub-unit number.</param>
            <param name="data">Data are returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ReadCalibration(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Reads an integer calibration value from on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            <para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            <para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            <para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteCalibration(System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="index">Calibration value index number.</param>
            <param name="data">A variable to receive result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ReadCalibrationDate(System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Reads a sub-unit's calibration date and interval from on-card 
            EEPROM.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as SetResistance().
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value of "Store" Parameter</th>
            <th>Indent</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>CAL_STORE_USER</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>
            <td>1</td>
            <td>CAL_STORE_FACTORY</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="store">value indicating which store to access 
            (see below).</param>
            <param name="year">The variable to receive the year of 
            calibration.</param>
            <param name="day">The variable to receive the day in the 
            year of calibration.</param>
            <param name="interval">The variable to receive the calibration
            interval (in days).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ReadFloatingPointCalibration(System.Int32,System.Int32,System.Int32,System.Int32,System.Double[]@)">
            <summary>
            Reads one or more floating-point calibration values from on-card 
            EEPROM.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as SetResistance().
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value of "Store" Parameter</th>
            <th>Indent</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>CAL_STORE_USER</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>
            <td>1</td>
            <td>CAL_STORE_FACTORY</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="store">Value indicating which store to access 
            (see below).</param>
            <param name="offset">The offset in the sub-unit's calibration 
            store at which to start.</param>
            <param name="data">The array to receive the result.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SetCalibrationPoint(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a sub-unit to a state corresponding to one of its defined 
            calibration points.
            </summary>
            <remarks>
            <para><b>Notes:</b>
            This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used by a 
            calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetResistance(System.Int32,System.Int32,System.Int32,System.Double)"/>.
            The number of calibration points supported is specific to the 
            target sub-unit.
            </para>
            <para>
            The idx value used by this function corresponds directly to the 
            offset in the sub-unit's calibration store at which the value is 
            to be stored and retrieved, using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteFloatingPointCalibration(System.Int32,System.Int32,System.Int32,System.Int32,System.Double[])"/>.
            and 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ReadFloatingPointCalibration(System.Int32,System.Int32,System.Int32,System.Int32,System.Double[]@)"/>.
            </para>
            <para><b>Warning:</b>
            Selection of a calibration point causes the sub-unit to change 
            state; the resulting state may be outside its normally desired 
            range of operation. On completion of a calibration sequence, 
            SetResistance can be used to normalise the setting.
            </para>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="idx">The index number of the calibration point 
            (see below).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.WriteCalibration(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an integer calibration value to on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            <para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            <para>The number of bits actually stored is specific to 
            the target sub-unit - any redundant high-order bits of 
            the supplied Data value are ignored.</para>
            <para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            <para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ReadCalibration(System.Int32,System.Int32,System.Int32,System.Int32@)"/>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="index">Calibration value index number.</param>
            <param name="data">The value to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.WriteCalibrationDate(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes a sub-unit's calibration date and interval into on-card 
            EEPROM. 
            Date information is obtained from the current system date.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as SetResistance().
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value of "Store" Parameter</th>
            <th>Indent</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>CAL_STORE_USER</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>
            <td>1</td>
            <td>CAL_STORE_FACTORY</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="store">value indicating which store to access 
            (see below).</param>
            <param name="interval">The desired calibration interval 
            (in days).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.WriteFloatingPointCalibration(System.Int32,System.Int32,System.Int32,System.Int32,System.Double[])">
            <summary>
            Writes one or more floating-point calibration values into 
            on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as SetResistance(). 
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value of "Store" Parameter</th>
            <th>Indent</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>CAL_STORE_USER</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>
            <td>1</td>
            <td>CAL_STORE_FACTORY</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="store">Value indicating which store to access 
            (see below).</param>
            <param name="offset">The offset in the sub-unit's calibration 
            store at which to start.</param>
            <param name="data">The array containing values to write.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.GetResistance(System.Int32,System.Int32,System.Double@)">
            <summary>
            <para>Obtains the current resistance setting of the specified 
            programmable resistor. This function is only usable with 
            programmable resistor models that support it, such as 40-260-001.
            </para>
            <para>The value obtained for a resistance setting of infinity, 
            if the sub-unit permits this, is 
            Double.<see cref="F:System.Double.MaxValue"/>.</para>
            </summary>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.</param>
            <param name="resistance">The variable to receive the result.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.ResistorInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Obtain resistor characteristics
            </summary>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="minResistance">Pointer to variable to receive the 
            minimum resistance setting</param>
            <param name="maxResistance">Pointer to variable to receive the 
            maximum resistance setting</param>
            <param name="referenceResistance">Pointer to variable to receive 
            the reference resistance value</param>
            <param name="precisionPercentage">Pointer to variable to receive 
            percentage precision (+/- percent)</param>
            <param name="precisionDelta">Pointer to variable to receive delta 
            precision (+/- ohms)</param>
            <param name="int1">Pointer to variable to receive (currently 
            unused) value</param>
            <param name="internalDelta">Pointer to variable to receive 
            internal precision (+/- ohms)</param>
            <param name="capabilities">Pointer to variable to receive 
            capabilities flags</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SetResistance(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Sets a programmable resistor to the closest available setting to 
            the value specified. This function is only usable with programmable 
            resistor models that support it, such as 40-260-001.
            <para>If the sub-unit permits, the resistance value can be set to:
            </para>
            <list type="bullet">
            <item>zero ohms (nominally), by passing the resistance value 0.0
            </item>
            <item>infinity, by passing the resistance value 
            Double.<see cref="F:System.Double.MaxValue"/></item>
            or alternatively by using function 
            <see cref="M:Pickering.Lxi.Piplx.ResistorSubunit.ClearSubunit"/>
            </list>
            <para>The resistance value actually set can be found using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.GetResistance(System.Int32,System.Int32,System.Double@)"/>
            .</para>
            </summary>
            <remarks>
            <para>Mode value</para>
            <para>A value indicating how the given resistance value is to be 
            applied. 
            Only one mode is currently supported:</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Indent</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>RES_MODE_SET</td>
            <td>Set resistance to the specified value</td>
            </tr>
            </table>
            </div>
            <para>
            Note</para>
            <para>In programmable resistor models having gapped ranges, 
            resistance values falling within such gaps are not coerced. 
            For example, in a unit supporting settings:
            <list type="bullet">
            <item>zero ohms</item>
            <item>100 - 200 ohms continuously variable</item>
            <item>infinity as Double.<see cref="F:System.Double.MaxValue"/></item>
            </list>
            attempting to set values above zero but below 100 ohms, 
            or above 200 ohms but less than infinity, gives error 
            <see cref="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadResistance"/>.
            </para>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="mode">The resistance setting mode (see below).</param>
            <param name="resistance">The resistance value to set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.AttenuatorGetAttenuation(System.Int32,System.Int32,System.Single@)">
            <summary>
            Obtains the current attenuation setting.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="attenuation">The variable to receive the attenuation
            value, in dB.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.AttenuatorInfo(System.Int32,System.Int32,System.Int32@,System.Single@)">
            <summary>
            Obtains a description of an attenuator sub-unit, as numeric values.
            </summary>
            <remarks>
            The description obtained by this function is a logical 
            one; a physical description indicating the number of 
            discrete pads in the attenuator can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SubInfo(System.Int32,System.Int32,System.Boolean,Pickering.Lxi.Piplx.SubunitType@,System.Int32@,System.Int32@)"/>
            <para><b>Result</b></para>
            RF attenuator sub-unit type code is:
            <list type="bullet">
            <item>18 - Attenuator (programmable RF attenuator)</item>
            </list>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="numberOfSteps">The variable to receive step count.
            </param>
            <param name="stepSize">Variable to receive step size, in dB.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.AttenuatorPadValue(System.Int32,System.Int32,System.Int32,System.Single@)">
            <summary>
            Obtains the attenuation value of a numbered pad.
            </summary>
            /// <remarks>
            This function facilitates explicit pad selection using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            or <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/>, 
            if the selections made by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.AttenuatorSetAttenuation(System.Int32,System.Int32,System.Single)"/> 
            are not optimal for the application.
            <para>The number of pads in the sub-unit can be found using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SubInfo(System.Int32,System.Int32,System.Boolean,Pickering.Lxi.Piplx.SubunitType@,System.Int32@,System.Int32@)"/>.</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="padNumber">Pad number.</param>
            <param name="attenuation">The variable to receive the pad's 
            attenuation value, in dB.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.AttenuatorSetAttenuation(System.Int32,System.Int32,System.Single)">
            <summary>
            Sets the attenuation to the specified value.
            </summary>
            <remarks>
            The combination of pads inserted to achieve the desired 
            attenuation level is determined by the driver for best 
            all-round performance. In some models it may be possible 
            to optimise particular aspects of attenuator performance 
            by setting other pad combinations explicitly using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/> or 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/>. 
            The pad value associated with each output channel can be 
            discovered with 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.AttenuatorPadValue(System.Int32,System.Int32,System.Int32,System.Single@)"/>.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="attenuation">The attenuation value to set, in dB. 
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.AttenuatorType(System.Int32,System.Int32,System.String@)">
            <summary>
            Obtains a description of an attenuator sub-unit, as a 
            text string. 
            </summary>
            <remarks>
            <para><b>Result</b></para>
            The format of the result is "ATTEN(&lt;number of 
            steps&gt;,&lt;step size in dB&gt;)".
            <para><b>Note</b></para>
            The description obtained by this function is a logical 
            one; a physical description indicating the number of 
            discrete pads employed in the attenuator can be obtained 
            using <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SubType(System.Int32,System.Int32,System.Boolean,System.String@)"/>.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="type"> The string to receive the result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyEnable(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Enables or disables a power supply's output.
            </summary>
            <remarks>
            This function is usable only with sub-units having the 
            capability OutputControl - see 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)"/>.
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="state">true to enable, false to disable output.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyGetVoltage(System.Int32,System.Int32,System.Double@)">
            <summary>
            Obtains the voltage setting of a power supply sub-unit.
            </summary>
            <remarks>
            The result is the nominal value to which the output has 
            been set, not necessarily the actual voltage being 
            output (which may be affected by device tolerances, 
            current-limit conditions etc.).
            <para>This function is also usable with fixed-voltage 
            supplies, returning the nominal output voltage.</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="voltage">The variable to receive the output setting,
            in Volts.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)">
            <summary>
            Obtains a description of a power supply sub-unit, as 
            numeric values.
            </summary>
            <remarks>
            <para><b>Results</b></para>
            Power supply sub-unit type code is:
            <list type="bullet">
            <item>19 - PowerSupply (DC power supply)</item>
            </list>
            <para>
            Capability flag bit definitions:
            <list type="bullet">
            <item>0x00000010 - CurrentModeSense (can sense 
            if operating in current-limited mode)</item>
            <item>0x00000008 - ProgrammableCurrent (output current 
            is programmable)</item>
            <item>0x00000004 - ProgrammableVoltage (output voltage 
            is programmable)</item>
            <item>0x00000002 - OutputSense (has logic-level 
            sensing of output active state)</item>
            <item>0x00000001 - OutputControl (has output 
            on/off control)</item>
            </list>
            Certain driver functions are only usable with sub-units 
            having appropriate capabilities - examples being: 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyEnable(System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplySetVoltage(System.Int32,System.Int32,System.Double)"/>
            </para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="voltage">Received rated voltage [V].</param>
            <param name="current">Received rated current [mA].</param>
            <param name="precision">The variable to receive precision (in bits,
            meaningful only for programmable supplies.</param>
            <param name="capabilities">The variable to receive capability 
            flags.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplySetVoltage(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the output voltage of a power supply sub-unit to the
            specified value.
            </summary>
            <remarks>
            The voltage value specified is rounded to the precision 
            of the supply's DAC. The actual voltage setting can be 
            obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyGetVoltage(System.Int32,System.Int32,System.Double@)"/>.
            <para>This function is usable only with sub-units having 
            the capability ProgrammableVoltage - see 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)"/>.
            </para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subNumber">Sub-unit number.</param>
            <param name="voltage">The output voltage to set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyType(System.Int32,System.Int32,System.String@)">
            <summary>
            Obtains a description of a power supply sub-unit, as a 
            text string.
            </summary>
            <remarks>
            <para><b>Result</b></para>
            For a DC power supply the format of the result is 
            "PSUDC(&lt;rated voltage&gt;,&lt;rated current&gt;)".
            <para>More detailed information on power supply 
            characteristics is obtainable in numeric format, using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.PowerSupplyInfo(System.Int32,System.Int32,System.Double@,System.Double@,System.Int32@,Pickering.Lxi.Piplx.PowerSupplyCapabilities@)"/>
            .</para>
            </remarks>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="type">The string to receive the result.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.VsourceGetEnable(System.Int32,System.Int32,System.UInt32@)">
            <summary>
            Obtains the output enable pattern of voltage source 
            sub-units, as set by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceSetEnable(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <remarks><para><b>Notes:</b></para>
            When outputSubunit corresponds to a sub-unit, the function 
            gets the output enable state of that sub-unit alone in 
            the least significant bit of pattern (0 = OFF, 1 = ON).
            <para>If outputSubunit = 0 (VSOURCE_ALL_VSOURCE_SUB_UNITS), 
            enable states of all the card's sub-units are obtained; 
            bits in pattern are assigned in ascending order of 
            sub-unit, i.e.
            <list type="bullet">
            <item>Pattern bit 0 = enable state of lowest numbered 
            sub-unit (0 = OFF, 1 = ON)</item>
            <item>Pattern bit 1 = enable state of next numbered sub-unit 
            (0 = OFF, 1 = ON)</item>
            </list>
            </para>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="pattern">Variable to receive the output 
            enable pattern.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.VsourceGetRange(System.Int32,System.Int32,System.Double@)">
            <summary>
            Obtains the range setting of a voltage source sub-unit, 
            as set by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceSetRange(System.Int32,System.Int32,System.Double)"/>.
            </summary>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="range">Variable to receive the output range 
            setting, in Volts.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.VsourceGetVoltage(System.Int32,System.Int32,System.Double@)">
            <summary>
            Obtains the output setting of a voltage source sub-unit, 
            as set by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceSetVoltage(System.Int32,System.Int32,System.Double)"/>.
            </summary>
            <remarks><para><b>Notes:</b></para>
            The result is the nominal value to which the output has 
            been set, not necessarily the actual voltage being output 
            (which could be affected by conditions such as 
            current-limiting).
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="voltage">Variable to receive the output 
            setting, in Volts.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.VsourceSetEnable(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the output enable pattern of voltage source sub-units.
            </summary>
            <remarks><para><b>Notes:</b></para>
            When outputSubunit corresponds to a sub-unit, the function 
            sets the output enable state of that sub-unit alone 
            according to the least significant bit of pattern 
            (0 = OFF, 1 = ON).
            <para>If outputSubunit = 0 (VSOURCE_ALL_VSOURCE_SUB_UNITS), 
            enable states of all the card's sub-units are set; 
            bits in the supplied pattern are utilised in ascending 
            order of sub-unit, i.e.
            <list type="bullet">
            <item>Pattern bit 0 = enable state of lowest numbered 
            sub-unit (0 = OFF, 1 = ON)</item>
            <item>Pattern bit 1 = enable state of next numbered sub-unit 
            (0 = OFF, 1 = ON)</item>
            </list>
            </para>
            <para>
            The present enable pattern can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceGetEnable(System.Int32,System.Int32,System.UInt32@)"/>.
            </para>
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="pattern">The pattern of output enables to 
            set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.VsourceSetRange(System.Int32,System.Int32,System.Double)">
            <summary>
            Selects the output voltage range of voltage source 
            sub-units that have this capability.
            </summary>
            <remarks><para><b>Notes:</b></para>
            Only positive range values are currently accepted, 
            irrespective of whether the sub-unit has positive voltage,
            negative voltage, or bipolar capability.
            <para>For a valid range selection the supplied range value must 
            be acceptably close to a range supported by the sub-unit.</para>
            <para>The present range selection can be obtained using
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceGetRange(System.Int32,System.Int32,System.Double@)"/>.
            </para></remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="range">The output voltage range to select, 
            in Volts.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.VsourceSetVoltage(System.Int32,System.Int32,System.Double)">
            <summary>
            Sets the output voltage of voltage source sub-units.
            </summary>
            <remarks><para><b>Notes:</b></para>
            The voltage value specified is rounded to the precision 
            of the sub-unit's DAC. The actual voltage setting can 
            be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceGetVoltage(System.Int32,System.Int32,System.Double@)"/>.
            </remarks>
            <param name="cardNumber">Card's logical card number.</param>
            <param name="outputSubunit">Outputs sub-unit's logical number.
            </param>
            <param name="voltage">The output voltage to set, in Volts.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)">
            <summary>
            Allows control flags affecting the driver's global 
            behaviour to be set and read. This function gives access 
            to low-level control features of the Piplx driver and is 
            intended for 'expert' use only - the default driver 
            behaviour should be satisfactory for the great majority 
            of applications.
            </summary>
            <remarks>
            <para><b>Flag Bit Definitions</b></para>
            Flag bits are as follows:
            <list type="bullet">
            <item>0x00000000 - Default (standard operating 
            mode)</item>
            <item>0x00000001 - NoWait (sequencing and settling 
            time delays disabled)</item>
            <item>0x00000002 - Unlimited (closure limits 
            disabled - see <b>Warning</b> below)</item>
            <item>0x00000004 - Reopen (allow re-opening without 
            clearing cards)</item>
            <item>0x00000008 - IgnoreTest (enable card 
            operation even if self-test fails - see <b>Warning</b> 
            below)</item>
            </list>
            <para>In 
            <see cref="T:Pickering.Lxi.Piplx.Modes"/> enumerator class
            you can find constants listed above.</para>
            <para><b>Warning - Unlimited:</b></para>
            Use of <b>Unlimited</b> mode to disable the limit on the maximum 
            number of switch closures permitted on high-density cards 
            is <b>not</b> recommended, because it carries the danger 
            of overheating and consequent damage to both the card 
            itself and the system in which it is installed. See 
            Closure Limits.
            <para><b>Warning - IgnoreTest:</b></para> 
            The <b>IgnoreTest</b> feature should be used with 
            <b>extreme caution</b>. If a defective card is forcibly 
            enabled, under some fault conditions a large number of 
            outputs could be energised spuriously, resulting in 
            overheating and consequent damage to both the card itself
            and the system in which it is installed. The intended 
            purpose of this feature is to allow continued operation 
            of a BRIC unit from which a daughtercard has been removed 
            for maintenance. See BRIC Operation.
            </remarks>
            <param name="mode">A new value for driver mode flags.</param>
            <returns>The driver's mode flags prior to executing this function.
            </returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.GetAttribute``1(System.Int32,System.Int32,System.Boolean,Pickering.Lxi.Piplx.AttributeCode,``0@,System.Int32)">
            <summary>
            Gets the value of a specific attribute.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit function: false for INPUT, true for OUTPUT.</param>
            <param name="attrCode">Attribute code. See <see cref="T:Pickering.Lxi.Piplx.AttributeCode">AttributeCode</see> for more information.</param>
            <param name="attrValue">Attribute value.</param>
            <param name="attrValueLength">Size of attribute value data type or string length.</param>
            <remarks>
            Now are supported only basic data types such as:
            <list type="bullet">
                <item><see cref="T:System.Byte"/>System.Byte</item>
                <item><see cref="T:System.SByte"/>System.SByte</item>
                <item><see cref="T:System.Int16"/>System.Int16</item>
                <item><see cref="T:System.UInt16"/>System.UInt16</item>
                <item><see cref="T:System.Int32"/>System.Int32</item>
                <item><see cref="T:System.UInt32"/>System.UInt32</item>
                <item><see cref="T:System.Int64"/>System.Int64</item>
                <item><see cref="T:System.UInt64"/>System.UInt64</item>
                <item><see cref="T:System.Single"/>System.Single</item>
                <item><see cref="T:System.Double"/>System.Double</item>
                <item><see cref="T:System.Boolean"/>System.Boolean</item>
                <item><see cref="T:System.String"/>System.String</item>
            </list>
            No arrays are supported at the moment.
            </remarks>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.SetAttribute``1(System.Int32,System.Int32,System.Boolean,Pickering.Lxi.Piplx.AttributeCode,``0,System.Int32)">
            <summary>
            Sets the value for a specific attribute.
            </summary>
            <param name="cardNumber">Card number.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit type: false for INPUT, true for OUTPUT.</param>
            <param name="attrCode">Attribute code. See <see cref="T:Pickering.Lxi.Piplx.AttributeCode">AttributeCode</see> for more information.</param>
            <param name="attrValue">Attribute value.</param>
            <param name="attrValueLength">Size of attribute value data type or string length.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#cctor">
            <summary>
            Static PiplxManager constructor.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>After initialization, the new instance is not connected 
            to the device. Use one of 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(Pickering.Lxi.Communication.DeviceInfo)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32,System.Int32)"/>
            methods for establishing a 
            connection between <b>PiplxManager</b> and device. </remarks>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>
            After initialization, the new instance is connected to 
            the device. Empty string or null reference (<b>Nothing</b>
            in Visual Basic) means connection to the PXI/PCI system.
            </remarks>
            <param name="resource">A resource string. It can be VISA resource 
            string or hostname.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>
            <para>
            After initialization, the new instance connection state depends 
            on "connect" parameter (<b>true</b> - connect after initialization ; 
            <b>false</b> - do NOT connect after initialization). 
            Empty string or null reference 
            (<b>Nothing</b> in Visual Basic) means connection to the PXI/PCI
            system.
            </para>
            <para>
            Further connection between <b>PiplxManager</b> and device could be 
            made by use one of 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(Pickering.Lxi.Communication.DeviceInfo)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32,System.Int32)"/>
            methods.
            </para>
            </remarks>
            <param name="resource">A resource string. It can be VISA resource 
            string or hostname.</param>
            <param name="connect">True - connect after initialization, False - 
            do NOT connect after initialization.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>
            After initialization, the new instance is connected to 
            the device. Empty string or null reference (<b>Nothing</b>
            in Visual Basic) means connection to the PXI/PCI system.
            </remarks>        
            <param name="resource">A resource string. It can be VISA resource 
            string or hostname.</param>
            <param name="echoPort">The discovery service port.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>
            <para>
            After initialization, the new instance connection state depends 
            on "connect" parameter (<b>true</b> - connect after initialization ; 
            <b>false</b> - do NOT connect after initialization). 
            Empty string or null reference 
            (<b>Nothing</b> in Visual Basic) means connection to the PXI/PCI
            system.
            </para>
            <para>
            Further connection between <b>PiplxManager</b> and device could be 
            made by use one of 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(Pickering.Lxi.Communication.DeviceInfo)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32,System.Int32)"/>
            methods.
            </para>
            </remarks>        
            <param name="resource">A resource string. It can be VISA resource 
            string or hostname.</param>
            <param name="echoPort">The discovery service port.</param>
            <param name="connect">True - connect after initialization, False - 
            do NOT connect after initialization.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>
            After initialization, the new instance is connected to 
            the device. Empty string or null reference (<b>Nothing</b>
            in Visual Basic) means connection to the PXI/PCI system.
            </remarks>        
            <param name="resource">A resource string. It can be VISA resource 
            string or hostname.</param>
            <param name="echoPort">Echo port.</param>
            <param name="rpcPort">RPC communication port.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>
            <para>
            After initialization, the new instance connection state depends 
            on "connect" parameter (<b>true</b> - connect after initialization ; 
            <b>false</b> - do NOT connect after initialization). 
            Empty string or null reference 
            (<b>Nothing</b> in Visual Basic) means connection to the PXI/PCI
            system.
            </para>
            <para>
            Further connection between <b>PiplxManager</b> and device could be 
            made by use one of 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(Pickering.Lxi.Communication.DeviceInfo)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32,System.Int32)"/>
            methods.
            </para>
            </remarks>        
            <param name="resource">A resource string. It can be VISA resource 
            string or hostname.</param>
            <param name="echoPort">The discovery service port.</param>
            <param name="rpcPort">RPC communication port.</param>
            <param name="connect">True - connect after initialization, False - 
            do NOT connect after initialization.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor(Pickering.Lxi.Communication.DeviceInfo)">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>
            After initialization, the new instance is connected to 
            the device. Empty string or null reference (<b>Nothing</b>
            in Visual Basic) means connection to the PXI/PCI system.
            </remarks>        
            <param name="devInfo">Variable, which holds information about 
            the device.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor(Pickering.Lxi.Communication.DeviceInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>
            <para>
            After initialization, the new instance connection state depends 
            on "connect" parameter (<b>true</b> - connect after initialization ; 
            <b>false</b> - do NOT connect after initialization). 
            Empty string or null reference 
            (<b>Nothing</b> in Visual Basic) means connection to the PXI/PCI
            system.
            </para>
            <para>
            Further connection between <b>PiplxManager</b> and device could be 
            made by use one of 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(Pickering.Lxi.Communication.DeviceInfo)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32)"/>,
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.Connect(System.String,System.Int32,System.Int32)"/>
            methods.
            </para>
            </remarks>        
            <param name="devInfo">Variable, which holds information about the 
            device.</param>
            <param name="connect">True - connect after initialization, False - 
            do NOT connect after initialization.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>PiplxManager</b> class. 
            </summary>
            <remarks>
            After initialization, the new instance is connected to 
            the device and if alias exists card is opened.
            </remarks>
            <param name="aliasName">Alias name.</param>
            <param name="storage">
            A file containing resource database. These should be fully qualified path to prevent unexpected result.
            If is null or empty string used, then local resource database is used.
            </param>
            <remarks>Pickering Resource Management must be installed (Pirml.dll) and alias must be exists.</remarks>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PiplxManager.Finalize">
            <summary>
            Class destructor.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PiplxManager.Item(System.Int32)">
            <summary>
            Gets a PiplxCard based on index of the card.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PowerAttenuatorSubunit">
            <summary>
            Class representing Programmable attenuator subunit type of Pickering's
            card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.stepsCount">
            <summary>
            Steps count.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.stepSize">
            <summary>
            The step size.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.padsCount">
            <summary>
            Pads count.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.settleTime">
            <summary>
            Settling time.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.typeString">
            <summary>
            Power attenuator type.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.padValues">
            <summary>
            Pad values.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the PowerAttenuatorSubunit class, which represents the
            physical subunit on the specified card.
            </summary>
            <param name="baseCard">Base card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="columns">Number of columns, which corresponds with
            padsCount.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.StepSize">
            <summary>
            Obtains the step size.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.StepsCount">
            <summary>
            Obtains steps count.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.PadsCount">
            <summary>
            Obtains pads count.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.SettleTime">
            <summary>
            Obtains a sub-unit's settling time (the period taken for 
            its switches to stabilise). By default, Piplx driver 
            functions retain control during this period so that 
            switches are guaranteed to have stabilised on completion.
            This mode of operation can be overridden if required - 
            see <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.GetValue">
            <summary>
            Obtains the current attenuation setting.
            </summary>
            <returns>The attenuation value, in dB.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.PadValue(System.Int32)">
            <summary>
            Obtains the attenuation value of a numbered pad.
            </summary>
            <param name="padNumber">Pad number.</param>
            <returns>Pad's attenuation value in dB.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.SetValue(System.Single)">
            <summary>
            Sets the attenuation to the specified value.
            </summary>
            <param name="value">The attenuation value to set, 
            in dB.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of
            a sub-unit.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.OperateBit(System.Int32,System.Boolean)">
            <summary>
            Operate a single output channel or bit.
            <para>Note that in the case of a single-channel 
            multiplexer (MUX type) any existing channel closure will 
            be cleared automatically prior to selecting the new 
            channel.</para>
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <param name="action">1 to energise, 0 to de-energise.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.ViewBit(System.Int32)">
            <summary>
            Obtains the state of an individual output.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <returns>Result, 0 = OFF or logic '0', 
            1 = ON or logic '1'.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.ViewSubunit">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <returns>One-dimensional array (vector) containing 
            the result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.WriteSubunit(System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            <para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            <para><b>Example Code</b></para>
            For clarity, this example omits initialising the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 ints
            supports sub-units having upto 64 switches) */
            int[] data = new int[2]; /* Value specifies the number 
            of array elements */
            
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            
            /* Setup array data to turn on switches 3, 33 and output 
            to the card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... now have switches 3, 4, 33 energised */
            
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... leaving switches 3 and 4 energised */
            </code>
            </remarks>
            <param name="data">One-dimensional array (vector) 
            containing the bit-pattern to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerAttenuatorSubunit.AttenuatorType">
            <summary>
            Obtains a description of an attenuator sub-unit, as a 
            text string.
            </summary>               
        </member>
        <member name="T:Pickering.Lxi.Piplx.PowerSourceModes">
            <summary>
            PowerSourceSubunit modes. Three modes for current and three modes for voltage.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSourceModes.Mode4to20mA">
            <summary>4-20mA mode (set by default).</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSourceModes.Mode0to24mA">
            <summary>0-20mA mode.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSourceModes.ModeMinus24to24mA">
            <summary>+/-24mA mode.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSourceModes.Mode0to5V">
            <summary>0-5V mode.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSourceModes.ModeMinus12to12V">
            <summary>+/- 12V mode.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSourceModes.ModeMinus5to5V">
            <summary>+/- 5V mode.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IPowerSourceSubunit">
            <summary>
            PowerSourceSubunit class interface.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSourceSubunit.Current">
            <summary>
            Sets or sets value of Current in mA.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSourceSubunit.IsSlew">
            <summary>
            Gets if Slew Mode functionality if on or off.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSourceSubunit.Mode">
            <summary>
            Sets or sets value of Current in mA.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSourceSubunit.SlewRate">
            <summary>
            Gets or sets slew rate value in format:
            	Lower nibble - Clock rate.
            	Upper nibble - Step size.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IPowerSourceSubunit.Voltage">
            <summary>
            Sets or gets value of Voltage in V.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSourceSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of a sub-unit.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSourceSubunit.GetCurrent">
            <summary>
            Gets value of Current in mA.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSourceSubunit.GetMode">
            <summary>
            Gets power source mode.
            </summary>
            <returns>Returns current powersource mode.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSourceSubunit.GetVoltage">
            <summary>
            Gets value of Voltage in V.
            </summary>
            <returns>Returns voltage value in mA.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSourceSubunit.SetCurrent(System.Double)">
            <summary>
            Sets value of Current in mA.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSourceSubunit.SetMode(Pickering.Lxi.Piplx.PowerSourceModes)">
            <summary>
            Sets power source mode.
            </summary>
            <param name="mode">Mode value.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IPowerSourceSubunit.SetVoltage(System.Double)">
            <summary>
            
            </summary>
            <param name="voltage"></param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PowerSourceSubunit">
            <summary>
            PowerSourceSubunit class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSourceSubunit.Current">
            <summary>
            Sets or sets value of Current in mA.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSourceSubunit.IsSlew">
            <summary>
            Gets if Slew Mode functionality if on or off.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSourceSubunit.Mode">
            <summary>
            Gets or sets mode. Available three modes for current and three modes for voltage. <see cref="T:Pickering.Lxi.Piplx.PowerSourceModes"/>
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSourceSubunit.SlewRate">
            <summary>
            Gets or sets slew rate value in format:
            	Lower nibble - Clock rate.
            	Upper nibble - Step size.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSourceSubunit.Voltage">
            <summary>
            Sets or gets value of Voltage in V.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of a sub-unit.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.GetCurrent">
            <summary>
            Gets value of Current in mA.
            </summary>
            <returns>Value of Current in mA.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.IsSlewEnabled">
            <summary>
            Gets if Slew Mode functionality if on or off.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.GetMode">
            <summary>
            Gets power source mode.
            </summary>
            <returns>Current powersource mode.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.GetSlewRate">
            <summary>
            Gets value of Upper nibble &lt;StepSize&gt; Lower nibble &lt;Clock-Rate&gt;.
            </summary>
            <returns>Value of Upper nibble &lt;StepSize&gt; Lower nibble &lt;Clock-Rate&gt;.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.GetVoltage">
            <summary>
            Gets value of Voltage in V.
            </summary>
            <returns>Voltage value in mA.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.SetCurrent(System.Double)">
            <summary>
            Sets value of Current in mA.
            </summary>
            <param name="currrent">Current in mA.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.SetMode(Pickering.Lxi.Piplx.PowerSourceModes)">
            <summary>
            Sets power source mode.
            </summary>
            <param name="mode">Mode value.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.SetSlewRate(System.Byte)">
            <summary>
            Gets value of Upper nibble &lt;StepSize&gt; Lower nibble &lt;Clock-Rate&gt;.
            </summary>
            <param name="slewRate">Value of Upper nibble &lt;StepSize&gt; Lower nibble &lt;Clock-Rate&gt;.</param>
            <returns>Value of Upper nibble &lt;StepSize&gt; Lower nibble &lt;Clock-Rate&gt;.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSourceSubunit.SetVoltage(System.Double)">
            <summary>
            Sets value of Voltage in V.
            </summary>
            <param name="voltage">Voltage in Volts.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PowerSupplyCapabilities">
            <summary>
            Capability flags of the Power Supply Unit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplyCapabilities.OutputControl">
            <summary>
            Has output on/off control.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplyCapabilities.OutputSense">
            <summary>
            Has logic-level sensing of output active state.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplyCapabilities.ProgrammableVoltage">
            <summary>
            Output voltage is programmable.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplyCapabilities.ProgrammableCurrent">
            <summary>
            Output current is programmable.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplyCapabilities.CurrentModeSense">
            <summary>
            Can sense if operating in current-limited mode.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PowerSupplySubunit">
            <summary>
            Class representing DC power supply subunit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplySubunit.ratedVoltage">
            <summary>
            Rated voltage.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplySubunit.ratedCurrent">
            <summary>
            Rated current.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplySubunit.precision">
            <summary>
            Precision.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplySubunit.capabilities">
            <summary>
            Capability flags.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PowerSupplySubunit.typeString">
            <summary>
            Type string.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSupplySubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Creates the PowerSupplySubunit class, which represents 
            the physical subunit on the specified card.
            </summary>
            <param name="baseCard">Base card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSupplySubunit.RatedCurrent">
            <summary>
            Obtains the rated current.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSupplySubunit.Precision">
            <summary>
            Obtains the precision.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSupplySubunit.RatedVoltage">
            <summary>
            Obtains the rated voltage.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSupplySubunit.Capabilities">
            <summary>
            Obtains capability flags.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSupplySubunit.IsEnable">
            <summary>
            Returns false if output is disabled. Otherwise true.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSupplySubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of
            a sub-unit.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSupplySubunit.Enable(System.Boolean)">
            <summary>
            Enables or disables a power supply's output.
            </summary>
            <param name="state">1 to enable, 0 to disable output.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSupplySubunit.GetValue">
            <summary>
            Obtains the voltage setting of a power supply sub-unit.
            </summary>
            <returns>The output setting, in Volts.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PowerSupplySubunit.SetValue(System.Double)">
            <summary>
            Sets the output voltage of a power supply sub-unit to 
            the specified value.
            </summary>
            <param name="value">The output voltage to set, 
            in Volts.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PowerSupplySubunit.PowerSupplyType">
            <summary>
            Obtains a description of a power supply sub-unit, as a 
            text string.
            </summary>              
        </member>
        <member name="T:Pickering.Lxi.Piplx.PrecisionResistorSubunit">
            <summary>
            Class representing Programmable resistor subunit with 
            support of precision resistor functions.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PrecisionResistorSubunit.minResistance">
            <summary>
            The minimum resistance setting.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PrecisionResistorSubunit.maxResistance">
            <summary>
            The maximum resistance setting.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PrecisionResistorSubunit.referenceResistance">
            <summary>
            The reference resistance value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PrecisionResistorSubunit.precisionPercentage">
            <summary>
            Percentage precision [%].
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PrecisionResistorSubunit.precisionDelta">
            <summary>
            Delta precision [Ohms].
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PrecisionResistorSubunit.internalDelta">
            <summary>
            internal precision [Ohms].
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PrecisionResistorSubunit.capabilities">
            <summary>
            Capabilitiy flags.
            </summary>        
        </member>
        <member name="F:Pickering.Lxi.Piplx.PrecisionResistorSubunit.settleTime">
            <summary>
            Settling  time.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Creates the PrecisionResistorSubunit class, which represents the 
            physical subunit on the specified card.
            </summary>
            <param name="baseCard">Base card.</param>
            <param name="subunitNumber">Sub-unit number.</param>        
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Creates the PrecisionResistorSubunit class, which 
            represents the physical subunit on the specified card.
            </summary>
            <param name="baseCard">Base card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="referenceResistance"></param>
            <param name="capabilities">Resistor Capabilities.</param>
            <param name="int1">Unused.</param>
            <param name="internalDelta">Internal Delta.</param>
            <param name="maxResistance">Max Resistance.</param>
            <param name="minResistance">Min Resistance.</param>
            <param name="precisionDelta">Precision Delta.</param>
            <param name="precisionPercentage">Precision Percentage.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PrecisionResistorSubunit.Capabilities">
            <summary>
            Obtains capability flags.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PrecisionResistorSubunit.InternalDelta">
            <summary>
            Obtains internal precision [Ohms].
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PrecisionResistorSubunit.ReferenceResistance">
            <summary>
            Obtains reference resistance value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PrecisionResistorSubunit.PrecisionPercentage">
            <summary>
            Obtains percentage precision [%].
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PrecisionResistorSubunit.PrecisionDelta">
            <summary>
            Obtains delta precision [Ohms].
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PrecisionResistorSubunit.MinimumResistance">
            <summary>
            Obtains minimum resistance setting.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PrecisionResistorSubunit.MaximumResistance">
            <summary>
            Obtains maximum resistance setting.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SettleTime">
            <summary>
            Obtains a sub-unit's settling time (the period taken for 
            its switches to stabilise). By default, Piplx driver 
            functions retain control during this period so that 
            switches are guaranteed to have stabilised on completion.
            This mode of operation can be overridden if required - 
            see <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetCalibrationPoint(System.Int32)">
            <summary>
            Sets a sub-unit to a state corresponding to one of its defined 
            calibration points.
            </summary>
            <remarks>
            	<para><b>Notes:</b>
            This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used by a 
            calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of calibration points supported is specific to the 
            target sub-unit.
            </para>
            	<para>
            The index value used by this function corresponds directly to the 
            offset in the sub-unit's calibration store at which the value is 
            to be stored and retrieved, using 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.WriteFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Double[])"/>.
            and 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.ReadFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Int32)"/>.
            </para>
            	<para><b>Warning:</b>
            Selection of a calibration point causes the sub-unit to change 
            state; the resulting state may be outside its normally desired 
            range of operation. On completion of a calibration sequence, 
            SetResistance can be used to normalise the setting.
            </para>
            </remarks>
            <param name="index">The index number of the calibration point 
            (see below).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.GetValue">
            <summary>
            <para>Obtains the current resistance setting of the specified 
            programmable resistor. This function is only usable with 
            programmable resistor models that support it, such as 40-260-001.
            </para>
            </summary>
            <returns>The resistance.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)">
            <summary>
            Sets a programmable resistor to the closest available 
            setting to the value specified. This function is only 
            usable with programmable resistor models that support it,
            such as 40-260-001.
            <para>If the sub-unit permits, the resistance value can 
            be set to:
            </para><list type="bullet">
            <item>zero ohms (nominally), by passing the resistance 
            value 0.0</item>
            <item>infinity as Double.
            <see cref="F:System.Double.MaxValue"/> or by using function 
            <see cref="M:Pickering.Lxi.Piplx.ResistorSubunit.ClearSubunit"/>
            </item></list>
            <para>The resistance value actually set can be found using 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.GetValue"/>
            .</para></summary>
            <remarks>
            <para>Mode value</para>
            <para>A value indicating how the given resistance value 
            is to be applied. Only one mode is currently supported:
            </para><div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left"> 
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>        
            <td>SpecifiedValue</td>
            <td>Set resistance to the specified value</td>
            </tr>
            </table>
            </div>
            <para>Note:</para>
            <para>In programmable resistor models having gapped 
            ranges, resistance values falling within such gaps are 
            not coerced. For example, in a unit supporting settings:
            <list type="bullet">
            <item>zero ohms</item>
            <item>100 - 200 ohms continuously variable</item>
            <item>infinity as Double.
            <see cref="F:System.Double.PositiveInfinity"/></item>
            </list>
            attempting to set values above zero but below 100 ohms, 
            or above 200 ohms but less than infinity, gives error 
            <see cref="F:Pickering.Lxi.Piplx.PiplxErrorCode.BadResistance"/>.
            </para>
            </remarks>
            <param name="mode">The resistance setting mode 
            (<see cref="T:Pickering.Lxi.Piplx.ResistanceSettingMode"/>)
            .</param>
            <param name="value">The resistance value to set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.ReadFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Int32)">
            <summary>
            Reads one or more floating-point calibration values from 
            on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that 
            support floating-point calibration data, and would 
            normally be used by a calibration tool for the model 
            concerned. Floating-point calibration data is utilised by 
            functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is 
            specific to the target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, 
            known as "user" and "factory" stores. The user store 
            holds the active calibration data, while the factory 
            store holds a backup calibration that can be reverted to 
            in the event of the user store contents becoming invalid.
            </para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>        
            <td>User</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>        
            <td>Factory</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="store">Value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <param name="offset">The offset in the sub-unit's 
            calibration storeat which to start.</param>
            <param name="numValues">The number of calibration values 
            to read.</param>
            <returns>The floating point calibration data.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.WriteFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Double[])">
            <summary>
            Writes one or more floating-point calibration values into 
            on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">        
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>        
            <td>User</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>        
            <td>Factory</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="store">Value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <param name="offset">The offset in the sub-unit's calibration 
            store at which to start.</param>
            <param name="data">The array containing values to write.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.ReadCalibrationDate(Pickering.Lxi.Piplx.CalibrationStore)">
            <summary>
            Reads a sub-unit's calibration date and interval from on-card 
            EEPROM.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">        
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>        
            <td>User</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>        
            <td>Factory</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="store">value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <returns>Calibration information.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.WriteCalibrationDate(Pickering.Lxi.Piplx.CalibrationStore,System.Int32)">
            <summary>
            Writes a sub-unit's calibration date and interval into on-card 
            EEPROM. 
            Date information is obtained from the current system date.
            </summary>
            <remarks>
            <para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilised by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            <para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>User</td>
            <td>Access user calibration store</td>
            </tr>
            <tr>
            <td>Factory</td>
            <td>Access factory calibration store</td>
            </tr>
            </table>
            </div>
            </remarks>
            <param name="store">value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <param name="interval">The desired calibration interval 
            (in days).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.GetResistorSubunitObject">
            <summary>
            Returns this class explicitly as an object of the Resistor 
            subunit type.
            </summary>
            <remarks>Some precision Resistor cards support functions,
            which are only available for classic Resistor cards.
            </remarks>
            <returns>Returned Resistor subunit object.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IProgrammableVoltageSource">
            <summary>
            Programmable Voltage Source subunit interface.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSource.ColdJunctionCompensationBlock">
            <summary>
            Cold Junction Compensation Block.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSource.Pot">
            <summary>
            Gets or sets Pot value from/into the user store. It also save Pot value to non-volatile memory.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSource.Range">
            <summary>
            Set or gets output voltage range of voltage source.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSource.Ranges">
            <summary>
            Information about available ranges.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSource.TemperatureConverter">
            <summary>
            Gets temperature conversion extension.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSource.Type">
            <summary>
            Obtains or sets the Voltage Source output enable state.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSource.Voltage">
            <summary>
            Sets or gets voltage source voltage value (in Volts).
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IProgrammableVoltageSource.ReadCalibrationDate(Pickering.Lxi.Piplx.CalibrationStore)">
            <summary>
            Reads a sub-unit's calibration date and interval from on-card 
            EEPROM.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilized by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <returns>Calibration information.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IProgrammableVoltageSource.ReadFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Int32)">
            <summary>
            Reads one or more floating-point calibration values from 
            on-card EEPROM.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that 
            support floating-point calibration data, and would 
            normally be used by a calibration tool for the model 
            concerned. Floating-point calibration data is utilized by 
            functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is 
            specific to the target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, 
            known as "user" and "factory" stores. The user store 
            holds the active calibration data, while the factory 
            store holds a backup calibration that can be reverted to 
            in the event of the user store contents becoming invalid.
            </para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">Value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <param name="offset">The offset in the sub-unit's 
            calibration storeat which to start.</param>
            <param name="numValues">The number of calibration values 
            to read.</param>
            <returns>The floating point calibration data.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IProgrammableVoltageSource.SetPot(System.Int32)">
            <summary>
            Save Pot value to non-volatile memory.
            </summary>
            <param name="value">Pot value.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IProgrammableVoltageSource.ViewSubunit">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            	<para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            	<para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <returns>One-dimensional array (vector) containing 
            the result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IProgrammableVoltageSource.WriteCalibrationDate(Pickering.Lxi.Piplx.CalibrationStore,System.Int32)">
            <summary>
            Writes a sub-unit's calibration date and interval into on-card 
            EEPROM. 
            Date information is obtained from the current system date.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilized by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <param name="interval">The desired calibration interval 
            (in days).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IProgrammableVoltageSource.WriteFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Double[])">
            <summary>
            Writes one or more floating-point calibration values into 
            on-card EEPROM.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilized by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">Value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <param name="offset">The offset in the sub-unit's calibration 
            store at which to start.</param>
            <param name="data">The array containing values to write.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.IProgrammableVoltageSource.WriteSubunit(System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            	<para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            	<para><b>Warning:</b></para>
            	<para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            	<para><b>Example Code</b></para>
            For clarity, this example omits initializing the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 ints
            supports sub-units having upto 64 switches) */
            int[] data = new int[2]; /* Value specifies the number 
            of array elements */
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            /* Setup array data to turn on switches 3, 33 and output 
            to the card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... now have switches 3, 4, 33 energised */
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&amp;#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... leaving switches 3 and 4 energised */
            </code>
            </remarks>
            <param name="data">One-dimensional array (vector) 
            containing the bit-pattern to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ProgrammableVoltageSource">
            <summary>
            Class representing Programmable Voltage Source sub-unit
            and allows controlling it.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSource.ColdJunctionCompensationBlock">
            <summary>
            Gets Cold Junction Compensation Block.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSource.Pot">
            <summary>
            Gets or sets Pot value from/into the user store. It also save Pot value to non-volatile memory.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSource.Range">
            <summary>
            Set or gets output voltage range of voltage source.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSource.Ranges">
            <summary>
            Information about available ranges.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSource.TemperatureConverter">
            <summary>
            Gets temperature conversion extension.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSource.Type">
            <summary>
            Description of a Thermocouple Simulator sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSource.Voltage">
            <summary>
            Sets or gets voltage source voltage value (in Volts).
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSource.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of
            a sub-unit.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSource.ReadCalibrationDate(Pickering.Lxi.Piplx.CalibrationStore)">
            <summary>
            Reads a sub-unit's calibration date and interval from on-card 
            EEPROM.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilized by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <returns>Calibration information.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSource.ReadFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Int32)">
            <summary>
            Reads one or more floating-point calibration values from 
            on-card EEPROM.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that 
            support floating-point calibration data, and would 
            normally be used by a calibration tool for the model 
            concerned. Floating-point calibration data is utilized by 
            functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is 
            specific to the target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, 
            known as "user" and "factory" stores. The user store 
            holds the active calibration data, while the factory 
            store holds a backup calibration that can be reverted to 
            in the event of the user store contents becoming invalid.
            </para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">Value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <param name="offset">The offset in the sub-unit's 
            calibration storeat which to start.</param>
            <param name="numValues">The number of calibration values 
            to read.</param>
            <returns>The floating point calibration data.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSource.SetPot(System.Int32)">
            <summary>
            Save Pot value to volatile memory. It is temporary.
            </summary>
            <param name="value">Pot value.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSource.ViewSubunit">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            	<para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            	<para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <returns>One-dimensional array (vector) containing 
            the result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSource.WriteCalibrationDate(Pickering.Lxi.Piplx.CalibrationStore,System.Int32)">
            <summary>
            Writes a sub-unit's calibration date and interval into on-card 
            EEPROM. 
            Date information is obtained from the current system date.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilized by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <param name="interval">The desired calibration interval 
            (in days).</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSource.WriteFloatingPointCalibration(Pickering.Lxi.Piplx.CalibrationStore,System.Int32,System.Double[])">
            <summary>
            Writes one or more floating-point calibration values into 
            on-card EEPROM.
            </summary>
            <remarks>
            	<para>This function is only applicable to sub-units that support 
            floating-point calibration data, and would normally be used 
            by a calibration tool for the model concerned. Floating-point 
            calibration data is utilized by functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PrecisionResistorSubunit.SetValue(Pickering.Lxi.Piplx.ResistanceSettingMode,System.Double)"/>.
            The number of values stored and their purpose is specific to the 
            target sub-unit.</para>
            	<para>Some sub-units support dual calibration stores, known as 
            "user" and "factory" stores. The user store holds the active 
            calibration data, while the factory store holds a backup 
            calibration that can be reverted to in the event of the user store 
            contents becoming invalid.</para>
            	<div class="tablediv">
            		<table border="1" cellpadding="6" cellspacing="0">
            			<tr align="left">
            				<th>Ident</th>
            				<th>Function</th>
            			</tr>
            			<tr>
            				<td>User</td>
            				<td>Access user calibration store</td>
            			</tr>
            			<tr>
            				<td>Factory</td>
            				<td>Access factory calibration store</td>
            			</tr>
            		</table>
            	</div>
            </remarks>
            <param name="store">Value indicating which store to access 
            (<see cref="T:Pickering.Lxi.Piplx.CalibrationStore"/>).</param>
            <param name="offset">The offset in the sub-unit's calibration 
            store at which to start.</param>
            <param name="data">The array containing values to write.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSource.WriteSubunit(System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            	<para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            	<para><b>Warning:</b></para>
            	<para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            	<para><b>Example Code</b></para>
            For clarity, this example omits initializing the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 ints
            supports sub-units having up to 64 switches) */
            int[] data = new int[2]; /* Value specifies the number 
            of array elements */
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            /* Setup array data to turn on switches 3, 33 and output 
            to the card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... now have switches 3, 4, 33 energized */
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&amp;#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... leaving switches 3 and 4 energized */
            </code>
            </remarks>
            <param name="data">One-dimensional array (vector) 
            containing the bit-pattern to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSource.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the ProgrammableVoltageSourceSubunit class, 
            which represents the physical subunit on the specified 
            card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">Bits count.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRange">
            <summary>
            ProgrammableVoltageSource range enumerator.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRange.Auto">
            <summary>Automatic range.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRange.Low">
            <summary>Low range +/-20mV. Voltage resolution 0.7uV nominal. 41-760/761/761A.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRange.Medium">
            <summary>Medium range +/-50mV. Voltage resolution 1.7uV nominal. 41-760/761/761A.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRange.High">
            <summary>High range +/-200mV. Voltage resolution 3.3uV nominal. 41-760/761/761A.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo">
            <summary>
            Information about Programmable Voltage Source sub-unit range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.Maximum">
            <summary>
            Gets range maximum value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.MaximumDeviation">
            <summary>
            Gets range maximum deviation value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.Medium">
            <summary>
            Gets range medium value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.Minimum">
            <summary>
            Gets range minimum value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.PrecisionDelta">
            <summary>
            Gets range precision delta value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.PrecisionPercentage">
            <summary>
            Gets range precision percentage value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.RoundToDecimals">
            <summary>
            Gets or sets count of decimals for rounding double values. If value is -1, rounding is not used.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.Subunit">
            <summary>
            Programmable Voltage Source sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.Type">
            <summary>
            Programmable Voltage Source range type.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRangeInfo.#ctor(Pickering.Lxi.Piplx.ProgrammableVoltageSource,Pickering.Lxi.Piplx.ProgrammableVoltageSourceRange)">
            <summary>
            Initialise new instance of ProgrammableVoltageSourceRangeInfo class.
            </summary>
            <param name="subunit">Programmable Voltage Source subunit.</param>
            <param name="rangeType">Range type.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRanges">
            <summary>
            Information about Programmable Voltage Source sub-unit ranges.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRanges.High">
            <summary>
            High range information.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRanges.Low">
            <summary>
            Low range information.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRanges.Medium">
            <summary>
            Medium range information.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRanges.Subunit">
            <summary>
            Programmable Voltage Source subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRanges.#ctor(Pickering.Lxi.Piplx.ProgrammableVoltageSource)">
            <summary>
            Initilizes new instance of ProgrammableVoltageSourceRanges class.
            </summary>
            <param name="subunit">Programmable Voltage Source subunit.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceRanges.Item(Pickering.Lxi.Piplx.ProgrammableVoltageSourceRange)">
            <summary>
            Gets information about specific range.
            </summary>
            <param name="range">Range.</param>
            <returns>Returns information about specific range.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ThermocoupleTemperatureScales">
            <summary>
            Temperature scales.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureScales.Celsius">
            <summary>Celsius scale. See <see href="https://en.wikipedia.org/wiki/Celsius"/>.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureScales.Fahrenheit">
            <summary>Fahrenheit scale. See <see href="https://en.wikipedia.org/wiki/Fahrenheit"/>.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureScales.Kelvin">
            <summary>Kelvin scale. See <see href="https://en.wikipedia.org/wiki/Kelvin"/>.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes">
            <summary>
            Thermocouple types <see href="https://srdata.nist.gov/its90/tables/table_i.html"/>.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes.B">
            <summary>Pt-30% Rh versus Pt-6% Rh.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes.E">
            <summary>Ni-Cr alloy versus a Cu-Ni alloy.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes.J">
            <summary>Fe versus a Cu-Ni alloy.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes.K">
            <summary>Fe versus a Cu-Ni alloy.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes.N">
            <summary>Fe versus a Cu-Ni alloy.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes.R">
            <summary>Pt-13% Rh versus Pt.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes.S">
            <summary>Pt-10% Rh versus Pt.</summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes.T">
            <summary>Cu versus a Cu-Ni alloy.</summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.IProgrammableVoltageSourceTemperatureExtension">
            <summary>
            Interface for <see cref="T:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension"/> extension class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSourceTemperatureExtension.Scale">
            <summary>
            Gets or sets thermocouple temperature scale.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSourceTemperatureExtension.Type">
            <summary>
            Gets or sets thermocouple temperature type.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.IProgrammableVoltageSourceTemperatureExtension.Temperature">
            <summary>
            Gets or sets thermocouple value.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension">
            <summary>
            <see cref="T:Pickering.Lxi.Piplx.ProgrammableVoltageSource"/> temperature conversion extension class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.Scale">
            <summary>
            Gets or sets thermocouple temperature scale.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.Type">
            <summary>
            Gets or sets thermocouple temperature type.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.Temperature">
            <summary>
            Gets or sets thermocouple value.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.CalculateTemperature">
            <summary>
            Calculates temperature.
            </summary>
            <returns>Thermocouple temperature.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.CalculateVoltage">
            <summary>
            Calculates voltage from temperature.
            </summary>
            <returns>Calculated voltage.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.GetTemperatureScale">
            <summary>
            Gets thermocouple temperature scale. See <see cref="T:Pickering.Lxi.Piplx.ThermocoupleTemperatureScales"/>.
            </summary>
            <returns>Thermocouple temperature scale.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.GetTemperatureType">
            <summary>
            Gets thermocouple temperature type. See <see cref="T:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes"/>.
            </summary>
            <returns>Thermocouple temperature type.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.SetTemperatureScale(Pickering.Lxi.Piplx.ThermocoupleTemperatureScales)">
            <summary>
            Sets thermocouple temperature scale. See <see cref="T:Pickering.Lxi.Piplx.ThermocoupleTemperatureScales"/>.
            </summary>
            <param name="value">Thermocouple temperature scale.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.SetTemperatureType(Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes)">
            <summary>
            Sets thermocouple temperature type. See <see cref="T:Pickering.Lxi.Piplx.ThermocoupleTemperatureTypes"/>.
            </summary>
            <param name="value">Thermocouple temperature type.  </param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.SetTemperature(System.Double)">
            <summary>
            Sets thermocouple temperature.
            </summary>
            <param name="temperature">Temperature to set.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ProgrammableVoltageSourceTemperatureExtension.#ctor(Pickering.Lxi.Piplx.ProgrammableVoltageSource)">
            <summary>
            Creates instance of ProgrammableVoltageSourceTemperatureExtension class.
            </summary>
            <param name="subunit"></param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.EventLog_SourceName">
            <summary>
              Looks up a localized string similar to Pickering .NET ClientBridge.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ParamName_card">
            <summary>
              Looks up a localized string similar to card.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.RegKey_SharedMemoryService">
            <summary>
              Looks up a localized string similar to SOFTWARE\Pickering Interfaces Ltd\ShMem.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.RegVal_CurrentExec">
            <summary>
              Looks up a localized string similar to CurrentExec.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.RegVal_PID">
            <summary>
              Looks up a localized string similar to PID.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.RegVal_State">
            <summary>
              Looks up a localized string similar to State.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorAttributeDisabled">
            <summary>
              Looks up a localized string similar to Attribute is disabled..
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadAction">
            <summary>
              Looks up a localized string similar to Action code out of range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadArray">
            <summary>
              Looks up a localized string similar to SafeArray type, shape or size is incorrect.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadAttenuation">
            <summary>
              Looks up a localized string similar to Attenuation value out-of-range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadAttribute">
            <summary>
              Looks up a localized string similar to Unrecognised attribute value..
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadAttributeCode">
            <summary>
              Looks up a localized string similar to Unrecognized attribute code.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadBit">
            <summary>
              Looks up a localized string similar to Bit-number out-of-range for target sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadCalibrationIndex">
            <summary>
              Looks up a localized string similar to Calibration index value out-of-range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadColumn">
            <summary>
              Looks up a localized string similar to Matrix column value out-of-range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadCurrent">
            <summary>
              Looks up a localized string similar to Current value out of range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadFloatPointFormat">
            <summary>
              Looks up a localized string similar to Unsupported internal floating-point format (internal error).
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadFunctionCode">
            <summary>
              Looks up a localized string similar to Function code value out of range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadLocation">
            <summary>
              Looks up a localized string similar to Cannot open a Pickering card at the specified location.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadMode">
            <summary>
              Looks up a localized string similar to Invalid mode value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadPole">
            <summary>
              Looks up a localized string similar to Switch pole value out-of-range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadPot">
            <summary>
              Looks up a localized string similar to Unrecognized pot number requested.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadRange">
            <summary>
              Looks up a localized string similar to Invalid range value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadRegister">
            <summary>
              Looks up a localized string similar to Register number out of range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadResistence">
            <summary>
              Looks up a localized string similar to Unobtainable resistance value.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadRow">
            <summary>
              Looks up a localized string similar to Matrix row value out-of-range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadSegment">
            <summary>
              Looks up a localized string similar to Segment number out of range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadStore">
            <summary>
              Looks up a localized string similar to Invalid calibration store number.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadSub">
            <summary>
              Looks up a localized string similar to Sub-unit value out-of-range for target card.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadSubSwitch">
            <summary>
              Looks up a localized string similar to Subswitch value out of range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBadVoltage">
            <summary>
              Looks up a localized string similar to Voltage value out-of-range.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorBufferUndersize">
            <summary>
              Looks up a localized string similar to Data buffer too small..
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorCardDisabled">
            <summary>
              Looks up a localized string similar to Specified card is disabled.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorCardInaccessible">
            <summary>
              Looks up a localized string similar to Card cannot be accessed (failed/removed/unpowered).
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorCardIsNotOpened">
            <summary>
              Looks up a localized string similar to Card is not open.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorCardOpennedOtherProcess">
            <summary>
              Looks up a localized string similar to Card is opened by a process in exclusive mode.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorCardType">
            <summary>
              Looks up a localized string similar to Function call incompatible with card type or capabilities.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorComparatorEngineRunning">
            <summary>
              Looks up a localized string similar to Comparator engine is running.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorDioDynamicActive">
            <summary>
              Looks up a localized string similar to DIO Dynamic operation is active, action not permissible.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorDioFileEntryErr">
            <summary>
              Looks up a localized string similar to DIO File Entry has error, check the file entries.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorDioInvalidFile">
            <summary>
              Looks up a localized string similar to DIO pattern file is invalid.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorDioPortDisabled">
            <summary>
              Looks up a localized string similar to DIO card PORT is disabled due Over-Current Sceranio.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorDriverOperation">
            <summary>
              Looks up a localized string similar to Hardware driver failure.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorDriverVersion">
            <summary>
              Looks up a localized string similar to Incompatible hardware driver version.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorExcessClosure">
            <summary>
              Looks up a localized string similar to Execution would cause closure limit to be exceeded.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorExecutionFail">
            <summary>
              Looks up a localized string similar to Failed to execute (e.g. blocked by a hardware condition).
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorHardwareFault">
            <summary>
              Looks up a localized string similar to Faulty hardware.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorHardwareInterlockError">
            <summary>
              Looks up a localized string similar to Hardware Interlock is not detected on the card, cannot use the function.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorHardwareInterlockNotSupported">
            <summary>
              Looks up a localized string similar to Hardware Interlock feature not supported for the card.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorIllegalMask">
            <summary>
              Looks up a localized string similar to One or more of the specified channels cannot be masked.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorIllegalOperation">
            <summary>
              Looks up a localized string similar to Operation is illegal in the sub-unit&apos;s current state.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorInconsistentAccessMode">
            <summary>
              Looks up a localized string similar to Inconsistent shared access mode..
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorInvalidPointer">
            <summary>
              Looks up a localized string similar to Invalid Pointer..
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorInvalidProcessId">
            <summary>
              Looks up a localized string similar to Invalid ProcessID.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorInvalidRange">
            <summary>
              Looks up a localized string similar to Range is not valid..
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorInvalidVisaResource">
            <summary>
              Looks up a localized string similar to Invalid VISA resource string.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorIsInLxiDevice">
            <summary>
              Looks up a localized string similar to The Client Bridge doesn&apos;t support direct access to the kernel driver of a local machine.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorMatrixIllegal">
            <summary>
              Looks up a localized string similar to Invalid write pattern for MATRIXR/MATRIXS sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorMatrixPIllegal">
            <summary>
              Looks up a localized string similar to Invalid channel closure or write pattern for pole-switched matrix sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorMemoryWriteTimeout">
            <summary>
              Looks up a localized string similar to Timeout writing to EEPROM.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorMissingCapability">
            <summary>
              Looks up a localized string similar to Attempted to activate a non-existent capability.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorMissingChannel">
            <summary>
              Looks up a localized string similar to Attempted operation on non-existent channel.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorMissingHardware">
            <summary>
              Looks up a localized string similar to Action requires hardware that is not present.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorMultiplexerIllegal">
            <summary>
              Looks up a localized string similar to Non-zero write data value is illegal for MUX sub-unit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorNoCalibrationData">
            <summary>
              Looks up a localized string similar to Target sub-unit has no calibration data to read/write.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorNoCard">
            <summary>
              Looks up a localized string similar to No Pickering card has the specified number.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorNoInfo">
            <summary>
              Looks up a localized string similar to Cannot obtain information for specified card.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorOutOfMemoryHeap">
            <summary>
              Looks up a localized string similar to Unable to allocate memory on Heap.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorOutputMasked">
            <summary>
              Looks up a localized string similar to Cannot activate an output that is masked.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorPipx40FunctionNotImplemented">
            <summary>
              Looks up a localized string similar to Pipx40 doesn&apos;t contain desired BIRST function..
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorPsuMainOutputDisabled">
            <summary>
              Looks up a localized string similar to Main output is disabled, cannot enable the channel.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorReadFail">
            <summary>
              Looks up a localized string similar to Failed read from hardware.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorReadOnlyAttribute">
            <summary>
              Looks up a localized string similar to Attribute is read-only.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorSetMeasureSetChannelEnable">
            <summary>
              Looks up a localized string similar to Channel is disabled, so Set/Measure/Set cannot be used.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorSettingsConflict">
            <summary>
              Looks up a localized string similar to Conflicting device settings.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorSharedMemoryErr">
            <summary>
              Looks up a localized string similar to Shared memory error.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorStateCorrupt">
            <summary>
              Looks up a localized string similar to Cannot execute due to corrupt sub-unit state.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorSubtype">
            <summary>
              Looks up a localized string similar to Function call incompatible with sub-unit type or capabilities.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorSubunitNotSupported">
            <summary>
              Looks up a localized string similar to Sub-unit type is not supported by the driver.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorUncalibrated">
            <summary>
              Looks up a localized string similar to Sub-unit is not calibrated.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorUnknownError">
            <summary>
              Looks up a localized string similar to Unknown error.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorUnobtainableResistance">
            <summary>
              Looks up a localized string similar to Unobtainable resistance value..
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorUnsupportedAttribute">
            <summary>
              Looks up a localized string similar to Attribute not supported.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorUnusableVisaResource">
            <summary>
              Looks up a localized string similar to Visa resource string cannot be used - there&apos;s no card with specified bus/device.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResErrorWriteFail">
            <summary>
              Looks up a localized string similar to Failed write to hardware.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResNoError">
            <summary>
              Looks up a localized string similar to Success.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Properties.Resources.ResPirmlLibraryNotPresent">
            <summary>
              Looks up a localized string similar to Pirml library is not in system..
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.PxiAccessType">
            <summary>
            Describes supported access types for PXI/PCI access. 
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PxiAccessType.None">
            <summary>
            Default access. 
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PxiAccessType.Pipx40Access">
            <summary>
            Use VISA (pipx40_32.dll) library to control PXI/PCI cards.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.PxiAccessType.PilpxiAccess">
            <summary>
            Use direct I/O (pilpxi.dll) library to control PXI/PCI cards.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.RadioMatrixSubunit">
            <summary>
            Class representing RF Matrix subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.RadioMatrixSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the RadioMatrixSubunit class, which represents the physical subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ResistanceSettingMode">
            <summary>
            The resistance setting mode. A value indicating how the given 
            resistance value is to be applied. Only one mode is currently 
            supported.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistanceSettingMode.SpecifiedValue">
            <summary>
            Set resistance to the specified value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistanceSettingMode.MakeBeforeBreak">
            <summary>
            Mode to support make before break with settling delay.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistanceSettingMode.ApplyPattern">
            <summary>
            Apply new pattern immediately and wait till settling delay.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistanceSettingMode.NoSettling">
            <summary>
            Disable settling delay. This mode is same as DriverMode NO_WAIT, but at sub-unit level.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistanceSettingMode.CalculateOnly">
            <summary>
            Do the calculations but don't set the card.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistanceSettingMode.ModesEnd">
            <summary>
            End mark for resistance modes.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ResistorCapabilities">
            <summary>
            Resistor capability flags.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistorCapabilities.None">
            <summary>
            No special capabilities.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistorCapabilities.PrecisionResistor">
            <summary>
            Precision resistor.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistorCapabilities.ZeroOhms">
            <summary>
            Supports setting "zero ohms".
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistorCapabilities.OpenCiruit">
            <summary>
            Supports setting "open-circuit" (infinity).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistorCapabilities.RefrenceCalibrationValue">
            <summary>
            Supports reference calibration value.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ResistorSubunit">
            <summary>
            Class representing Programmable resistor subunit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistorSubunit.bitsCount">
            <summary>
            Number of bits.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistorSubunit.closureLimit">
            <summary>
            Closure limit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ResistorSubunit.settleTime">
            <summary>
            Settling time.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ResistorSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the ResistorSubunit class, which represents the 
            physical subunit on the specified card.
            </summary>
            <param name="baseCard">Base card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ResistorSubunit.BitsCount">
            <summary>
            Obtains the number of bits, each bit 
            represents a switch in sub-unit's resistor chain.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ResistorSubunit.ClosureLimit">
            <summary>
            Obtains the maximum number of switches that may be 
            activated simultaneously in the specified sub-unit. A 
            single-channel multiplexer (MUX type) allows only one 
            channel to be closed at any time. In some other models 
            such as high-density matrix types a limit is imposed to 
            prevent overheating; although it is possible to disable 
            the limit for these types (see 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>)
            , doing so is not recommended.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ResistorSubunit.SettleTime">
            <summary>
            Obtains a sub-unit's settling time (the period taken for 
            its switches to stabilise). By default, Piplx driver 
            functions retain control during this period so that 
            switches are guaranteed to have stabilised on completion.
            This mode of operation can be overridden if required - 
            see <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ResistorSubunit.ReadCalibration(System.Int32)">
            <summary>
            Reads an integer calibration value from on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            <para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            <para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            <para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.ResistorSubunit.WriteCalibration(System.Int32,System.Int32)"/>
            </remarks>
            <param name="index">Calibration value index number.</param>
            <returns>The result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ResistorSubunit.WriteCalibration(System.Int32,System.Int32)">
            <summary>
            Writes an integer calibration value to on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            <para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            <para>The number of bits actually stored is specific to 
            the target sub-unit - any redundant high-order bits of 
            the supplied Data value are ignored.</para>
            <para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            <para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.ResistorSubunit.ReadCalibration(System.Int32)"/>
            </remarks>
            <param name="index">Calibration value index number.</param>
            <param name="data">The value to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ResistorSubunit.ClearSubunit">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of
            a sub-unit.
            </summary>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ResistorSubunit.OperateBit(System.Int32,System.Boolean)">
            <summary>
            Operate a single output channel or bit.
            <para>Note that in the case of a single-channel 
            multiplexer (MUX type) any existing channel closure will 
            be cleared automatically prior to selecting the new 
            channel.</para>
            <para>Note that 
            <see cref="M:Pickering.Lxi.Piplx.GeneralMatrixSubunit.OperateCrosspoint(System.Int32,System.Int32,System.Boolean)"/> 
            allows more straightforward use of row/column 
            co-ordinates with matrix sub-units.</para>
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <param name="action">1 to energise, 0 to de-energise.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ResistorSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ResistorSubunit.ViewBit(System.Int32)">
            <summary>
            Obtains the state of an individual output.
            </summary>
            <param name="bitNumber">Output bit number.</param>
            <returns>Result, 0 = OFF or logic '0', 
            1 = ON or logic '1'.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ResistorSubunit.ViewSubunit">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <returns>One-dimensional array (vector) containing 
            the result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ResistorSubunit.WriteSubunit(System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            <para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            <para><b>Example Code</b></para>
            For clarity, this example omits initialising the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 ints
            supports sub-units having upto 64 switches) */
            int[] data = new int[2]; /* Value specifies the number 
            of array elements */
            
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            
            /* Setup array data to turn on switches 3, 33 and output 
            to the card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... now have switches 3, 4, 33 energised */
            
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... leaving switches 3 and 4 energised */
            </code>
            </remarks>
            <param name="data">One-dimensional array (vector) 
            containing the bit-pattern to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ISelfAlignedMatrixSubunit">
            <summary>
            Interface for SelfAlignedMatrixSubunit class, which represents Self Aligning Matrix subunit.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.SelfAligningMatrixSubunit">
            <summary>
            Class representing Self Aligning Matrix subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SelfAligningMatrixSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates the SelfAlignedMatrixSubunit class, which represents the physical subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="rows">Number of rows.</param>
            <param name="columns">Number of columns.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.SubAttributeCode">
            <summary>
            Enumeration for Sub-unit Attribute Codes. This enumeration is used 
            by SubAttribute function.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.ChannelSubswitches">
            <summary>
            Gets number of sub-switches per logical channel (matrix crosspoint).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XIsoSubswitches">
            <summary>
            Gets number of sub-switches per logical X-isolator.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.YIsoSubswitches">
            <summary>
            Gets number of sub-switches per logical Y-isolator.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XLoopthruSubswitches">
            <summary>
            Gets number of sub-switches per logical X-loopthru.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.YLoopthruSubswitches">
            <summary>
            Gets number of sub-switches per logical Y-loopthru.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.MatrixPTopology">
            <summary>
            Gets a code representing MATRIXP topology.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.NumberXSegments">
            <summary>
            Gets number of X-axis segments.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment01Size">
            <summary>
            Gets size of X-axis segment 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment02Size">
            <summary>
            Gets size of X-axis segment 2.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment03Size">
            <summary>
            Gets size of X-axis segment 3.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment04Size">
            <summary>
            Gets size of X-axis segment 4.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment05Size">
            <summary>
            Gets size of X-axis segment 5.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment06Size">
            <summary>
            Gets size of X-axis segment 6.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment07Size">
            <summary>
            Gets size of X-axis segment 7.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment08Size">
            <summary>
            Gets size of X-axis segment 8.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment09Size">
            <summary>
            Gets size of X-axis segment 9.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment10Size">
            <summary>
            Gets size of X-axis segment 10.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment11Size">
            <summary>
            Gets size of X-axis segment 11.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment12Size">
            <summary>
            Gets size of X-axis segment 12.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment13Size">
            <summary>
            Gets size of X-axis segment 13.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment14Size">
            <summary>
            Gets size of X-axis segment 14.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment15Size">
            <summary>
            Gets size of X-axis segment 15.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment16Size">
            <summary>
            Gets size of X-axis segment 16.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment17Size">
            <summary>
            Gets size of X-axis segment 17.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment18Size">
            <summary>
            Gets size of X-axis segment 18.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment19Size">
            <summary>
            Gets size of X-axis segment 19.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment20Size">
            <summary>
            Gets size of X-axis segment 20.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment21Size">
            <summary>
            Gets size of X-axis segment 21.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment22Size">
            <summary>
            Gets size of X-axis segment 22.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment23Size">
            <summary>
            Gets size of X-axis segment 23.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.XSegment24Size">
            <summary>
            Gets size of X-axis segment 24.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.NumberYSegments">
            <summary>
            Gets number of Y-axis segments.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.YSegment01Size">
            <summary>
            Gets size of Y-axis segment 1.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubAttributeCode.YSegment02Size">
            <summary>
            Gets size of Y-axis segment 2.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.SubStatus">
            <summary>
            Subunit status code flags.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.NoCard">
            <summary>
            No card with specified number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.WrongDriver">
            <summary>
            Card requires newer driver.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.EepromError">
            <summary>
            Card EEPROM fault.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.Disabled">
            <summary>
            Card disabled.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.NoSubunit">
            <summary>
            No sub-unit with specified number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.Busy">
            <summary>
            Sub-unit operations not completed.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.HardwareFault">
            <summary>
            Card hardware defect.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.ParityError">
            <summary>
            PCI bus parity error.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.PowerSupplyInhibited">
            <summary>
            Power supply output is disabled - by software.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.PowerSupplyShutdown">
            <summary>
            Power supply output is shutdown - due to overload.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.PowerSupplyCurrentLimit">
            <summary>
            Power supply is operating in current-limited mode.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.Corrupted">
            <summary>
            Sub-unit logical state is corrupted.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.CardInaccessible">
            <summary>
            Card cannot be accessed - failed/removed/unpowered.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.Uncalibrated">
            <summary>
            Sub-unit is uncalibrated.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.CalibrationDue">
            <summary>
            Sub-unit is due for calibration.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.Ok">
            <summary>
            Sub-unit is functional and stable.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubStatus.BirstEnabled">
            <summary>
            BIRST is active (card or sub-unit).
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ISubunit">
            <summary>
            Interface for abstract class Subunit, which is parent class of 
            each subunit.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ISubunit.Card">
            <summary>
            Obtains owner of this class.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ISubunit.IsOutput">
            <summary>
            Obtains information if the subunit is an output.
            </summary>
            <returns>True - subunit is output; False - subunit is input.
            </returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.ISubunit.Status">
            <summary>
            Obtains subunit status.
            </summary>
            <returns>The sub-unit's status flags.</returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ISubunit.Capabilities">
            <summary>
            Obtains subunit capabilities.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ISubunit.SubunitNumber">
            <summary>
            Obtains the sub-unit number.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ISubunit.SubunitType">
            <summary>
            Obtains the sub-unit type.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.Subunit">
            <summary>
            Abstract class, which is parent class of each subunit.
            </summary>    
        </member>
        <member name="F:Pickering.Lxi.Piplx.Subunit.card">
            <summary>
            Piplx card, which is owner of this sub-unit.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Subunit.isOut">
            <summary>
            Internal variable, which stores information if sub-unit is an output 
            or not.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Subunit.subNumber">
            <summary>
            Internal variable, which stores sub-unit's number.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.Subunit.subunitType">
            <summary>
            Internal variable, which stores sub-unit's type code.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Subunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,Pickering.Lxi.Piplx.SubunitType,System.Boolean)">
            <summary>
            Constructor creates a specific sub-unit.
            </summary>
            <param name="baseCard">BaseCard.</param>
            <param name="subunitNumber">Sub-unit's number.</param>
            <param name="subunitType">Sub-unit's type code.</param>
            <param name="isOutput">Sub-unit's output/input status.</param>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Subunit.Capabilities">
            <summary>
            Obtains the subunit capabilities <see cref="T:Pickering.Lxi.Piplx.OutputSubunitCapabilities" />.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Subunit.SubunitNumber">
            <summary>
            Obtains the sub-unit number.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Subunit.IsOutput">
            <summary>
            Obtains information if the sub-unit is an output.
            </summary>
            <returns>True - subunit is output; False - subunit is input.
            </returns>
        </member>
        <member name="P:Pickering.Lxi.Piplx.Subunit.SubunitType">
            <summary>
            Obtains the sub-unit type.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Subunit.GetOriginalTypeCode(Pickering.Lxi.Piplx.SubunitType,System.Boolean)">
            <summary>Obtains sub-unit's type code as defined in kernel driver.</summary>
            <param name="subunitType">The sub-unit number.</param>
            <param name="isOutput">Specify the output or input sub-unit.</param>
            <returns>Sub-unit's type code as defined in kernel driver.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Subunit.Status">
            <summary>
            Obtains subunit status.
            </summary>
            <returns>The sub-unit's status flags.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>        
        </member>
        <member name="P:Pickering.Lxi.Piplx.Subunit.Card">
            <summary>
            Obtains owner of this class.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Subunit.GetEmptySubunitBitPattern(System.Int32)">
            <summary>
            Obtains correctly allocated size of sub-unit.
            </summary>
            <param name="bitsCount">Number of sub-unit's bits.</param>
            <returns>Prepared empty array.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Subunit.BitsToBooleanArray(System.Int32[],System.Int32)">
            <summary>
            Converst bit pattern of the sub-unit to array of System.Boolean.
            </summary>
            <param name="data">Sub-unit bit pattern.</param>
            <param name="bitsCount">Number of valid bits.</param>
            <returns>Array values where 'true' represents '1' and 'false' represents '0' of sub-unit bit pattern.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.Subunit.BooleanArrayToBits(System.Boolean[])">
            <summary>
            Converts array to sub-unit bit pattern.
            </summary>
            <param name="data">Array of values.</param>
            <returns>Sub-unit bit pattern.</returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ISubunitExtension`1">
            <summary>
            Interface for abstract <see cref="T:Pickering.Lxi.Piplx.SubunitExtension`1"/> class.
            </summary>
            <typeparam name="ISubunitType">Subunit type.</typeparam>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ISubunitExtension`1.Card">
            <summary>
            Gets card to belongs the subunit extension.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.ISubunitExtension`1.Subunit">
            <summary>
            Gets subunit to belongs this extension.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.SubunitExtension`1">
            <summary>
            Base extension class for any <see cref="P:Pickering.Lxi.Piplx.SubunitExtension`1.Subunit"/> classes.
            </summary>
            <typeparam name="TSubunitType">Subunit type.</typeparam>
        </member>
        <member name="P:Pickering.Lxi.Piplx.SubunitExtension`1.Card">
            <summary>
            Gets card to belongs the subunit extension.
            </summary>
        </member>
        <member name="P:Pickering.Lxi.Piplx.SubunitExtension`1.Subunit">
            <summary>
            Gets subunit to belongs this extension.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitExtension`1.#ctor(`0)">
            <summary>
            Creates instance of SubunitExtension class.
            </summary>
            <param name="subunit"></param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.SubunitFunctions">
            <summary>
            Class, which contains functions used in several different 
            sub-unit classes.
            </summary> 
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ReadCalibration(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Reads an integer calibration value from on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            <para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            <para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            <para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.ResistorSubunit.WriteCalibration(System.Int32,System.Int32)"/>
            </remarks>
            <param name="card">class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="index">Calibration value index number.</param>
            <returns>The result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.WriteCalibration(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an integer calibration value to on-card EEPROM.
            </summary>
            <remarks>
            <para>This function is usable only with sub-units that 
            support integer calibration data.</para>
            <para>The driver places no interpretation on the value 
            obtained - an application program can utilise it in any 
            way it wishes.</para>
            <para>The number of bits actually stored is specific to 
            the target sub-unit - any redundant high-order bits of 
            the supplied Data value are ignored.</para>
            <para>For programmable resistors, the valid range of 
            'index' values corresponds to the number of bits, i.e. to 
            the range of output bit number values. A 16-bit resistor 
            sub-unit therefore supports 16 x 16-bit values.</para>
            <para>The storage capacity of other types supporting this 
            feature is determined by their functionality.</para>
            <para><b>Related functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.ResistorSubunit.ReadCalibration(System.Int32)"/>
            </remarks>
            <param name="card">class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="index">Calibration value index number.</param>
            <param name="data">The value to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.MaskCrosspoint(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single matrix crosspoint.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> functions.
            <para>This facility can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            This function supports matrix operation using 
            row/column co-ordinates in place of the linearized 
            bit-number method employed by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.MaskBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoitn column (X) location.</param>
            <param name="action">Mask - true, unmask - false.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.OperateCrosspoint(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Operate a single matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number 
            method employed by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is 
            replaced by one having different dimensions.
            <para><b>Related Matrix Functions</b></para>
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.MaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewMaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean@)"/>
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="action">true to energise, false to de-energise.
            </param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ViewCrosspoint(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32)">
            <summary>
            Obtains the state of an individual matrix crosspoint.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number method 
            employed by <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewBit(System.Int32,System.Int32,System.Int32,System.Boolean@)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is replaced
            by one having different dimensions.
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <returns>The result (0 = OFF, 1 = ON).</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ViewMask(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Obtains the switch mask of a sub-unit. The result fills 
            the number of least significant bits corresponding to the 
            size of the sub-unit.
            </summary>
            <remarks>
            For a Matrix sub-unit, the result is folded into the 
            vector on its row-axis.
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to 
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            <para><b>Example code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitsCount">The number of bits on the sub-unit.</param>
            <returns>The one-dimensional array (vector) as the result.
            </returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.GetEmptySubunit(System.Int32)">
            <summary>
            Obtains correctly allocated size of sub-unit.
            </summary>
            <param name="bitsCount">Number of sub-unit's bits.</param>
            <returns>Prepared empty array.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ViewMaskBit(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Obtains the state of an individual output's mask.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Output bit number.</param>
            <returns>The result (false = unmasked, true = masked).</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ViewMaskCrosspoint(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32)">
            <summary>
            Obtains the state of an individual matrix crosspoint's mask.
            </summary>
            <remarks>
            This function supports matrix operation using row/column 
            co-ordinates in place of the linearized bit-number method 
            employed by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewMaskBit(System.Int32,System.Int32,System.Int32,System.Boolean@)"/>. 
            It offers more straightforward matrix operation, and 
            avoids the need for re-coding if a matrix card is replaced 
            by one having different dimensions.
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <returns>The result (false = unmasked, true = masked).</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.WriteMask(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32[])">
            <summary>
            Sets a sub-unit's switch mask to the supplied bit-pattern
            . The number of least significant bits corresponding to 
            the size of the sub-unit are written into the mask. A 
            'true' bit in the mask disables the corresponding switch 
            for the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            and 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> 
            functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external circuits.</para>
            </summary>
            <remarks>
            For a Matrix sub-unit, the mask data is folded into the 
            vector on its row-axis.
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to 
            represent the mask pattern for the specified sub-unit, or 
            undefined data will be written to the more significant 
            bits.
            <para><b>Example Code</b></para>
            See the description of 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> 
            for example code using an array-based function.
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">The one-dimensional array (vector) 
            containing the mask pattern to be set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ClearSubunit(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Clears (de-energises or sets to logic '0') all outputs of 
            a sub-unit.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.OperateBit(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Operate a single output channel or bit.
            <para>Note that in the case of a single-channel 
            multiplexer (MUX type) any existing channel closure will 
            be cleared automatically prior to selecting the new 
            channel.</para>
            <para>Note that 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            allows more straightforward use of row/column 
            co-ordinates with matrix sub-units.</para>
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="action">true to energise, false to 
            de-energise.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ViewBit(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Obtains the state of an individual input or output.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit is output / input.</param>
            <param name="bitNumber">Bit number.</param>
            <returns>State: OFF(false), ON(true).</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ViewSubunit(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Obtains the state of all outputs of a sub-unit. The 
            result fills the number of least significant bits 
            corresponding to the size of the sub-unit.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the result is folded into 
            the vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            The data array pointed to must contain sufficient bits to
            hold the bit-pattern for the specified sub-unit, or 
            adjacent memory will be overwritten, causing data 
            corruption and/or a program crash.
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit is output / input.</param>
            <param name="bitsCount">The number of bits on the sub-unit.</param>
            <returns>One-dimensional array (vector) as result.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.WriteSubunit(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32[])">
            <summary>
            Sets all outputs of a sub-unit to the supplied 
            bit-pattern. The number of least significant bits 
            corresponding to the size of the sub-unit are written.
            </summary>
            <remarks>
            <para>For a Matrix sub-unit, the data is folded into the
            vector on its row-axis.</para>
            <para><b>Warning:</b></para>
            <para>The data array pointed to must contain sufficient 
            bits to represent the bit-pattern for the specified 
            sub-unit, or undefined data will be written to the more 
            significant bits.</para>
            <para><b>Example Code</b></para>
            For clarity, this example omits initialising the 
            variables cardNumber, outputSubunit etc. and does no 
            error-checking.
            <code>
            /* Dimension an int data array to contain the number of 
            bits necessary to represent the sub-unit (e.g. 2 ints
            supports sub-units having upto 64 switches) */
            int[] data = new int[2]; 
            /* Value specifies the number of array elements */
            
            /* data[0] bit 0 represents switch #1
            data[0] bit 1 represents switch #2
            ... etc.
            data[0] bit 31 represents switch #SUBUNIT_SIZE
            data[1] bit 0 represents switch #33
            ... etc. */
            
            /* Setup array data to turn on switches 3, 33 and output to 
            the card */
            data[0] = 0x00000004; /* set int 0 bit 2 (switch 3) */
            data[1] = 0x00000001; /* set int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            
            /* Add switch 4 to the array and output to the card */
            data[0] |= 0x00000008; /* set int 0 bit 3 (switch 4) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... now have switches 3, 4, 33 energised */
            
            /* Delete switch 33 from the array and output to the card */
            data[1] &amp;&#61; 0xFFFFFFFE; /* clear int 1 bit 0 (switch 33) */
            WriteSub(cardNumber, outputSubunit, data);
            /* ... leaving switches 3 and 4 energised */
            </code>
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="data">One-dimensional array (vector) 
            containing the bit-pattern to be written.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ClearMask(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Clears a sub-unit's switch mask, enabling operation of 
            all outputs by the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            and 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/>
            functions.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.MaskBit(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Mask or unmask a single output bit.
            Masking disables the corresponding switch for the 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            and 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/> functions.
            <para>This facility is particularly useful for matrix 
            sub-units, where it can be used to guard against 
            programming errors that could otherwise result in damage 
            to matrix switches or external 
            circuits. Note that 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.MaskCrosspoint(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)"/> 
            allows more straightforward use of row/column co-ordinates 
            with matrices.</para>
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="action">True - mask, false - unmask.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.SettleTime(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Obtains a sub-unit's settling time (the period taken for 
            its switches to stabilise). By default, Piplx driver 
            functions retain control during this period so that 
            switches are guaranteed to have stabilised on completion.
            This mode of operation can be overridden if required - 
            see <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <returns>Settle time.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ClosureLimit(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Obtains the maximum number of switches that may be 
            activated simultaneously in the specified sub-unit. A 
            single-channel multiplexer (MUX type) allows only one 
            channel to be closed at any time. In some other models 
            such as high-density matrix types a limit is imposed to 
            prevent overheating; although it is possible to disable 
            the limit for these types (see 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SetMode(Pickering.Lxi.Piplx.Modes)"/>)
            , doing so is not recommended.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <returns>Closure limit.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.SubAttribute(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Boolean,Pickering.Lxi.Piplx.SubAttributeCode)">
            <summary>
            Obtains the value of a sub-unit attribute. These values
            facilitate operation using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateSwitch(System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction,System.Boolean@)"/>.
            </summary>
            <remarks>
            <b>AttributeCode values</b>
            <para>
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>1</td>
            <td>SUB_ATTR_CHANNEL_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical channel 
            (matrix crosspoint)</td>
            </tr>
            <tr>
            <td>2</td>
            <td>SUB_ATTR_X_ISO_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical X-isolator</td>
            </tr>
            <tr>
            <td>3</td>
            <td>SUB_ATTR_Y_ISO_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical Y-isolator</td>
            </tr>
            <tr>
            <td>4</td>
            <td>SUB_ATTR_X_LOOPTHRU_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical X-loopthru</td>
            </tr>
            <tr>
            <td>5</td>
            <td>SUB_ATTR_Y_LOOPTHRU_SUBSWITCHES</td>
            <td>Gets number of subswitches per logical Y-loopthru</td>
            </tr>
            <tr>
            <td>0x100</td>
            <td>SUB_ATTR_NUM_X_SEGMENTS</td>
            <td>Gets number of X-axis segments</td>
            </tr>
            <tr>
            <td>0x101</td>
            <td>SUB_ATTR_X_SEGMENT01_SIZE</td>
            <td>Gets size of X-axis segment 1</td>
            </tr>
            <tr>
            <td>0x102</td>
            <td>SUB_ATTR_X_SEGMENT02_SIZE</td>
            <td>Gets size of X-axis segment 2</td>
            </tr>
            <tr>
            <td>0x103</td>
            <td>SUB_ATTR_X_SEGMENT03_SIZE</td>
            <td>Gets size of X-axis segment 3</td>
            </tr>
            <tr>
            <td>0x104</td>
            <td>SUB_ATTR_X_SEGMENT04_SIZE</td>
            <td>Gets size of X-axis segment 4</td>
            </tr>
            <tr>
            <td>0x105</td>
            <td>SUB_ATTR_X_SEGMENT05_SIZE</td>
            <td>Gets size of X-axis segment 5</td>
            </tr>
            <tr>
            <td>0x106</td>
            <td>SUB_ATTR_X_SEGMENT06_SIZE</td>
            <td>Gets size of X-axis segment 6</td>
            </tr>
            <tr>
            <td>0x107</td>
            <td>SUB_ATTR_X_SEGMENT07_SIZE</td>
            <td>Gets size of X-axis segment 7</td>
            </tr>
            <tr>
            <td>0x108</td>
            <td>SUB_ATTR_X_SEGMENT08_SIZE</td>
            <td>Gets size of X-axis segment 8</td>
            </tr>
            <tr>
            <td>0x109</td>
            <td>SUB_ATTR_X_SEGMENT09_SIZE</td>
            <td>Gets size of X-axis segment 9</td>
            </tr>
            <tr>
            <td>0x10A</td>
            <td>SUB_ATTR_X_SEGMENT10_SIZE</td>
            <td>Gets size of X-axis segment 10</td>
            </tr>
            <tr>
            <td>0x10B</td>
            <td>SUB_ATTR_X_SEGMENT11_SIZE</td>
            <td>Gets size of X-axis segment 11</td>
            </tr>
            <tr>
            <td>0x10C</td>
            <td>SUB_ATTR_X_SEGMENT12_SIZE</td>
            <td>Gets size of X-axis segment 12</td>
            </tr>
            <tr>
            <td>0x200</td>
            <td>SUB_ATTR_NUM_Y_SEGMENTS</td>
            <td>Gets number of Y-axis segments</td>
            </tr>
            <tr>
            <td>0x201</td>
            <td>SUB_ATTR_Y_SEGMENT01_SIZE</td>
            <td>Gets size of y-axis segment 1</td>
            </tr>
            <tr>
            <td>0x202</td>
            <td>SUB_ATTR_Y_SEGMENT02_SIZE</td>
            <td>Gets size of y-axis segment 2</td>
            </tr>
            </table>
            </div>
            </para>
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Output(true) or input (false) 
            sub-unit function.</param>
            <param name="attributeCode">Attribute code.</param>
            <returns>Attribute values.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.OperateSwitch(Pickering.Lxi.Piplx.PiplxCard,System.Int32,Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction,System.Boolean@)">
            <summary>
            This function obtains, and optionally sets, the state of 
            a switch. It allows explicit access to the individual 
            switches making up a sub-unit, in types where their 
            operation is normally handled automatically by the 
            driver. The main purpose of this is in implementing fault
            diagnostic programs for such types; it can also be used 
            where normal automated behaviour does not suit an 
            application.
            </summary>
            <remarks>
            <para><b>Applicable sub-unit types</b></para>
            This function is only usable with matrix sub-units having 
            auto-isolation and/or auto-loopthru features. For further 
            information see: segmented matrix, unsegmented matrix in 
            documentation.
            <para><b>SwitchFunction value</b></para>
            A value indicating the functional group of the switch to
            be accessed.
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>SW_FUNC_CHANNEL</td>
            <td>A channel (matrix crosspoint) switch</td>
            </tr>
            <tr>
            <td>1</td>
            <td>SW_FUNC_X_ISO</td>
            <td>A matrix X-isolation switch</td>
            </tr>
            <tr>
            <td>2</td>
            <td>SW_FUNC_Y_ISO</td>
            <td>A matrix Y-isolation switch</td>
            </tr>
            <tr>
            <td>3</td>
            <td>SW_FUNC_X_LOOPTHRU</td>
            <td>A matrix X-loopthru switch</td>
            </tr>
            <tr>
            <td>4</td>
            <td>SW_FUNC_Y_LOOPTHRU</td>
            <td>A matrix Y-loopthru switch</td>
            </tr>
            </table>
            </div>
            <para><b>SegmentNumber value</b></para>
            The number of the switch in its functional group (unity-based).
            <para>For channel (crosspoint) switches, the switch 
            number can be either:</para>
            <list type="bullet">
            <item>if SegNum is zero, the global channel number of 
            the switch (see output bit number)</item>
            <item>if SegNum is non-zero, the segment-local number 
            of the switch, calculated in a similar way to the above</item>
            </list>
            <para><b>SubSwitch value</b></para>
            The number of the subswitch to operate (unity-based). This 
            parameter caters for a situation in which a logical 
            channel, isolation or loopthru switch is served by more 
            than one physical relay (as for example when 2-pole 
            operation is implemented using independently-driven 
            single-pole relays).
            <para>The numbers of subswitches for each functional group 
            can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SubAttribute(System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32@)"/>.</para>
            <para><b>SwitchAction value</b></para>
            A code indicating the action to be performed.
            <div class="tablediv">
            <table border="1" cellpadding="6" cellspacing="0">
            <tr align="left">
            <th>Value</th>
            <th>Ident</th>
            <th>Function</th>
            </tr>
            <tr>
            <td>0</td>
            <td>SW_ACT_NONE</td>
            <td>No switch change - just set State result</td>
            </tr>
            <tr>
            <td>1</td>
            <td>SW_ACT_OPEN</td>
            <td>Open switchh</td>
            </tr>
            <tr>
            <td>2</td>
            <td>SW_ACT_CLOSE</td>
            <td>Close switch</td>
            </tr>
            </table>
            </div>
            <para><b>Loopthru switches</b></para>
            Loopthru switches are initialised by the driver to a 
            <b>closed</b> state, which may mean that they are either 
            energised or de-energised depending upon their type. In 
            normal automated operation loopthru switches open when 
            any crosspoint on their associated line is closed. 
            Actions SW_ACT_CLOSE and SW_ACT_OPEN close or open 
            loopthru switch contacts as their names imply.
            <para><b>Operational considerations</b></para>
            This function can be used to alter a pre-existing 
            switch state in a sub-unit, set up by fuctions such as 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>
            or <see cref="M:Pickering.Lxi.Piplx.PiplxManager.WriteSub(System.Int32,System.Int32,System.Int32[])"/>. 
            However once the state of any switch is changed by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateSwitch(System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchFunction,System.Int32,System.Int32,System.Int32,Pickering.Lxi.Piplx.SwitchAction,System.Boolean@)"/> 
            the logical state of the sub-unit is considered to have 
            been destroyed. This condition is flagged in the result 
            of <see cref="M:Pickering.Lxi.Piplx.PiplxManager.SubStatus(System.Int32,System.Int32)"/> 
            (bit STAT_CORRUPTED). Subsequent attempts to operate it 
            using 'ordinary' switch functions such as 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.OperateBit(System.Int32,System.Int32,System.Int32,System.Boolean)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ViewBit(System.Int32,System.Int32,System.Int32,System.Boolean@)"/> 
            etc. will fail (result ER_STATE_CORRUPT). Normal operation 
            can be restored by clearing the sub-unit using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ClearSub(System.Int32,System.Int32)"/>, 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ClearCard(System.Int32)"/> or 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.ClearAll"/>.
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="switchFunction">Code indicating the 
            functional group of the switch.</param>
            <param name="segmentNumber">The segment location of the 
            switch.</param>
            <param name="switchNumber">The number of the switch in its 
            functional group (unity-based).</param>
            <param name="subSwitch">The number of the subswitch to 
            operate (unity-based).</param>
            <param name="switchAction">Code indicating the action to 
            be performed.</param>
            <param name="state">The state of the switch (after 
            performing any action) is returned by reference.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">
            Thrown when driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.MaskBits(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Masks or unmasks bits specified in array of indexes.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumbers">Numbers of bits to be masked or 
            unmasked.</param>
            <param name="state">True - to mask, false - to unmask.</param>
            <param name="bitsCount">The number of bits on the sub-unit.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.OperateBits(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32[],System.Boolean,System.Int32)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            <param name="bitsCount">The number of bits on the sub-unit.</param>
            de-energise.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ViewSubunitByBits(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Reads the specified sub-unit and returns an array of 
            selected bit indexes.
            </summary>
            <param name="card">Piplx card class reference which this
            sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="output">Sub-unit is output / input.</param>
            <param name="bitsCount">The number of bits on the sub-unit.</param>
            <returns>Array of bit indexes</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.ViewMaskByBits(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Reads the mask of the specified sub-unit and returns an 
            array of masked bit indexes.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">The number of bits on the sub-unit.</param>
            <returns>Array of bit indexes</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.GetSelectedBit(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Obtains the index of selected bit from 
            Multiplexer sub-unit.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Output sub-unit number.</param>
            <param name="bitsCount">Number of bits on the sub-unit.</param>
            <returns>Index of selected bit. Returns -1 if no bit is 
            selected.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.BitToCrosspoint(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Converts bit number to column and row location.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitNumber">Bit number.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="columnsCount">The number of columns on the sub-unit.
            </param>
            <param name="rowsCount">The number of rows on the sub-unit.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.CrosspointToBit(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts column and row location to bit number.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="column">Crosspoint column (X) location.</param>
            <param name="row">Crosspoint row (Y) location.</param>
            <param name="columnsCount">The number of columns on the sub-unit.
            </param>
            <param name="rowsCount">The number of rows on the sub-unit.</param>
            <returns>Bit number.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.BitsToBooleanArray(System.Int32[],System.Int32)">
            <summary>
            Converst bit pattern of the sub-unit to array of System.Boolean.
            </summary>
            <param name="data">Sub-unit bit pattern.</param>
            <param name="bitsCount">Number of valid bits.</param>
            <returns>Array values where 'true' represents '1' and 'false' represents '0' of sub-unit bit pattern.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.BooleanArrayToBits(System.Boolean[])">
            <summary>
            Converts array to sub-unit bit pattern.
            </summary>
            <param name="data">Array of values.</param>
            <returns>Sub-unit bit pattern.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.GetSizeInBytes``1(``0)">
            <summary>
            Returns size in bytes of specified object.
            </summary>
            <typeparam name="T">
            Data type of the given object. Can be primitive types or arrays of primitive types.
            </typeparam>
            <param name="obj">The object.</param>
            <returns>Size in bytes of specified object.</returns>
            <exception cref="T:System.NotSupportedException">
            Thwown if specified object is not a primitive type or array of primitive type.
            </exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.VsourceGetEnable(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Obtains the output enable pattern of voltage source 
            sub-units, as set by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceSetEnable(System.Int32,System.Int32,System.Int32)"/>.
            </summary>
            <remarks><para><b>Notes:</b></para>
            When outputSubunit corresponds to a sub-unit, the function 
            gets the output enable state of that sub-unit alone in 
            the least significant bit of pattern (0 = OFF, 1 = ON).
            <para>If outputSubunit = 0 (VSOURCE_ALL_VSOURCE_SUB_UNITS), 
            enable states of all the card's sub-units are obtained; 
            bits in pattern are assigned in ascending order of 
            sub-unit, i.e.
            <list type="bullet">
            <item>Pattern bit 0 = enable state of lowest numbered 
            sub-unit (0 = OFF, 1 = ON)</item>
            <item>Pattern bit 1 = enable state of next numbered sub-unit 
            (0 = OFF, 1 = ON)</item>
            </list>
            </para>
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Sub-unit number.</param>
            <returns>The output enable pattern.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.VsourceSetEnable(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Sets the output enable pattern of voltage source sub-units.
            </summary>
            <remarks><para><b>Notes:</b></para>
            When outputSubunit corresponds to a sub-unit, the function 
            sets the output enable state of that sub-unit alone 
            according to the least significant bit of pattern 
            (0 = OFF, 1 = ON).
            <para>If outputSubunit = 0 (VSOURCE_ALL_VSOURCE_SUB_UNITS), 
            enable states of all the card's sub-units are set; 
            bits in the supplied pattern are utilised in ascending 
            order of sub-unit, i.e.
            <list type="bullet">
            <item>Pattern bit 0 = enable state of lowest numbered 
            sub-unit (0 = OFF, 1 = ON)</item>
            <item>Pattern bit 1 = enable state of next numbered sub-unit 
            (0 = OFF, 1 = ON)</item>
            </list>
            </para>
            <para>
            The present enable pattern can be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceGetEnable(System.Int32,System.Int32,System.UInt32@)"/>.
            </para>
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Sub-unit number.</param>
            <param name="pattern">The pattern of output enables to 
            set.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.VsourceSetVoltage(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Double)">
            <summary>
            Sets the output voltage of voltage source sub-units.
            </summary>
            <remarks><para><b>Notes:</b></para>
            The voltage value specified is rounded to the precision 
            of the sub-unit's DAC. The actual voltage setting can 
            be obtained using 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceGetVoltage(System.Int32,System.Int32,System.Double@)"/>.
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Sub-unit number.</param>
            <param name="voltage">The output voltage to set, in Volts.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.VsourceGetVoltage(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Obtains the output setting of a voltage source sub-unit, 
            as set by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceSetVoltage(System.Int32,System.Int32,System.Double)"/>.
            </summary>
            <remarks><para><b>Notes:</b></para>
            The result is the nominal value to which the output has 
            been set, not necessarily the actual voltage being output 
            (which could be affected by conditions such as 
            current-limiting).
            </remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Sub-unit number.</param>
            <returns>The output setting, in Volts.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.VsourceSetRange(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Double)">
            <summary>
            Selects the output voltage range of voltage source 
            sub-units that have this capability.
            </summary>
            <remarks><para><b>Notes:</b></para>
            Only positive range values are currently accepted, 
            irrespective of whether the sub-unit has positive voltage,
            negative voltage, or bipolar capability.
            <para>For a valid range selection the supplied range value must 
            be acceptably close to a range supported by the sub-unit.</para>
            <para>The present range selection can be obtained using
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceGetRange(System.Int32,System.Int32,System.Double@)"/>.
            </para></remarks>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Sub-unit number.</param>
            <param name="range">The output voltage range to select, 
            in Volts.</param>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.VsourceGetRange(Pickering.Lxi.Piplx.PiplxCard,System.Int32)">
            <summary>
            Obtains the range setting of a voltage source sub-unit, 
            as set by 
            <see cref="M:Pickering.Lxi.Piplx.PiplxManager.VsourceSetRange(System.Int32,System.Int32,System.Double)"/>.
            </summary>
            <param name="card">Piplx card class reference, which this
            sub-unit belongs to.</param>
            <param name="outputSubunit">Sub-unit number.</param>
            <returns>The output range setting, in Volts.</returns>
            <exception cref="T:Pickering.Lxi.Piplx.PiplxException">Thrown when 
            driver code return a fault.</exception>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.GetAttribute``1(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Boolean,Pickering.Lxi.Piplx.AttributeCode)">
            <summary>
            Gets specified attribute value.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="card">Piplx card class reference, which this sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit is output / input.</param>
            <param name="attrCode">Attribute code to get value for.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.GetAttribute``1(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Boolean,Pickering.Lxi.Piplx.AttributeCode,``0@,System.Int32)">
            <summary>
            Gets specified attribute value.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="card">Piplx card class reference, which this sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit is output / input.</param>
            <param name="attrCode">Attribute code to get value for.</param>
            <param name="attrValue">Attribute value.</param>
            <param name="attrValueLength">Size of attribute value data type or string length.</param>
            <returns>Attribute value.</returns>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SubunitFunctions.SetAttribute``1(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Boolean,Pickering.Lxi.Piplx.AttributeCode,``0)">
            <summary>
            Sets specified attribute value.
            </summary>
            <typeparam name="T">Attribute type.</typeparam>
            <param name="card">Piplx card class reference, which this sub-unit belongs to.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="isOutput">Sub-unit is output / input.</param>
            <param name="attrCode">Attribute code to get value for.</param>
            <param name="attrValue">Attribute value.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.SubunitType">
            <summary>
            Sub-unit type codes.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.None">
            <summary>
            Due to compatibility with other languages.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.Input">
            <summary>
            Digital inputs.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.InputComparator">
            <summary>
            Comparator.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.Switch">
            <summary>
            Uncommitted switches.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.Multiplexer">
            <summary>
            Relay multiplexer (single-channel only).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.MultichannelMultiplexer">
            <summary>
            Relay multiplexer (multi-channel capable).
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.Matrix">
            <summary>
            Standard matrix.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.RadioMatrix">
            <summary>
            RF matrix.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.Digital">
            <summary>
            Digital outputs.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.Resistor">
            <summary>
            Programmable Resistor.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.Attenuator">
            <summary>
            Programmable RF Attenuator.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.PowerSupply">
            <summary>
            Power supply - DC.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.BatterySimulator">
            <summary>
            Battery Simulator.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.ProgrammableVoltageSource">
            <summary>
            Programmable Voltage Source.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.MatrixP">
            <summary>
            Pole-switched matrix.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.MuxmS">
            <summary>
            MUXM and MUX at runtime
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.FaultInsertion">
            <summary>
            Fault Insertion Sub with runtime restrictions
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.DisplacementModule">
            <summary>
            Displacement module.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.PowerSource">
            <summary>
            Current Loop similar module.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.DigitalInputOutput">
            <summary>
            Digital Input Output.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.SelfAligningMatrix">
            <summary>
            Matrix (MATRIXS) with self aligning capability.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.DigitalAnalogConverter">
            <summary>
            Digital Analog Converter.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SubunitType.Comparator">
            <summary>
            Comparator.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.SwitchAction">
            <summary>
            Enumeration for SwitchAction values. This enumeration is used by
            OperateSwitch function.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchAction.None">
            <summary>
            No switch change - just set State result.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchAction.Open">
            <summary>
            Open switch.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchAction.Close">
            <summary>
            Close switch.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.SwitchFunction">
            <summary>
            Enumeration for SwitchFunc values. This enumeration is used by 
            OperateSwitch function.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchFunction.Channel">
            <summary>
            A channel (matrix crosspoint) switch.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchFunction.XIsolation">
            <summary>
            A matrix X-isolation switch.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchFunction.YIsolation">
            <summary>
            A matrix Y-isolation switch.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchFunction.XLoopThru">
            <summary>
            A matrix X-loopthru switch.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchFunction.YLoopThru">
            <summary>
            A matrix Y-loopthru switch.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchFunction.XBifurcation">
            <summary>
            A X-bifurcation switch.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.SwitchFunction.YBifurcation">
            <summary>
            A Y-bifurcation switch.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.SwitchSubunit">
            <summary>
            Class representing Uncommitted switch subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SwitchSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the SwitchSubunit class, which represents the 
            physical subunit on the specified card.
            </summary>
            <param name="baseCard">Base card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.SwitchSubunit.OperateBits(System.Int32[],System.Boolean)">
            <summary>
            Operate set of bits specified in array of indexes.
            </summary>
            <param name="bitNumbers">Numbers of bits to be operated.</param>
            <param name="state">True to energise, false to 
            de-energise.</param>
        </member>
        <member name="T:Pickering.Lxi.Piplx.ValueType">
            <summary>
            The type of a value.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ValueType.Voltage">
            <summary>
            Voltage value type.
            </summary>
        </member>
        <member name="F:Pickering.Lxi.Piplx.ValueType.Current">
            <summary>
            Current value type.
            </summary>
        </member>
        <member name="T:Pickering.Lxi.Piplx.VoltageAttenuatorCards">
            <summary>
            Class, which contains list of all known cards of the Voltage 
            Attenuator type.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.VoltageAttenuatorCards.GetVoltageAttenuatorCards">
            <summary>
            Initialization of list of voltage attenuator cards.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.VoltageAttenuatorCards.IsVoltageAttenuator(System.String)">
            <summary>
            Decides from string type code if the card is of the type 
            VoltageAttenuator.
            </summary>
            <param name="code">The string type code.</param>
            <returns>True - card is Voltage Attenuator; 
            False - card is <b>NOT</b> Voltage Attenuator </returns>
        </member>
        <member name="T:Pickering.Lxi.Piplx.VoltageAttenuatorSubunit">
            <summary>
            Class representing Voltage attenuator subunit.
            </summary>
        </member>
        <member name="M:Pickering.Lxi.Piplx.VoltageAttenuatorSubunit.#ctor(Pickering.Lxi.Piplx.PiplxCard,System.Int32,System.Int32)">
            <summary>
            Creates the VoltageAttenuatorSubunit class, which 
            represents the physical subunit on the specified card.
            </summary>
            <param name="card">Piplx card.</param>
            <param name="subunitNumber">Sub-unit number.</param>
            <param name="bitsCount">Number of bits.</param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.VoltageAttenuatorSubunit.SetOffset(System.Int32)">
            <summary>
            Sets offset of voltage amplifier channel
            </summary>
            <param name="offset">
            Offset to set, value is 0-255, 128 = offset 0, 255 = offset 5mV, 0 = offset -5mV de-energize.
            </param>
        </member>
        <member name="M:Pickering.Lxi.Piplx.VoltageAttenuatorSubunit.GetOffset">
            <summary>
            Gets offset of voltage amplifier channel.
            </summary>
            <returns>Offset of voltage amplifier channel.</returns>
        </member>
    </members>
</doc>
